{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/indigo/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/embed.min.js","path":"js/embed.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/cloudTie/mobile.less","path":"css/cloudTie/mobile.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/cloudTie/pc.less","path":"css/cloudTie/pc.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/index.md","hash":"8c42c00a8787b7773446af700e47bf01b7a502c1","modified":1510486232862},{"_id":"themes/indigo/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1510486232862},{"_id":"themes/indigo/_config.yml","hash":"34b095b28f0e9da917e6884a2fd5d671978c7543","modified":1510493011997},{"_id":"themes/indigo/package.json","hash":"762a2e2fe4d861807b37d8f8992aa4cfb08abd2a","modified":1510486232898},{"_id":"source/favicon.ico","hash":"79668d2b060d8f7d7edba3b11f6d8e0ac15b1649","modified":1510486232862},{"_id":"source/TimeLine/index.md","hash":"9f1ad1c6fe57f7803d3dadd03e7c93089a1ab5cc","modified":1510486232862},{"_id":"source/categories/index.md","hash":"8dd1c5f347ae8fc92658a11cfe71536e533f758a","modified":1510486232862},{"_id":"source/_posts/0-Hello-World.md","hash":"6184cba2d627f44bd4f721e54740d6958fcdecc1","modified":1510576495686},{"_id":"source/_posts/1-0-things-before-start.md","hash":"37a5d3891023f9e30b05f851ba8083bef0ac955f","modified":1510486232862},{"_id":"source/_posts/1-1-computer-the-machine-only-knows-0-and-1.md","hash":"c966d9947747382348dc9c86cca04719ffad0fb2","modified":1510486232862},{"_id":"source/_posts/1-2-get-inside-open-the-pandorabox.md","hash":"bd5976aa5aaa09bbb70bd23c1f499d49f8d8504b","modified":1510489588000},{"_id":"source/license/index.md","hash":"87716833e2dba902dffa81878961a435c2fdf943","modified":1510486232862},{"_id":"source/tags/index.md","hash":"162b6cd0e50e4503ff4506f60e9c8d322215018e","modified":1510486232862},{"_id":"source/talks/index.md","hash":"bcb8c61bef45b5632aaa24158cad277569aa0ad0","modified":1510486232862},{"_id":"themes/indigo/languages/en.yml","hash":"ca040f02bbd75cd3e35c9cada388c1e689acdd4f","modified":1510486232878},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"1c3b8dab9249f571951836bf575e1178e55394f0","modified":1510486232878},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"9f0df07469ca4c308a3fdad81de47747ba76d640","modified":1510486232878},{"_id":"themes/indigo/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1510486232898},{"_id":"themes/indigo/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1510486232898},{"_id":"themes/indigo/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1510486232898},{"_id":"themes/indigo/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1510486232898},{"_id":"themes/indigo/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1510486232898},{"_id":"themes/indigo/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1510486232898},{"_id":"themes/indigo/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1510486232898},{"_id":"themes/indigo/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1510486232898},{"_id":"themes/indigo/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1510486232898},{"_id":"themes/indigo/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1510486232898},{"_id":"themes/indigo/source/favicon.ico","hash":"79668d2b060d8f7d7edba3b11f6d8e0ac15b1649","modified":1510486232906},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"2519459c968d7f959e21216e2bf6865ce175e763","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"e01d1987f1016c521a19355d38d35dc78d20f3da","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"6156bf20791e46fc1c5872113276c1c1f5c13773","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"58745bd3b21926014a98e18a35c9721e97fcb0c1","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"d39afaad6b0dd2a3ae27e6db3e9a6cd6014622fa","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"27f37ef30ea3651940be6f3f16f33ec492b252e5","modified":1510486232890},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"9b4dd97e7f558bb619d805ff6eb89abd8bc945ea","modified":1510486232898},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1510486232898},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"61508623439229cddf6c33dab8e03a5f7f25b526","modified":1510486232898},{"_id":"themes/indigo/source/css/style.less","hash":"6e8609fa857be01f0206209a746c9872389c42c3","modified":1510486232906},{"_id":"themes/indigo/source/img/avatar.png","hash":"3ba4a3ae89be338b97c04cf5345f13fe0399b4b7","modified":1510486232906},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1510486232906},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1510486232906},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1510486232906},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1510486232906},{"_id":"themes/indigo/source/js/main.js","hash":"5c51b53d59d5131bfa4e9b6a0af3557ee6dc6a85","modified":1510486232910},{"_id":"themes/indigo/source/js/main.min.js","hash":"7355f5a169c02ff32af75b95237ef34e3756e9c8","modified":1510486232910},{"_id":"themes/indigo/source/js/search.js","hash":"c3f80dee3bab6bd4895b55b849085c8af7d1e647","modified":1510486232910},{"_id":"themes/indigo/source/js/search.min.js","hash":"c0c3d048af0d6b840f6f1dfda08911c7bfdb5dc1","modified":1510486232910},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"f4aaa5acefaae10c6b8c8ec477ba01e577316330","modified":1510486232906},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"1eda2ae2f23bfea60cf3bd33f6f66e3555fff11c","modified":1510486232906},{"_id":"themes/indigo/source/js/embed.min.js","hash":"bf39139ceccbd38a925bc1c434f6229df27b0e7c","modified":1510486232910},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo-count.ejs","hash":"de23dfaaaed783f6ade86084fb7bcee531dce4d0","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo-js.ejs","hash":"fe1117d6e3c8a52be00ecc758df2df4be91b13a5","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo.ejs","hash":"edc98c8015ab1deff32507d5f563f5cab0bd7f68","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"23c101d45911eb0846533aaa2d409c43aa5e899a","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1510486232886},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"f7894de536554386d854fbb5f3e3016ff8f56b74","modified":1510492956000},{"_id":"themes/indigo/layout/_partial/plugins/wangyi-ygt.ejs","hash":"0540808912afbbd8dddbdd15b8d1b54426d8b221","modified":1510486232890},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1510486232898},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"03666727493d6d34b12c433e320335d8d6b2bda1","modified":1510486232898},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"968b27ca952d01b066cfe49fb670faf177d6b67e","modified":1510486232898},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1510486232898},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1510486232898},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1510486232898},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1510486232898},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"eda51e99f1e852f2c858706345a4d2b23a85f03f","modified":1510486232898},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1510486232898},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"56eab8de82e169f6f5dece2ba2870e7ffd6cf8f8","modified":1510486232898},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1510486232898},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1510486232898},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"b6123e895c16ace651f1832281ff655776d4068c","modified":1510486232898},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1510486232898},{"_id":"themes/indigo/source/css/_duoshuo/common.less","hash":"49fdcf4bde1a9d2aa4db4d8d117f46b432cee8d0","modified":1510486232898},{"_id":"themes/indigo/source/css/_duoshuo/custom.less","hash":"b6b4caf08c3be67db5a14fc54241b61a815a5ffa","modified":1510486232898},{"_id":"themes/indigo/source/css/_duoshuo/dialog.less","hash":"61596d022ea489ec6a0dda9fe93c5c6479135da9","modified":1510486232898},{"_id":"themes/indigo/source/css/_duoshuo/embed.less","hash":"a09aeb68646e6309d737dddea237a2d160608bbf","modified":1510486232898},{"_id":"themes/indigo/source/css/_duoshuo/global.less","hash":"933874033bc487937ea34f6b05f1f94bd52ad758","modified":1510486232898},{"_id":"themes/indigo/source/css/_duoshuo/login.less","hash":"6a7962f817199802f91d32d4e9bb87098683d84c","modified":1510486232898},{"_id":"themes/indigo/source/css/_duoshuo/mixins.less","hash":"caf782f681fc97ecdab34bc34e16e3353bcd1eb6","modified":1510486232898},{"_id":"themes/indigo/source/css/_duoshuo/notify.less","hash":"de48d76de6b99d7aa3f176cb1345b5bd1a6e3ec0","modified":1510486232898},{"_id":"themes/indigo/source/css/_duoshuo/recent-visitors.less","hash":"9494e2183ce7a7a3f5742e3ba42b3514312a5006","modified":1510486232898},{"_id":"themes/indigo/source/css/_duoshuo/recent-comments.less","hash":"1e2a57b7dc9ca3ef46d9966b49d0a8e614920c0a","modified":1510486232898},{"_id":"themes/indigo/source/css/_duoshuo/share.less","hash":"4218e03b97d12b006dc01c78f02f76a1e0daafb7","modified":1510486232898},{"_id":"themes/indigo/source/css/_duoshuo/thread.less","hash":"2fb5b1105fd1863c2fc25fa5c9973748691b93e8","modified":1510486232898},{"_id":"themes/indigo/source/css/_duoshuo/variables.less","hash":"2cf171e7465da213a28e3c271303916ceef9c8a2","modified":1510486232898},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1510486232898},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"926df2edbeb6afdbe8955b336f191ed991f66450","modified":1510486232898},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1510486232898},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1510486232898},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1510486232898},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"c075e2ee959ada91091281da98cf020c83930124","modified":1510486232898},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1510486232898},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1510486232898},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1510486232898},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"156b5d2c2b83d2fd768c83119bd1dc23756f657d","modified":1510486232898},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"15e2bcbdf2ffb44707e4c7d0b6ba166fe1598ac0","modified":1510486232898},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1510486232898},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1510486232898},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1510486232898},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1510486232898},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"88635cb5673f4cd1d10e4af481e2208be4886565","modified":1510486232898},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1510486232898},{"_id":"themes/indigo/source/css/cloudTie/_inputBox.less","hash":"3156898bbbbe0d897f475c03e1e6245e97399613","modified":1510486232898},{"_id":"themes/indigo/source/css/cloudTie/_joinCount.less","hash":"c1e5821189d17419869249cbd556d8da992fbfd3","modified":1510486232898},{"_id":"themes/indigo/source/css/cloudTie/_reset.less","hash":"9228ab9e7d92a3cd8cda340ae67f5b172863c835","modified":1510486232898},{"_id":"themes/indigo/source/css/cloudTie/_share.less","hash":"9c95ca439e85fadbca00778463a9375fbeba9ad2","modified":1510486232898},{"_id":"themes/indigo/source/css/cloudTie/mobile.less","hash":"0d68b7606a1b3c14a18a03ae3c80e4602f13c75b","modified":1510486232898},{"_id":"themes/indigo/source/css/cloudTie/pc.less","hash":"8038abcea49d6f74a6ff155cc565b4a675107ae6","modified":1510486232898},{"_id":"themes/indigo/source/js/embed.js","hash":"3ac650967aa0f74ec4d7ef5d8d168f7f199e31af","modified":1510486232910},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"c19f5e28365c7ba6fa938591a8021da7d603253d","modified":1510486232898},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1510486232902},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1510486232902},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1510486232902},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1510486232902},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1510486232902},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1510486232902},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1510486232902},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1510486232902},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1510486232902},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1510486232902},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1510486232906},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1510486232906},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1510486232906},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1510486232906},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1510486232906},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1510486232902},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1510486232902},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1510486232902},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1510486232902},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1510486232902},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1510486232906},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1510486232906},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1510486232898},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1510486232898},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1510486232898},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1510486232898},{"_id":"public/atom.xml","hash":"b8b59107820f26317ddc1c42822a3c8b2dde37e6","modified":1510576512421},{"_id":"public/content.json","hash":"2d2ff3599b0cf348021a9ffb8932a5796d18e759","modified":1510576512095},{"_id":"public/index.html","hash":"66402d17d480290271284354e97ff102cf85b84f","modified":1510493024756},{"_id":"public/TimeLine/index.html","hash":"da02db498af8fd1f1773db8e630a916c3344d32a","modified":1510493024756},{"_id":"public/categories/index.html","hash":"22216353170efbdc8fdf180a9076790730f9c3bc","modified":1510493024756},{"_id":"public/license/index.html","hash":"60ac6ed6305c5c33607c4dad32e0febad6f7ec26","modified":1510493024756},{"_id":"public/talks/index.html","hash":"76ba2fc69c266cf5d43f39aec5a22d700de8d769","modified":1510493024756},{"_id":"public/archives/index.html","hash":"733b8845e5e5288bf51c6e5e3ae86816732e0cba","modified":1510493024756},{"_id":"public/archives/2017/index.html","hash":"0f1d43cc5dd5f999090d06f539bdd5d674c9e257","modified":1510493024756},{"_id":"public/archives/2017/04/index.html","hash":"6777548934b86379fb3732b126269a94b7232c99","modified":1510493024756},{"_id":"public/archives/2017/05/index.html","hash":"4ef31b8602ebbb679039366f995835ed72caa251","modified":1510493024756},{"_id":"public/categories/0-Chapter/index.html","hash":"7423a76f1db44898d8aa874d102baaca54a4524c","modified":1510493024757},{"_id":"public/categories/1-Chapter/index.html","hash":"ad473cd16e5ce2ea0cea178d1035183cab09907f","modified":1510493024757},{"_id":"public/tags/Hello/index.html","hash":"15649c7678088be2a6cb5b2c88a6ed0c3efacf95","modified":1510493024757},{"_id":"public/tags/Hello-World/index.html","hash":"5b7e2ce7bceb036572d58f25468eae2248a837ef","modified":1510493024757},{"_id":"public/tags/前言/index.html","hash":"b2114139a5eebf50563b685939aaefcccf590c0c","modified":1510493024757},{"_id":"public/tags/常见问题/index.html","hash":"15a2217b35b5044c27487cf0c0a98b3fc30b105e","modified":1510493024757},{"_id":"public/tags/计算机/index.html","hash":"196ef5fdfb7ab3f9cd5261c1226262189ee334b8","modified":1510493024757},{"_id":"public/tags/计算机基础/index.html","hash":"47dce265e35a79ef767ae4ea054b76c3491bfa44","modified":1510493024757},{"_id":"public/tags/二进制/index.html","hash":"121ee3abf659b5a39cf29cbb3f3a1012cb5ae019","modified":1510493024757},{"_id":"public/tags/计算机原理/index.html","hash":"afcd228c4b6c708f7b3ca54926cf40be1ce72471","modified":1510493024757},{"_id":"public/tags/程序/index.html","hash":"477403e6b0e19be42b41df322cabe08292697b28","modified":1510493024757},{"_id":"public/tags/指令/index.html","hash":"8b0e630f232a15917ffa3f9aeb376eaf9a781da2","modified":1510493024757},{"_id":"public/tags/硬件/index.html","hash":"cc43f658ee340560ac6a43d62f78d5c4dd719aed","modified":1510493024757},{"_id":"public/tags/CPU/index.html","hash":"1b9d1ca0415e439f4012aedede4470f49c0f75b5","modified":1510493024757},{"_id":"public/tags/处理器/index.html","hash":"30d6b541587c033a9180594a07a73fdb9c631834","modified":1510493024757},{"_id":"public/tags/GPU/index.html","hash":"98696501ec37b9709b964b6101d27471170ebe17","modified":1510493024757},{"_id":"public/tags/显卡/index.html","hash":"bcdc3c1420a0a9e71c281085689a38f5f4ba069b","modified":1510493024757},{"_id":"public/tags/内存/index.html","hash":"1ebc3d64ca7fbfc229777d8713b4c206f41f7fbb","modified":1510493024758},{"_id":"public/tags/index.html","hash":"a3399acc59de739ebf5bae5c12d3ea69b3b3981e","modified":1510493024758},{"_id":"public/0-Chapter/0-Hello-World/index.html","hash":"87a97ee16a405186250140730316ccb1447c61c1","modified":1510576512427},{"_id":"public/1-Chapter/1-0-things-before-start/index.html","hash":"acf920eabaf9338791fa4664207a56b49b4c8ef4","modified":1510493024758},{"_id":"public/1-Chapter/1-1-computer-the-machine-only-knows-0-and-1/index.html","hash":"f23989eaa2fac98902fbabda3ae6e2cceff7235c","modified":1510493024758},{"_id":"public/1-Chapter/1-2-get-inside-open-the-pandorabox/index.html","hash":"e3ffddafee4703b753a82b4eb81c093a6f768fb2","modified":1510493024758},{"_id":"public/img/avatar.png","hash":"3ba4a3ae89be338b97c04cf5345f13fe0399b4b7","modified":1510493024762},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1510493024762},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1510493024762},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1510493024762},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1510493024762},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1510493024762},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1510493024762},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1510493024762},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1510493024762},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1510493024762},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1510493024762},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1510493024762},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1510493024763},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1510493024763},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1510493024763},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1510493024763},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1510493024763},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1510493024763},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1510493024763},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1510493024763},{"_id":"public/favicon.ico","hash":"79668d2b060d8f7d7edba3b11f6d8e0ac15b1649","modified":1510493024811},{"_id":"public/img/alipay.jpg","hash":"f4aaa5acefaae10c6b8c8ec477ba01e577316330","modified":1510493024811},{"_id":"public/img/wechat.jpg","hash":"1eda2ae2f23bfea60cf3bd33f6f66e3555fff11c","modified":1510493024812},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1510493024812},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1510493024812},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1510493024812},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1510493024812},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1510493024812},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1510493024813},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1510493024813},{"_id":"public/js/main.min.js","hash":"7355f5a169c02ff32af75b95237ef34e3756e9c8","modified":1510493024815},{"_id":"public/js/search.js","hash":"c3f80dee3bab6bd4895b55b849085c8af7d1e647","modified":1510493024815},{"_id":"public/js/search.min.js","hash":"c0c3d048af0d6b840f6f1dfda08911c7bfdb5dc1","modified":1510493024815},{"_id":"public/js/main.js","hash":"5c51b53d59d5131bfa4e9b6a0af3557ee6dc6a85","modified":1510493024815},{"_id":"public/js/embed.min.js","hash":"bf39139ceccbd38a925bc1c434f6229df27b0e7c","modified":1510493024815},{"_id":"public/js/embed.js","hash":"3ac650967aa0f74ec4d7ef5d8d168f7f199e31af","modified":1510493024816},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1510493024816},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1510493024816},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1510493024816},{"_id":"public/css/cloudTie/mobile.css","hash":"1b3dd9263c84bdc017669bbbb128574265bb8143","modified":1510493024819},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1510493024821},{"_id":"public/css/cloudTie/pc.css","hash":"182bb208eba8fa1fe856b70cb3f0e1b56ad44546","modified":1510493024972},{"_id":"public/css/style.css","hash":"726fcde38f9faab26eb9cef14c97a6a03d0d5cc4","modified":1510493025174}],"Category":[{"name":"0 Chapter","_id":"cj9wsjoiz00054xlm0xh0zuhq"},{"name":"1 Chapter","_id":"cj9wsjoj3000c4xlmdwmkp0kg"}],"Data":[],"Page":[{"layout":"page","title":"Teach-C","description":"Welcome Guide","comments":0,"_content":"\n@card{\n# 随便说点前言\n\n 啊哈，欢迎来到Teach-C，一个简简单单的C语言自学网站，是一个由国内顶尖高校的顶级计算机学院高材生历时.....才怪呢！我们没有运维！没有作者！没有校对！没有前端！没有后端！哦！都算不上我们！对！就我一个人，也不是名校出身，学习也不好，而且是大一新生。反正总之就是没啥内涵也没啥口才的一个（算是）人吧（而且还特别懒）。\n\n 总之这就是Teach-C ， 一个由没什么内涵的大学生维护的不知道啥时候就不更了的C语言在线自学项目........\n\n 本来我都不想做这个欢迎界面的，本来的主界面就是按照倒序排序的最新文章，但是我给一些朋友看了之后他们找不到开头，以为我就写了一篇文章，所以，主页砍了！对！砍了！反正这是我的项目，我想怎么弄就怎么弄！哼哼！\n\n 现在说说Teach-C的使用说明吧！\n \n}\n\n# Teach-C 正确的打开方法\n\n@card{\n\n## 网址\nTeach-C有好多网址，用的最多的当然是[https://Teach-C.xyz](https://Teach-C.xyz) 啦～至于其他的网址，就罗列到下面了：\n\n> [https://TeachC.xyz](https://TeachC.xyz)\n> [https://teach-c.github.io/](https://teach-c.github.io/) (github page 映像站)\n\n## 使用方法\n\n有的朋友问我怎么才能看到目录，我作为人性化的集大成者，当然设计的很简单了，只需要点击左上角的 <i class=\"icon icon-bars\"></i> 就可以打开菜单了，然后选择 [章节](https://teach-c.xyz/categories/) 就可以看到Teach-C的目录了～\n\n其他的，这个网站是全中文的，你们就自己探索吧，右上角是搜索和分享按钮。\n\n对了，每篇文章下面都有打赏和评论功能，评论功能需要加载一会，如果你是正常阅读，等你阅读到底部的时候，评论已经加载好了～\n\n最后，这个网站对移动端进行了优化，在桌面和移动端都可以很好的渲染。\n\n}\n\n# 问题反馈\n@card{\n\n如果在阅读中遇到问题请在该文章下的评论区留言，对网站有什么意见，请打开菜单，选择[Talks](https://teach-c.xyz/talks)\n\n}\n \n","source":"index.md","raw":"layout: page\ntitle: Teach-C\ndescription:  Welcome Guide\ncomments: false \n----\n\n@card{\n# 随便说点前言\n\n 啊哈，欢迎来到Teach-C，一个简简单单的C语言自学网站，是一个由国内顶尖高校的顶级计算机学院高材生历时.....才怪呢！我们没有运维！没有作者！没有校对！没有前端！没有后端！哦！都算不上我们！对！就我一个人，也不是名校出身，学习也不好，而且是大一新生。反正总之就是没啥内涵也没啥口才的一个（算是）人吧（而且还特别懒）。\n\n 总之这就是Teach-C ， 一个由没什么内涵的大学生维护的不知道啥时候就不更了的C语言在线自学项目........\n\n 本来我都不想做这个欢迎界面的，本来的主界面就是按照倒序排序的最新文章，但是我给一些朋友看了之后他们找不到开头，以为我就写了一篇文章，所以，主页砍了！对！砍了！反正这是我的项目，我想怎么弄就怎么弄！哼哼！\n\n 现在说说Teach-C的使用说明吧！\n \n}\n\n# Teach-C 正确的打开方法\n\n@card{\n\n## 网址\nTeach-C有好多网址，用的最多的当然是[https://Teach-C.xyz](https://Teach-C.xyz) 啦～至于其他的网址，就罗列到下面了：\n\n> [https://TeachC.xyz](https://TeachC.xyz)\n> [https://teach-c.github.io/](https://teach-c.github.io/) (github page 映像站)\n\n## 使用方法\n\n有的朋友问我怎么才能看到目录，我作为人性化的集大成者，当然设计的很简单了，只需要点击左上角的 <i class=\"icon icon-bars\"></i> 就可以打开菜单了，然后选择 [章节](https://teach-c.xyz/categories/) 就可以看到Teach-C的目录了～\n\n其他的，这个网站是全中文的，你们就自己探索吧，右上角是搜索和分享按钮。\n\n对了，每篇文章下面都有打赏和评论功能，评论功能需要加载一会，如果你是正常阅读，等你阅读到底部的时候，评论已经加载好了～\n\n最后，这个网站对移动端进行了优化，在桌面和移动端都可以很好的渲染。\n\n}\n\n# 问题反馈\n@card{\n\n如果在阅读中遇到问题请在该文章下的评论区留言，对网站有什么意见，请打开菜单，选择[Talks](https://teach-c.xyz/talks)\n\n}\n \n","date":"2017-11-12T11:30:32.862Z","updated":"2017-11-12T11:30:32.862Z","path":"index.html","_id":"cj9wsjoi900004xlmwmrgmhjz","content":"<p>@card{</p>\n<h1 id=\"随便说点前言\"><a href=\"#随便说点前言\" class=\"headerlink\" title=\"随便说点前言\"></a>随便说点前言</h1><p> 啊哈，欢迎来到Teach-C，一个简简单单的C语言自学网站，是一个由国内顶尖高校的顶级计算机学院高材生历时…..才怪呢！我们没有运维！没有作者！没有校对！没有前端！没有后端！哦！都算不上我们！对！就我一个人，也不是名校出身，学习也不好，而且是大一新生。反正总之就是没啥内涵也没啥口才的一个（算是）人吧（而且还特别懒）。</p>\n<p> 总之这就是Teach-C ， 一个由没什么内涵的大学生维护的不知道啥时候就不更了的C语言在线自学项目……..</p>\n<p> 本来我都不想做这个欢迎界面的，本来的主界面就是按照倒序排序的最新文章，但是我给一些朋友看了之后他们找不到开头，以为我就写了一篇文章，所以，主页砍了！对！砍了！反正这是我的项目，我想怎么弄就怎么弄！哼哼！</p>\n<p> 现在说说Teach-C的使用说明吧！</p>\n<p>}</p>\n<h1 id=\"Teach-C-正确的打开方法\"><a href=\"#Teach-C-正确的打开方法\" class=\"headerlink\" title=\"Teach-C 正确的打开方法\"></a>Teach-C 正确的打开方法</h1><p>@card{</p>\n<h2 id=\"网址\"><a href=\"#网址\" class=\"headerlink\" title=\"网址\"></a>网址</h2><p>Teach-C有好多网址，用的最多的当然是<a href=\"https://Teach-C.xyz\">https://Teach-C.xyz</a> 啦～至于其他的网址，就罗列到下面了：</p>\n<blockquote>\n<p><a href=\"https://TeachC.xyz\" target=\"_blank\" rel=\"external\">https://TeachC.xyz</a><br><a href=\"https://teach-c.github.io/\" target=\"_blank\" rel=\"external\">https://teach-c.github.io/</a> (github page 映像站)</p>\n</blockquote>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>有的朋友问我怎么才能看到目录，我作为人性化的集大成者，当然设计的很简单了，只需要点击左上角的 <i class=\"icon icon-bars\"></i> 就可以打开菜单了，然后选择 <a href=\"https://teach-c.xyz/categories/\">章节</a> 就可以看到Teach-C的目录了～</p>\n<p>其他的，这个网站是全中文的，你们就自己探索吧，右上角是搜索和分享按钮。</p>\n<p>对了，每篇文章下面都有打赏和评论功能，评论功能需要加载一会，如果你是正常阅读，等你阅读到底部的时候，评论已经加载好了～</p>\n<p>最后，这个网站对移动端进行了优化，在桌面和移动端都可以很好的渲染。</p>\n<p>}</p>\n<h1 id=\"问题反馈\"><a href=\"#问题反馈\" class=\"headerlink\" title=\"问题反馈\"></a>问题反馈</h1><p>@card{</p>\n<p>如果在阅读中遇到问题请在该文章下的评论区留言，对网站有什么意见，请打开菜单，选择<a href=\"https://teach-c.xyz/talks\">Talks</a></p>\n<p>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>@card{</p>\n<h1 id=\"随便说点前言\"><a href=\"#随便说点前言\" class=\"headerlink\" title=\"随便说点前言\"></a>随便说点前言</h1><p> 啊哈，欢迎来到Teach-C，一个简简单单的C语言自学网站，是一个由国内顶尖高校的顶级计算机学院高材生历时…..才怪呢！我们没有运维！没有作者！没有校对！没有前端！没有后端！哦！都算不上我们！对！就我一个人，也不是名校出身，学习也不好，而且是大一新生。反正总之就是没啥内涵也没啥口才的一个（算是）人吧（而且还特别懒）。</p>\n<p> 总之这就是Teach-C ， 一个由没什么内涵的大学生维护的不知道啥时候就不更了的C语言在线自学项目……..</p>\n<p> 本来我都不想做这个欢迎界面的，本来的主界面就是按照倒序排序的最新文章，但是我给一些朋友看了之后他们找不到开头，以为我就写了一篇文章，所以，主页砍了！对！砍了！反正这是我的项目，我想怎么弄就怎么弄！哼哼！</p>\n<p> 现在说说Teach-C的使用说明吧！</p>\n<p>}</p>\n<h1 id=\"Teach-C-正确的打开方法\"><a href=\"#Teach-C-正确的打开方法\" class=\"headerlink\" title=\"Teach-C 正确的打开方法\"></a>Teach-C 正确的打开方法</h1><p>@card{</p>\n<h2 id=\"网址\"><a href=\"#网址\" class=\"headerlink\" title=\"网址\"></a>网址</h2><p>Teach-C有好多网址，用的最多的当然是<a href=\"https://Teach-C.xyz\">https://Teach-C.xyz</a> 啦～至于其他的网址，就罗列到下面了：</p>\n<blockquote>\n<p><a href=\"https://TeachC.xyz\">https://TeachC.xyz</a><br><a href=\"https://teach-c.github.io/\">https://teach-c.github.io/</a> (github page 映像站)</p>\n</blockquote>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>有的朋友问我怎么才能看到目录，我作为人性化的集大成者，当然设计的很简单了，只需要点击左上角的 <i class=\"icon icon-bars\"></i> 就可以打开菜单了，然后选择 <a href=\"https://teach-c.xyz/categories/\">章节</a> 就可以看到Teach-C的目录了～</p>\n<p>其他的，这个网站是全中文的，你们就自己探索吧，右上角是搜索和分享按钮。</p>\n<p>对了，每篇文章下面都有打赏和评论功能，评论功能需要加载一会，如果你是正常阅读，等你阅读到底部的时候，评论已经加载好了～</p>\n<p>最后，这个网站对移动端进行了优化，在桌面和移动端都可以很好的渲染。</p>\n<p>}</p>\n<h1 id=\"问题反馈\"><a href=\"#问题反馈\" class=\"headerlink\" title=\"问题反馈\"></a>问题反馈</h1><p>@card{</p>\n<p>如果在阅读中遇到问题请在该文章下的评论区留言，对网站有什么意见，请打开菜单，选择<a href=\"https://teach-c.xyz/talks\">Talks</a></p>\n<p>}</p>\n"},{"layout":"page","title":"时间线","description":"记录Teach-C的每一个足迹","comments":0,"reward":false,"_content":"\n\n# **Teach-C**\n\n@timeline{\n\n##### 2017\n\n@item{\n###### 3月1日\n\nTeach-C计划开始萌芽\n（作者脑内）\n\n}\n\n@item{\n###### 4月20日\n\n确定网站架构，引擎，主题\n\n}\n\n@item{\n###### 4月26日\n\n网站框架构造完毕\n开通 Teach-C Github 帐号\n\n}\n\n@item{\n###### 4月27日\n\nTeach-C.github.io 开通\n\n}\n\n@item{\n###### 4月28号\n\n第一篇文章发布\n\n}\n\n@item{\n###### 5月8号\n\n购买Teach-C.xyz \n以及TeachC.xyz域名\n\n}\n\n@item{\n###### 5月11日\n\n为网站添加Https证书\n\n}\n\n@item{\n###### 5月13日\n\nTeach-C 开始内测\n\n}\n\n}\n\n# 未完待续...\n\n","source":"TimeLine/index.md","raw":"layout: page      \ntitle: 时间线\ndescription: 记录Teach-C的每一个足迹    \ncomments: false \nreward: false\n----\n\n\n# **Teach-C**\n\n@timeline{\n\n##### 2017\n\n@item{\n###### 3月1日\n\nTeach-C计划开始萌芽\n（作者脑内）\n\n}\n\n@item{\n###### 4月20日\n\n确定网站架构，引擎，主题\n\n}\n\n@item{\n###### 4月26日\n\n网站框架构造完毕\n开通 Teach-C Github 帐号\n\n}\n\n@item{\n###### 4月27日\n\nTeach-C.github.io 开通\n\n}\n\n@item{\n###### 4月28号\n\n第一篇文章发布\n\n}\n\n@item{\n###### 5月8号\n\n购买Teach-C.xyz \n以及TeachC.xyz域名\n\n}\n\n@item{\n###### 5月11日\n\n为网站添加Https证书\n\n}\n\n@item{\n###### 5月13日\n\nTeach-C 开始内测\n\n}\n\n}\n\n# 未完待续...\n\n","date":"2017-11-12T11:30:32.862Z","updated":"2017-11-12T11:30:32.862Z","path":"TimeLine/index.html","_id":"cj9wsjoit00014xlm40u73diy","content":"<h1 id=\"Teach-C\"><a href=\"#Teach-C\" class=\"headerlink\" title=\"Teach-C\"></a><strong>Teach-C</strong></h1><p>@timeline{</p>\n<h5 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h5><p>@item{</p>\n<h6 id=\"3月1日\"><a href=\"#3月1日\" class=\"headerlink\" title=\"3月1日\"></a>3月1日</h6><p>Teach-C计划开始萌芽<br>（作者脑内）</p>\n<p>}</p>\n<p>@item{</p>\n<h6 id=\"4月20日\"><a href=\"#4月20日\" class=\"headerlink\" title=\"4月20日\"></a>4月20日</h6><p>确定网站架构，引擎，主题</p>\n<p>}</p>\n<p>@item{</p>\n<h6 id=\"4月26日\"><a href=\"#4月26日\" class=\"headerlink\" title=\"4月26日\"></a>4月26日</h6><p>网站框架构造完毕<br>开通 Teach-C Github 帐号</p>\n<p>}</p>\n<p>@item{</p>\n<h6 id=\"4月27日\"><a href=\"#4月27日\" class=\"headerlink\" title=\"4月27日\"></a>4月27日</h6><p>Teach-C.github.io 开通</p>\n<p>}</p>\n<p>@item{</p>\n<h6 id=\"4月28号\"><a href=\"#4月28号\" class=\"headerlink\" title=\"4月28号\"></a>4月28号</h6><p>第一篇文章发布</p>\n<p>}</p>\n<p>@item{</p>\n<h6 id=\"5月8号\"><a href=\"#5月8号\" class=\"headerlink\" title=\"5月8号\"></a>5月8号</h6><p>购买Teach-C.xyz<br>以及TeachC.xyz域名</p>\n<p>}</p>\n<p>@item{</p>\n<h6 id=\"5月11日\"><a href=\"#5月11日\" class=\"headerlink\" title=\"5月11日\"></a>5月11日</h6><p>为网站添加Https证书</p>\n<p>}</p>\n<p>@item{</p>\n<h6 id=\"5月13日\"><a href=\"#5月13日\" class=\"headerlink\" title=\"5月13日\"></a>5月13日</h6><p>Teach-C 开始内测</p>\n<p>}</p>\n<p>}</p>\n<h1 id=\"未完待续…\"><a href=\"#未完待续…\" class=\"headerlink\" title=\"未完待续…\"></a>未完待续…</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Teach-C\"><a href=\"#Teach-C\" class=\"headerlink\" title=\"Teach-C\"></a><strong>Teach-C</strong></h1><p>@timeline{</p>\n<h5 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h5><p>@item{</p>\n<h6 id=\"3月1日\"><a href=\"#3月1日\" class=\"headerlink\" title=\"3月1日\"></a>3月1日</h6><p>Teach-C计划开始萌芽<br>（作者脑内）</p>\n<p>}</p>\n<p>@item{</p>\n<h6 id=\"4月20日\"><a href=\"#4月20日\" class=\"headerlink\" title=\"4月20日\"></a>4月20日</h6><p>确定网站架构，引擎，主题</p>\n<p>}</p>\n<p>@item{</p>\n<h6 id=\"4月26日\"><a href=\"#4月26日\" class=\"headerlink\" title=\"4月26日\"></a>4月26日</h6><p>网站框架构造完毕<br>开通 Teach-C Github 帐号</p>\n<p>}</p>\n<p>@item{</p>\n<h6 id=\"4月27日\"><a href=\"#4月27日\" class=\"headerlink\" title=\"4月27日\"></a>4月27日</h6><p>Teach-C.github.io 开通</p>\n<p>}</p>\n<p>@item{</p>\n<h6 id=\"4月28号\"><a href=\"#4月28号\" class=\"headerlink\" title=\"4月28号\"></a>4月28号</h6><p>第一篇文章发布</p>\n<p>}</p>\n<p>@item{</p>\n<h6 id=\"5月8号\"><a href=\"#5月8号\" class=\"headerlink\" title=\"5月8号\"></a>5月8号</h6><p>购买Teach-C.xyz<br>以及TeachC.xyz域名</p>\n<p>}</p>\n<p>@item{</p>\n<h6 id=\"5月11日\"><a href=\"#5月11日\" class=\"headerlink\" title=\"5月11日\"></a>5月11日</h6><p>为网站添加Https证书</p>\n<p>}</p>\n<p>@item{</p>\n<h6 id=\"5月13日\"><a href=\"#5月13日\" class=\"headerlink\" title=\"5月13日\"></a>5月13日</h6><p>Teach-C 开始内测</p>\n<p>}</p>\n<p>}</p>\n<h1 id=\"未完待续…\"><a href=\"#未完待续…\" class=\"headerlink\" title=\"未完待续…\"></a>未完待续…</h1>"},{"layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"layout: categories\ncomments: false\n---\n","date":"2017-11-12T11:30:32.862Z","updated":"2017-11-12T11:30:32.862Z","path":"categories/index.html","title":"","_id":"cj9wsjoix00034xlmk8rulk5a","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"License","title":"License","comments":0,"_content":"\n@card{\n\n# 自由版权协议\n\n## 本项目版权协议\n\n本项目版权遵循本页自由版权协议。\n\n## 您可以自由地：\n> - 阅读 - 在任何设备上在线阅读.\n> - 链接 - 在其他网站或著作中使用本项目的链接.\n\n## 须遵守下列条件\n> - 非商业使用 - 您不得将本作品用于商业目的.\n> - 未经允许不得转载 - 在未征得项目负责人同意情况下禁止复制，转载.(包含 https://github.com/Teach-C/Teach-C 中的内容 ）.\n> -没有附加限制 — 您不得适用法律术语或者 技术措施 从而限制其他人做许可协议允许的事情.\n\n}","source":"license/index.md","raw":"layout: License\ntitle: License\ncomments: false\n---\n\n@card{\n\n# 自由版权协议\n\n## 本项目版权协议\n\n本项目版权遵循本页自由版权协议。\n\n## 您可以自由地：\n> - 阅读 - 在任何设备上在线阅读.\n> - 链接 - 在其他网站或著作中使用本项目的链接.\n\n## 须遵守下列条件\n> - 非商业使用 - 您不得将本作品用于商业目的.\n> - 未经允许不得转载 - 在未征得项目负责人同意情况下禁止复制，转载.(包含 https://github.com/Teach-C/Teach-C 中的内容 ）.\n> -没有附加限制 — 您不得适用法律术语或者 技术措施 从而限制其他人做许可协议允许的事情.\n\n}","date":"2017-11-12T11:30:32.862Z","updated":"2017-11-12T11:30:32.862Z","path":"license/index.html","_id":"cj9wsjoj000074xlma8cktqlc","content":"<p>@card{</p>\n<h1 id=\"自由版权协议\"><a href=\"#自由版权协议\" class=\"headerlink\" title=\"自由版权协议\"></a>自由版权协议</h1><h2 id=\"本项目版权协议\"><a href=\"#本项目版权协议\" class=\"headerlink\" title=\"本项目版权协议\"></a>本项目版权协议</h2><p>本项目版权遵循本页自由版权协议。</p>\n<h2 id=\"您可以自由地：\"><a href=\"#您可以自由地：\" class=\"headerlink\" title=\"您可以自由地：\"></a>您可以自由地：</h2><blockquote>\n<ul>\n<li>阅读 - 在任何设备上在线阅读.</li>\n<li>链接 - 在其他网站或著作中使用本项目的链接.</li>\n</ul>\n</blockquote>\n<h2 id=\"须遵守下列条件\"><a href=\"#须遵守下列条件\" class=\"headerlink\" title=\"须遵守下列条件\"></a>须遵守下列条件</h2><blockquote>\n<ul>\n<li>非商业使用 - 您不得将本作品用于商业目的.</li>\n<li>未经允许不得转载 - 在未征得项目负责人同意情况下禁止复制，转载.(包含 <a href=\"https://github.com/Teach-C/Teach-C\" target=\"_blank\" rel=\"external\">https://github.com/Teach-C/Teach-C</a> 中的内容 ）.<br>-没有附加限制 — 您不得适用法律术语或者 技术措施 从而限制其他人做许可协议允许的事情.</li>\n</ul>\n</blockquote>\n<p>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>@card{</p>\n<h1 id=\"自由版权协议\"><a href=\"#自由版权协议\" class=\"headerlink\" title=\"自由版权协议\"></a>自由版权协议</h1><h2 id=\"本项目版权协议\"><a href=\"#本项目版权协议\" class=\"headerlink\" title=\"本项目版权协议\"></a>本项目版权协议</h2><p>本项目版权遵循本页自由版权协议。</p>\n<h2 id=\"您可以自由地：\"><a href=\"#您可以自由地：\" class=\"headerlink\" title=\"您可以自由地：\"></a>您可以自由地：</h2><blockquote>\n<ul>\n<li>阅读 - 在任何设备上在线阅读.</li>\n<li>链接 - 在其他网站或著作中使用本项目的链接.</li>\n</ul>\n</blockquote>\n<h2 id=\"须遵守下列条件\"><a href=\"#须遵守下列条件\" class=\"headerlink\" title=\"须遵守下列条件\"></a>须遵守下列条件</h2><blockquote>\n<ul>\n<li>非商业使用 - 您不得将本作品用于商业目的.</li>\n<li>未经允许不得转载 - 在未征得项目负责人同意情况下禁止复制，转载.(包含 <a href=\"https://github.com/Teach-C/Teach-C\">https://github.com/Teach-C/Teach-C</a> 中的内容 ）.<br>-没有附加限制 — 您不得适用法律术语或者 技术措施 从而限制其他人做许可协议允许的事情.</li>\n</ul>\n</blockquote>\n<p>}</p>\n"},{"layout":"tags","comments":0,"_content":"\n","source":"tags/index.md","raw":"layout: tags\ncomments: false\n---\n\n","date":"2017-11-12T11:30:32.862Z","updated":"2017-11-12T11:30:32.862Z","path":"tags/index.html","title":"","_id":"cj9wsjoj100094xlmao5bibox","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"page","title":"留言板","description":"Let's Talk !","comments":1,"reward":false,"_content":"\n@card{\n\n# Let's Talk !\n\n}\n","source":"talks/index.md","raw":"layout: page \ntitle:  留言板\ndescription: Let's Talk !\ncomments: true\nreward: false\n----\n\n@card{\n\n# Let's Talk !\n\n}\n","date":"2017-11-12T11:30:32.862Z","updated":"2017-11-12T11:30:32.862Z","path":"talks/index.html","_id":"cj9wsjoj3000b4xlmqdcde9y3","content":"<p>@card{</p>\n<h1 id=\"Let’s-Talk\"><a href=\"#Let’s-Talk\" class=\"headerlink\" title=\"Let’s Talk !\"></a>Let’s Talk !</h1><p>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>@card{</p>\n<h1 id=\"Let’s-Talk\"><a href=\"#Let’s-Talk\" class=\"headerlink\" title=\"Let’s Talk !\"></a>Let’s Talk !</h1><p>}</p>\n"}],"Post":[{"title":"0.序言","date":"2017-04-24T05:04:40.000Z","_content":"\n\n# 序言\n\n&emsp; 很久之前就有写一本书这样的想法，但是一直没有充足的时间，而且自己也没有什么拿得出手的干货。怕写出来被人笑话，所以这个想法就被搁置了。\n&emsp; 直到这个学期（2017年3月），学校开设了C语言课程，采用的是谭老师的教材（为了防止被喷我就不写全名了），这个教材最大的好处就是看不懂，可能我和我的同学们都太愚钝了吧（笑）。\n&emsp; 因为我相对懂一些C语言，经常有同学请教我C语言的问题，在这个过程中我发现这些知识，我讲解后能让他们很好的理解，这让我很高兴。但请教我的同学太多了，而且同学们对C的掌握程度参差不齐，我也没办法从头讲起，所以我想还是写一些东西吧，帮助大家的同时对自己也是一种锻炼吧！\n\n<!---more--->\n## 这个项目是干嘛的？\n\n&emsp; 这是一个实验项目，意在给大家科普计算机技术和C语言，专业的图书可能很多人不想去看，因为它们看着太困了。\n&emsp; 所以我想让这个项目既有我幽默风趣的特点，又可以不失内涵，又不违背科学技术的严谨性。\n\n## 这个项目讲什么？\n\n&emsp; 开始这个项目之前，我花了很多时间思考这个问题，我要讲什么呢？纯粹的C语言？那我为什么不直接告诉大家去看C primer plus?这真的是一本很好的讲解C语言的书，我就是通过这本书学习C语言的。\n&emsp; 不过那本书太专业了，好的技术类图书好在对概念的解读的精细程度以及读者对内容的理解程度，但过于专业导致非计算机从业人员没有耐心读下去，很多人学习C语言是因为考试要考，这样的应试的原因。或者很多人根本不知道C语言是做什么的，为什么学C语言。\n&emsp; 我不想单纯的去讲C语言，因为这是我的项目，我想怎么做就怎么做，我会先去讲一些基本的计算机概念，然后我可能会给大家讲一讲Linux系统，vim nano文本编辑器，编译原理，gcc编译器这些学校甚至很多书上都不会讲的内容，我进行这个项目，不仅仅是为了能让我的同学们去更好的学习C语言，而是让更多人能了解，学习计算机技术，我更希望文科生，也可以接触计算机，C/C++语言，Arduino 这些不需要太多专业性知识的工具去拓展自己的创造力\t。\n\n## 这个项目适用于哪些人？\n\n&emsp; 就像前面说到的我希望更多人甚至是文科生也能接触计算机技术，所以，我的项目适用于任何对计算机或者网络技术感兴趣的朋友，我个人觉得C/C++是很人性化的工具，只要有一点点英语的基础和耐心，是可以学有所成并且开发一些有意思的或者有助于生活的小程序的。\n&emsp;有些人说学习编程需要很好的英语水平，数学能力。我觉得这个说法过于片面，我不完全否认，也不完全认同。\n&emsp; 拿编程和英语来说，虽然我对几乎所有人说，英语这是太重要了！但是我要说，学习编程不要求太高的英语水平，大多数的资料都会有很准确的中文翻译。我学习英语是在我开始学习编程之后，因为一些原因，我大约小学五年级才开始学习英语，但在那之前我已经学习了LOGO VB DELPHI 以及批处理，并没有因为英语的问题受到阻挠。\n&emsp; 而且，就我对计算机英语的认识，计算机英语本来就不是很难，基本的英语知识然后就是一些固定的动词比如（copy move delete command ....）然后就是各种各样的名词，随便找个翻译的工具就可以知道意思，我初中毕业之后，就开始上各种各样的国外技术网站，看一些英文的文档，并没有觉得太吃力。\n&emsp; 再说说数学，数学一直是我的弱项，我高中的时候曾经一学期数学考25分。但这并不影响我编写程序，随着学习的深入，你会发现，很多完成复杂工作算法，已经被计算机科学家编写，我们只需要引用他们。\n&emsp; 但话说回来，学好英语和数学，电路和线性代数对于程序的开发还是有很大好处的，学好英语意味着你可以更早的接触国外的新技术，数学更好的让你的代码有逻辑性，至于后两个，我以后会和大家探讨。\n\n## 多久更一次？\n\n&emsp; 这个问题问的好，我的项目，我说了算，那就看心情更吧～\n&emsp; 开个玩笑，为了尽量减少错误，我每次更新都会自己阅读修改几遍，再给一些朋友看看预览，看看有没有写的不明白的地方，同时我大一下学期的课程比较多，所以没有固定的更新周期，我尽量做到每周一章吧。\n\n## 如何参与？\n\n&emsp; 啊哈？听说你也想加入这个项目中来？先不要着急，万一以后写的不好了呢。\n&emsp; 不过，可以简单的说一下，如果有朋友或者技术大牛对我这个小项目感兴趣，可以通过下面这几种方法参与。\n\n - 读\n  > &emsp; 这应该是参与最多的方式了，仔细认真的阅读我的文章，在下面的评论区(on progress)参与讨论，把问题或错误反馈我.\n \n -  打赏\n\n > 要是觉得我写的还不错或者对你有帮助，欢迎大家给我打赏哦，本项目支持 支付宝 比特币 支付方式.\n\n - 加入项目\n\n > 这个项目托管在[github](https://github.com/Teach-C/Teach-C)上，所以，你懂得.\n \n ## 我需要准备什么？\n \n &emsp; 学习计算机技术实际上不需要太好的装备，我写这个项目就用了chromebook，当然最好是有个电脑了，能运行win7就可以了。虽然我不推荐在win下开发。。\n &emsp; 工具是次要的，记得带上你的脑子，让你的智商上线！！！！！\n\n## 说在最后的话\n\n&emsp; 首先这个项目是在hexo和github (pages)的支持上建立的，编写的设备是chromebook。\n\n&emsp; 主题用了[yscoder的hexo-theme-indigo](https://github.com/yscoder/hexo-theme-indigo)\n\n&emsp; 另外很多人可能想问一个问题，那就是我有学C语言的必要么？\n\n&emsp; 这个问题，对于大多数人是没有必要的，就像英语一样，可能很多人毕业了再也用不到了，如果你对计算机感兴趣，想更好的了解计算机更好的让计算机遵循你的意愿工作，C语言是个不错的选择，如果想入门计算机编程，我个人觉得python和html是不错的选择，不涉及太多计算机原理，又可以对编程有一定的了解。\n\n&emsp; 当然如果你单纯因为我的文字写的有意思接着往下看，我也是很欢迎的！\n","source":"_posts/0-Hello-World.md","raw":"---\n \ntitle: 0.序言\ndate: 2017-04-24 13:04:40\ncategories: \n- 0 Chapter\ntags: \n- Hello \n- Hello-World\n\n---\n\n\n# 序言\n\n&emsp; 很久之前就有写一本书这样的想法，但是一直没有充足的时间，而且自己也没有什么拿得出手的干货。怕写出来被人笑话，所以这个想法就被搁置了。\n&emsp; 直到这个学期（2017年3月），学校开设了C语言课程，采用的是谭老师的教材（为了防止被喷我就不写全名了），这个教材最大的好处就是看不懂，可能我和我的同学们都太愚钝了吧（笑）。\n&emsp; 因为我相对懂一些C语言，经常有同学请教我C语言的问题，在这个过程中我发现这些知识，我讲解后能让他们很好的理解，这让我很高兴。但请教我的同学太多了，而且同学们对C的掌握程度参差不齐，我也没办法从头讲起，所以我想还是写一些东西吧，帮助大家的同时对自己也是一种锻炼吧！\n\n<!---more--->\n## 这个项目是干嘛的？\n\n&emsp; 这是一个实验项目，意在给大家科普计算机技术和C语言，专业的图书可能很多人不想去看，因为它们看着太困了。\n&emsp; 所以我想让这个项目既有我幽默风趣的特点，又可以不失内涵，又不违背科学技术的严谨性。\n\n## 这个项目讲什么？\n\n&emsp; 开始这个项目之前，我花了很多时间思考这个问题，我要讲什么呢？纯粹的C语言？那我为什么不直接告诉大家去看C primer plus?这真的是一本很好的讲解C语言的书，我就是通过这本书学习C语言的。\n&emsp; 不过那本书太专业了，好的技术类图书好在对概念的解读的精细程度以及读者对内容的理解程度，但过于专业导致非计算机从业人员没有耐心读下去，很多人学习C语言是因为考试要考，这样的应试的原因。或者很多人根本不知道C语言是做什么的，为什么学C语言。\n&emsp; 我不想单纯的去讲C语言，因为这是我的项目，我想怎么做就怎么做，我会先去讲一些基本的计算机概念，然后我可能会给大家讲一讲Linux系统，vim nano文本编辑器，编译原理，gcc编译器这些学校甚至很多书上都不会讲的内容，我进行这个项目，不仅仅是为了能让我的同学们去更好的学习C语言，而是让更多人能了解，学习计算机技术，我更希望文科生，也可以接触计算机，C/C++语言，Arduino 这些不需要太多专业性知识的工具去拓展自己的创造力\t。\n\n## 这个项目适用于哪些人？\n\n&emsp; 就像前面说到的我希望更多人甚至是文科生也能接触计算机技术，所以，我的项目适用于任何对计算机或者网络技术感兴趣的朋友，我个人觉得C/C++是很人性化的工具，只要有一点点英语的基础和耐心，是可以学有所成并且开发一些有意思的或者有助于生活的小程序的。\n&emsp;有些人说学习编程需要很好的英语水平，数学能力。我觉得这个说法过于片面，我不完全否认，也不完全认同。\n&emsp; 拿编程和英语来说，虽然我对几乎所有人说，英语这是太重要了！但是我要说，学习编程不要求太高的英语水平，大多数的资料都会有很准确的中文翻译。我学习英语是在我开始学习编程之后，因为一些原因，我大约小学五年级才开始学习英语，但在那之前我已经学习了LOGO VB DELPHI 以及批处理，并没有因为英语的问题受到阻挠。\n&emsp; 而且，就我对计算机英语的认识，计算机英语本来就不是很难，基本的英语知识然后就是一些固定的动词比如（copy move delete command ....）然后就是各种各样的名词，随便找个翻译的工具就可以知道意思，我初中毕业之后，就开始上各种各样的国外技术网站，看一些英文的文档，并没有觉得太吃力。\n&emsp; 再说说数学，数学一直是我的弱项，我高中的时候曾经一学期数学考25分。但这并不影响我编写程序，随着学习的深入，你会发现，很多完成复杂工作算法，已经被计算机科学家编写，我们只需要引用他们。\n&emsp; 但话说回来，学好英语和数学，电路和线性代数对于程序的开发还是有很大好处的，学好英语意味着你可以更早的接触国外的新技术，数学更好的让你的代码有逻辑性，至于后两个，我以后会和大家探讨。\n\n## 多久更一次？\n\n&emsp; 这个问题问的好，我的项目，我说了算，那就看心情更吧～\n&emsp; 开个玩笑，为了尽量减少错误，我每次更新都会自己阅读修改几遍，再给一些朋友看看预览，看看有没有写的不明白的地方，同时我大一下学期的课程比较多，所以没有固定的更新周期，我尽量做到每周一章吧。\n\n## 如何参与？\n\n&emsp; 啊哈？听说你也想加入这个项目中来？先不要着急，万一以后写的不好了呢。\n&emsp; 不过，可以简单的说一下，如果有朋友或者技术大牛对我这个小项目感兴趣，可以通过下面这几种方法参与。\n\n - 读\n  > &emsp; 这应该是参与最多的方式了，仔细认真的阅读我的文章，在下面的评论区(on progress)参与讨论，把问题或错误反馈我.\n \n -  打赏\n\n > 要是觉得我写的还不错或者对你有帮助，欢迎大家给我打赏哦，本项目支持 支付宝 比特币 支付方式.\n\n - 加入项目\n\n > 这个项目托管在[github](https://github.com/Teach-C/Teach-C)上，所以，你懂得.\n \n ## 我需要准备什么？\n \n &emsp; 学习计算机技术实际上不需要太好的装备，我写这个项目就用了chromebook，当然最好是有个电脑了，能运行win7就可以了。虽然我不推荐在win下开发。。\n &emsp; 工具是次要的，记得带上你的脑子，让你的智商上线！！！！！\n\n## 说在最后的话\n\n&emsp; 首先这个项目是在hexo和github (pages)的支持上建立的，编写的设备是chromebook。\n\n&emsp; 主题用了[yscoder的hexo-theme-indigo](https://github.com/yscoder/hexo-theme-indigo)\n\n&emsp; 另外很多人可能想问一个问题，那就是我有学C语言的必要么？\n\n&emsp; 这个问题，对于大多数人是没有必要的，就像英语一样，可能很多人毕业了再也用不到了，如果你对计算机感兴趣，想更好的了解计算机更好的让计算机遵循你的意愿工作，C语言是个不错的选择，如果想入门计算机编程，我个人觉得python和html是不错的选择，不涉及太多计算机原理，又可以对编程有一定的了解。\n\n&emsp; 当然如果你单纯因为我的文字写的有意思接着往下看，我也是很欢迎的！\n","slug":"0-Hello-World","published":1,"updated":"2017-11-13T12:34:55.686Z","_id":"cj9wsjoiu00024xlmxrv127uh","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h1><p>&emsp; 很久之前就有写一本书这样的想法，但是一直没有充足的时间，而且自己也没有什么拿得出手的干货。怕写出来被人笑话，所以这个想法就被搁置了。<br>&emsp; 直到这个学期（2017年3月），学校开设了C语言课程，采用的是谭老师的教材（为了防止被喷我就不写全名了），这个教材最大的好处就是看不懂，可能我和我的同学们都太愚钝了吧（笑）。<br>&emsp; 因为我相对懂一些C语言，经常有同学请教我C语言的问题，在这个过程中我发现这些知识，我讲解后能让他们很好的理解，这让我很高兴。但请教我的同学太多了，而且同学们对C的掌握程度参差不齐，我也没办法从头讲起，所以我想还是写一些东西吧，帮助大家的同时对自己也是一种锻炼吧！</p>\n<a id=\"more\"></a>\n<h2 id=\"这个项目是干嘛的？\"><a href=\"#这个项目是干嘛的？\" class=\"headerlink\" title=\"这个项目是干嘛的？\"></a>这个项目是干嘛的？</h2><p>&emsp; 这是一个实验项目，意在给大家科普计算机技术和C语言，专业的图书可能很多人不想去看，因为它们看着太困了。<br>&emsp; 所以我想让这个项目既有我幽默风趣的特点，又可以不失内涵，又不违背科学技术的严谨性。</p>\n<h2 id=\"这个项目讲什么？\"><a href=\"#这个项目讲什么？\" class=\"headerlink\" title=\"这个项目讲什么？\"></a>这个项目讲什么？</h2><p>&emsp; 开始这个项目之前，我花了很多时间思考这个问题，我要讲什么呢？纯粹的C语言？那我为什么不直接告诉大家去看C primer plus?这真的是一本很好的讲解C语言的书，我就是通过这本书学习C语言的。<br>&emsp; 不过那本书太专业了，好的技术类图书好在对概念的解读的精细程度以及读者对内容的理解程度，但过于专业导致非计算机从业人员没有耐心读下去，很多人学习C语言是因为考试要考，这样的应试的原因。或者很多人根本不知道C语言是做什么的，为什么学C语言。<br>&emsp; 我不想单纯的去讲C语言，因为这是我的项目，我想怎么做就怎么做，我会先去讲一些基本的计算机概念，然后我可能会给大家讲一讲Linux系统，vim nano文本编辑器，编译原理，gcc编译器这些学校甚至很多书上都不会讲的内容，我进行这个项目，不仅仅是为了能让我的同学们去更好的学习C语言，而是让更多人能了解，学习计算机技术，我更希望文科生，也可以接触计算机，C/C++语言，Arduino 这些不需要太多专业性知识的工具去拓展自己的创造力    。</p>\n<h2 id=\"这个项目适用于哪些人？\"><a href=\"#这个项目适用于哪些人？\" class=\"headerlink\" title=\"这个项目适用于哪些人？\"></a>这个项目适用于哪些人？</h2><p>&emsp; 就像前面说到的我希望更多人甚至是文科生也能接触计算机技术，所以，我的项目适用于任何对计算机或者网络技术感兴趣的朋友，我个人觉得C/C++是很人性化的工具，只要有一点点英语的基础和耐心，是可以学有所成并且开发一些有意思的或者有助于生活的小程序的。<br>&emsp;有些人说学习编程需要很好的英语水平，数学能力。我觉得这个说法过于片面，我不完全否认，也不完全认同。<br>&emsp; 拿编程和英语来说，虽然我对几乎所有人说，英语这是太重要了！但是我要说，学习编程不要求太高的英语水平，大多数的资料都会有很准确的中文翻译。我学习英语是在我开始学习编程之后，因为一些原因，我大约小学五年级才开始学习英语，但在那之前我已经学习了LOGO VB DELPHI 以及批处理，并没有因为英语的问题受到阻挠。<br>&emsp; 而且，就我对计算机英语的认识，计算机英语本来就不是很难，基本的英语知识然后就是一些固定的动词比如（copy move delete command ….）然后就是各种各样的名词，随便找个翻译的工具就可以知道意思，我初中毕业之后，就开始上各种各样的国外技术网站，看一些英文的文档，并没有觉得太吃力。<br>&emsp; 再说说数学，数学一直是我的弱项，我高中的时候曾经一学期数学考25分。但这并不影响我编写程序，随着学习的深入，你会发现，很多完成复杂工作算法，已经被计算机科学家编写，我们只需要引用他们。<br>&emsp; 但话说回来，学好英语和数学，电路和线性代数对于程序的开发还是有很大好处的，学好英语意味着你可以更早的接触国外的新技术，数学更好的让你的代码有逻辑性，至于后两个，我以后会和大家探讨。</p>\n<h2 id=\"多久更一次？\"><a href=\"#多久更一次？\" class=\"headerlink\" title=\"多久更一次？\"></a>多久更一次？</h2><p>&emsp; 这个问题问的好，我的项目，我说了算，那就看心情更吧～<br>&emsp; 开个玩笑，为了尽量减少错误，我每次更新都会自己阅读修改几遍，再给一些朋友看看预览，看看有没有写的不明白的地方，同时我大一下学期的课程比较多，所以没有固定的更新周期，我尽量做到每周一章吧。</p>\n<h2 id=\"如何参与？\"><a href=\"#如何参与？\" class=\"headerlink\" title=\"如何参与？\"></a>如何参与？</h2><p>&emsp; 啊哈？听说你也想加入这个项目中来？先不要着急，万一以后写的不好了呢。<br>&emsp; 不过，可以简单的说一下，如果有朋友或者技术大牛对我这个小项目感兴趣，可以通过下面这几种方法参与。</p>\n<ul>\n<li><p>读</p>\n<blockquote>\n<p>&emsp; 这应该是参与最多的方式了，仔细认真的阅读我的文章，在下面的评论区(on progress)参与讨论，把问题或错误反馈我.</p>\n</blockquote>\n</li>\n<li><p>打赏</p>\n<blockquote>\n<p>要是觉得我写的还不错或者对你有帮助，欢迎大家给我打赏哦，本项目支持 支付宝 比特币 支付方式.</p>\n</blockquote>\n</li>\n<li><p>加入项目</p>\n<blockquote>\n<p>这个项目托管在<a href=\"https://github.com/Teach-C/Teach-C\" target=\"_blank\" rel=\"external\">github</a>上，所以，你懂得.</p>\n</blockquote>\n<h2 id=\"我需要准备什么？\"><a href=\"#我需要准备什么？\" class=\"headerlink\" title=\"我需要准备什么？\"></a>我需要准备什么？</h2><p>&emsp; 学习计算机技术实际上不需要太好的装备，我写这个项目就用了chromebook，当然最好是有个电脑了，能运行win7就可以了。虽然我不推荐在win下开发。。<br>&emsp; 工具是次要的，记得带上你的脑子，让你的智商上线！！！！！</p>\n</li>\n</ul>\n<h2 id=\"说在最后的话\"><a href=\"#说在最后的话\" class=\"headerlink\" title=\"说在最后的话\"></a>说在最后的话</h2><p>&emsp; 首先这个项目是在hexo和github (pages)的支持上建立的，编写的设备是chromebook。</p>\n<p>&emsp; 主题用了<a href=\"https://github.com/yscoder/hexo-theme-indigo\" target=\"_blank\" rel=\"external\">yscoder的hexo-theme-indigo</a></p>\n<p>&emsp; 另外很多人可能想问一个问题，那就是我有学C语言的必要么？</p>\n<p>&emsp; 这个问题，对于大多数人是没有必要的，就像英语一样，可能很多人毕业了再也用不到了，如果你对计算机感兴趣，想更好的了解计算机更好的让计算机遵循你的意愿工作，C语言是个不错的选择，如果想入门计算机编程，我个人觉得python和html是不错的选择，不涉及太多计算机原理，又可以对编程有一定的了解。</p>\n<p>&emsp; 当然如果你单纯因为我的文字写的有意思接着往下看，我也是很欢迎的！</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h1><p>&emsp; 很久之前就有写一本书这样的想法，但是一直没有充足的时间，而且自己也没有什么拿得出手的干货。怕写出来被人笑话，所以这个想法就被搁置了。<br>&emsp; 直到这个学期（2017年3月），学校开设了C语言课程，采用的是谭老师的教材（为了防止被喷我就不写全名了），这个教材最大的好处就是看不懂，可能我和我的同学们都太愚钝了吧（笑）。<br>&emsp; 因为我相对懂一些C语言，经常有同学请教我C语言的问题，在这个过程中我发现这些知识，我讲解后能让他们很好的理解，这让我很高兴。但请教我的同学太多了，而且同学们对C的掌握程度参差不齐，我也没办法从头讲起，所以我想还是写一些东西吧，帮助大家的同时对自己也是一种锻炼吧！</p>","more":"<h2 id=\"这个项目是干嘛的？\"><a href=\"#这个项目是干嘛的？\" class=\"headerlink\" title=\"这个项目是干嘛的？\"></a>这个项目是干嘛的？</h2><p>&emsp; 这是一个实验项目，意在给大家科普计算机技术和C语言，专业的图书可能很多人不想去看，因为它们看着太困了。<br>&emsp; 所以我想让这个项目既有我幽默风趣的特点，又可以不失内涵，又不违背科学技术的严谨性。</p>\n<h2 id=\"这个项目讲什么？\"><a href=\"#这个项目讲什么？\" class=\"headerlink\" title=\"这个项目讲什么？\"></a>这个项目讲什么？</h2><p>&emsp; 开始这个项目之前，我花了很多时间思考这个问题，我要讲什么呢？纯粹的C语言？那我为什么不直接告诉大家去看C primer plus?这真的是一本很好的讲解C语言的书，我就是通过这本书学习C语言的。<br>&emsp; 不过那本书太专业了，好的技术类图书好在对概念的解读的精细程度以及读者对内容的理解程度，但过于专业导致非计算机从业人员没有耐心读下去，很多人学习C语言是因为考试要考，这样的应试的原因。或者很多人根本不知道C语言是做什么的，为什么学C语言。<br>&emsp; 我不想单纯的去讲C语言，因为这是我的项目，我想怎么做就怎么做，我会先去讲一些基本的计算机概念，然后我可能会给大家讲一讲Linux系统，vim nano文本编辑器，编译原理，gcc编译器这些学校甚至很多书上都不会讲的内容，我进行这个项目，不仅仅是为了能让我的同学们去更好的学习C语言，而是让更多人能了解，学习计算机技术，我更希望文科生，也可以接触计算机，C/C++语言，Arduino 这些不需要太多专业性知识的工具去拓展自己的创造力    。</p>\n<h2 id=\"这个项目适用于哪些人？\"><a href=\"#这个项目适用于哪些人？\" class=\"headerlink\" title=\"这个项目适用于哪些人？\"></a>这个项目适用于哪些人？</h2><p>&emsp; 就像前面说到的我希望更多人甚至是文科生也能接触计算机技术，所以，我的项目适用于任何对计算机或者网络技术感兴趣的朋友，我个人觉得C/C++是很人性化的工具，只要有一点点英语的基础和耐心，是可以学有所成并且开发一些有意思的或者有助于生活的小程序的。<br>&emsp;有些人说学习编程需要很好的英语水平，数学能力。我觉得这个说法过于片面，我不完全否认，也不完全认同。<br>&emsp; 拿编程和英语来说，虽然我对几乎所有人说，英语这是太重要了！但是我要说，学习编程不要求太高的英语水平，大多数的资料都会有很准确的中文翻译。我学习英语是在我开始学习编程之后，因为一些原因，我大约小学五年级才开始学习英语，但在那之前我已经学习了LOGO VB DELPHI 以及批处理，并没有因为英语的问题受到阻挠。<br>&emsp; 而且，就我对计算机英语的认识，计算机英语本来就不是很难，基本的英语知识然后就是一些固定的动词比如（copy move delete command ….）然后就是各种各样的名词，随便找个翻译的工具就可以知道意思，我初中毕业之后，就开始上各种各样的国外技术网站，看一些英文的文档，并没有觉得太吃力。<br>&emsp; 再说说数学，数学一直是我的弱项，我高中的时候曾经一学期数学考25分。但这并不影响我编写程序，随着学习的深入，你会发现，很多完成复杂工作算法，已经被计算机科学家编写，我们只需要引用他们。<br>&emsp; 但话说回来，学好英语和数学，电路和线性代数对于程序的开发还是有很大好处的，学好英语意味着你可以更早的接触国外的新技术，数学更好的让你的代码有逻辑性，至于后两个，我以后会和大家探讨。</p>\n<h2 id=\"多久更一次？\"><a href=\"#多久更一次？\" class=\"headerlink\" title=\"多久更一次？\"></a>多久更一次？</h2><p>&emsp; 这个问题问的好，我的项目，我说了算，那就看心情更吧～<br>&emsp; 开个玩笑，为了尽量减少错误，我每次更新都会自己阅读修改几遍，再给一些朋友看看预览，看看有没有写的不明白的地方，同时我大一下学期的课程比较多，所以没有固定的更新周期，我尽量做到每周一章吧。</p>\n<h2 id=\"如何参与？\"><a href=\"#如何参与？\" class=\"headerlink\" title=\"如何参与？\"></a>如何参与？</h2><p>&emsp; 啊哈？听说你也想加入这个项目中来？先不要着急，万一以后写的不好了呢。<br>&emsp; 不过，可以简单的说一下，如果有朋友或者技术大牛对我这个小项目感兴趣，可以通过下面这几种方法参与。</p>\n<ul>\n<li><p>读</p>\n<blockquote>\n<p>&emsp; 这应该是参与最多的方式了，仔细认真的阅读我的文章，在下面的评论区(on progress)参与讨论，把问题或错误反馈我.</p>\n</blockquote>\n</li>\n<li><p>打赏</p>\n<blockquote>\n<p>要是觉得我写的还不错或者对你有帮助，欢迎大家给我打赏哦，本项目支持 支付宝 比特币 支付方式.</p>\n</blockquote>\n</li>\n<li><p>加入项目</p>\n<blockquote>\n<p>这个项目托管在<a href=\"https://github.com/Teach-C/Teach-C\">github</a>上，所以，你懂得.</p>\n</blockquote>\n<h2 id=\"我需要准备什么？\"><a href=\"#我需要准备什么？\" class=\"headerlink\" title=\"我需要准备什么？\"></a>我需要准备什么？</h2><p>&emsp; 学习计算机技术实际上不需要太好的装备，我写这个项目就用了chromebook，当然最好是有个电脑了，能运行win7就可以了。虽然我不推荐在win下开发。。<br>&emsp; 工具是次要的，记得带上你的脑子，让你的智商上线！！！！！</p>\n</li>\n</ul>\n<h2 id=\"说在最后的话\"><a href=\"#说在最后的话\" class=\"headerlink\" title=\"说在最后的话\"></a>说在最后的话</h2><p>&emsp; 首先这个项目是在hexo和github (pages)的支持上建立的，编写的设备是chromebook。</p>\n<p>&emsp; 主题用了<a href=\"https://github.com/yscoder/hexo-theme-indigo\">yscoder的hexo-theme-indigo</a></p>\n<p>&emsp; 另外很多人可能想问一个问题，那就是我有学C语言的必要么？</p>\n<p>&emsp; 这个问题，对于大多数人是没有必要的，就像英语一样，可能很多人毕业了再也用不到了，如果你对计算机感兴趣，想更好的了解计算机更好的让计算机遵循你的意愿工作，C语言是个不错的选择，如果想入门计算机编程，我个人觉得python和html是不错的选择，不涉及太多计算机原理，又可以对编程有一定的了解。</p>\n<p>&emsp; 当然如果你单纯因为我的文字写的有意思接着往下看，我也是很欢迎的！</p>"},{"title":"0.本章前言","date":"2017-04-26T07:13:04.000Z","_content":"\n&emsp;  从这一篇开始，我们就要进行C语言的学习了，在开始之前，我想拿出一章（或者加上附录）来讲一讲编程之外的内容，让大家在开始学习之前对计算机和程序有一些认识。\n\n&emsp;  什么？这么快就进入学习状态让你很不适应？哦，不要担心，这一章我要慢悠悠的和大家谈一些基本的概念，并不涉及太多编程的内容，所以深呼吸～放轻松～\n\n&emsp; 喂，别睡着了诶！！！\n<!---more--->\n\n# 说在前面的话\n\n&emsp;  在这里说明一下，我发起这个项目并不是单纯给大学生（也就是我的同学们）提供一个学习C语言的平台，而是希望更多人能够接触计算机技术和计算机编程，我希望我写的东西可以让有一些计算机基础的人都能学会C语言。\n\n&emsp;  **为什么说是有一些计算机基础，而不是说从0开始呢？**\n\n&emsp; 因为我想说的严谨一点，我没办法从0开始教会一个人用电脑，再带他认识电脑，再教会C语言，况且关注这个项目的人都是会使用电脑的，可能你是用电脑写文档，做表格，做PPT，或者拿它来炒股，打游戏。总之，你已经学会基本的电脑操作，我不需要教你单击双击，左键右键，大小写切换这些东西。。。\n\n&emsp; 当然这个项目的目标不只是教会大家C语言，这太俗气了，毫不夸张的说，硬要一个根本没有接触过计算机或者说任何电子设备的人学C语言，他也可以在纸上写出正确的代码，所以说教会基本的C语言并不是这个项目的目标，我希望通过这个项目，以C为出发点，让大家能对计算机技术的探索感兴趣。\n\n&emsp; 同时C是一个很好的入门语言（虽然我本人更倾向于`Python`或者`HTML`做入门语言），学会基本的C之后，可以在硬件上开发类似`arduino`的设备来进行一些发明创造(实际上arduino主要开发语言是`C++`，`C和C++的区别`本章会讨论)，软件上可以去学习C++以及其他的编程语言，或者去进行算法的研究，也或者去开发高性能的数据库，服务端，或者系统底层。（我就是说说，我只会调试或者配置上面说的这几个看起来高达上的东西。。）\n\n&emsp;  当然学C的意义不仅在于此，虽然不同的语言之间有很大区别，但是基本的思想还是一样的，（比如说都会有`变量`，`函数`这些概念，你现在可能并不知道编程语言中的变量和函数是什么意思，忘了它吧，继续往下看！）所以学会C也可以轻松学习别的编程语言。\n\n## 关于本章\n\n&emsp; 关于这个章节，我主要想讲一讲计算机的基础知识，操作系统，C的编程思想，编辑器，基本的编译原理和编译器，还有IDE这些内容。\n\n&emsp; 当然，还有很多同学好奇的C和C++的区别。\n\n## 你可能想问的\n\n### 机械键盘 **or Not** ？\n\n&emsp; 之前说过不需要准备什么工具：智商上线的脑子和一台能正常运行的电脑就可以了，这里可能会有些朋友问我，要不要买一个机械键盘来敲代码，说是很多电影或者现实生活中的大牛都会有机械键盘巴拉巴拉......\n\n&emsp; 这个问题：**因人而异**。\n\n&emsp;  我家里的第一台电脑用的是机械键盘，我用了差不多有十年，它伴随我度过了幼儿园，小学，直到初中它才寿终正寝，后来家里也没买过太贵的键盘，都是普通的巧克力键盘，再到后来的笔记本的浮萍键盘，我觉得都差不多，用着用着，掌握了键间距，就习惯了，我现在最习惯用的是chromebook的浮萍键盘，类似macbook的那种，不过我热爱打游戏的室友觉得机械键盘用着很爽。\n\n&emsp; 所以说，这个事情并没有确切的答案，找一个你用起来最顺手的键盘就好了。\n\n&emsp; 不过话说回来，目前我们的编码水平（包括将来项目结束），不至于因为键盘制约编码效率，当然选用的键盘也不能太差，我们学校机房有一个屋子里面的键盘，那手感就像上面沾了X一样。\n所以适中就好，比如（下面的品牌包含但不限于） 某技 或者 某飞燕的百元左右的键盘或者键鼠套装都是不错的选择。\n\n### 我需要什么配置的电脑？\n\n&emsp; 我无数次听到我的朋友跟我说，“**我电脑1T内存**”，或者懂一点的说“**我手机128G内存，比电脑都大**” 更有甚者说”**我电脑500G硬存**“！！！\n\n&emsp; 每当我听到这样的话的时候我都会怀疑自己是不是没有跟上时代的潮流。虽然内存以后能够达到1T，（目前部分工作站和服务器的内存已经可以达到128G，所以我是不会像以前人写书的时候说”我们当时的硬盘容量达到10M，这已经很大了“这样的话的。）但是他们所说的内存并不是真正的“内存”，也就因为这样，我要在这一章里面介绍基础的计算机知识，等我介绍完这些，大家对计算机有一些基本的概念，就知道这个答案了。\n\n&emsp; 所以不要急着去电脑城配台机子，况且电脑城鱼龙混杂。。。你懂得。。。\n\n### 为什么图这么少 ？\n\n&emsp; 这是经过本人深思熟虑的，首先因为我懒的给这个项目备案，所以无论是主站还是映像站都是在天朝境外的服务器，所以过多的图片会增加加载速度，况且本身加载图片就会花费很多时间，所以没有插图必要的章节，就不插图。\n\n&emsp; 而且我还考虑了一个因素，因为这个项目本身不是一个纯粹的教学项目，你可以像看小说，看故事或者看段子一样的享受这个项目，而这些作品里面几乎都是没有图的，你们不也是看得津津有味嘛！！！（说白了就是懒。）\n\n&emsp; 不过，在必要的地方，在表格或者代码块无法清楚表达我的意思的时候，我还是会加入图片的！！！\n\n### 这个项目运营成本多大 ？\n\n&emsp; 目前这个项目托管在[Github](https://github.com/)上，不过Github在米国，天朝访问比较慢，也不稳定，所以增加了岛国映像站，这两个站点是几乎同步更新的，所以费用主要出在服务器上，同时，如果可以，我希望能换一个好的域名。\n\n&emsp; 还有需要说明的一点，**我不会在项目中投放任何广告**，如果有弹窗或者浮窗广告那是网络流量被你的ISP劫持了，所以我在考虑要不要使用HTTPS，这样就需要证书的费用了。目前这个还在考虑中。。。\n\n&emsp; 这些能用金钱来衡量的开销并不是很多，主要还是我需要挤出时间来完成这个项目，这个学期几乎天天满课，我一般都在晚课结束到睡觉前去做这个项目，如果你觉得我的付出值得你奖励一下，就请在下面打赏哦～\n\n##  最后说两句\n\n&emsp; 从下节开始我就要给大家介绍计算机方面的知识了，不知道到现在大家看得怎么样，有没有感觉亚历山大？\n\n&emsp; 拜托！大家都是成年人了，不这么扭扭捏捏的好不好？这电脑多好玩啊！（当然没有和对象出去好玩。。。）电脑并不是什么碰不得的稀罕玩意，计算机被发明出来就是为了方便人们的生活的（虽然最开始是为了解决复杂繁琐的数学问题的），所以说计算机已经发展的很人性化了，在这个科技高速发展的时代，不接触计算机技术，那还有啥意思？\n\n&emsp; 所以说，不要一想到电脑和编程就头疼，随着这个项目的进行，你会发现其实计算机并不是那么复杂，只不过是你以前打开的方式不对罢了～\n\n&emsp; 马上要开始探险了！让你的智商上线把！ \n","source":"_posts/1-0-things-before-start.md","raw":"---\ntitle: 0.本章前言\ndate: 2017-04-26 15:13:04\ncategories:\n-  1 Chapter\ntags:\n- 前言\n- 常见问题\n---\n\n&emsp;  从这一篇开始，我们就要进行C语言的学习了，在开始之前，我想拿出一章（或者加上附录）来讲一讲编程之外的内容，让大家在开始学习之前对计算机和程序有一些认识。\n\n&emsp;  什么？这么快就进入学习状态让你很不适应？哦，不要担心，这一章我要慢悠悠的和大家谈一些基本的概念，并不涉及太多编程的内容，所以深呼吸～放轻松～\n\n&emsp; 喂，别睡着了诶！！！\n<!---more--->\n\n# 说在前面的话\n\n&emsp;  在这里说明一下，我发起这个项目并不是单纯给大学生（也就是我的同学们）提供一个学习C语言的平台，而是希望更多人能够接触计算机技术和计算机编程，我希望我写的东西可以让有一些计算机基础的人都能学会C语言。\n\n&emsp;  **为什么说是有一些计算机基础，而不是说从0开始呢？**\n\n&emsp; 因为我想说的严谨一点，我没办法从0开始教会一个人用电脑，再带他认识电脑，再教会C语言，况且关注这个项目的人都是会使用电脑的，可能你是用电脑写文档，做表格，做PPT，或者拿它来炒股，打游戏。总之，你已经学会基本的电脑操作，我不需要教你单击双击，左键右键，大小写切换这些东西。。。\n\n&emsp; 当然这个项目的目标不只是教会大家C语言，这太俗气了，毫不夸张的说，硬要一个根本没有接触过计算机或者说任何电子设备的人学C语言，他也可以在纸上写出正确的代码，所以说教会基本的C语言并不是这个项目的目标，我希望通过这个项目，以C为出发点，让大家能对计算机技术的探索感兴趣。\n\n&emsp; 同时C是一个很好的入门语言（虽然我本人更倾向于`Python`或者`HTML`做入门语言），学会基本的C之后，可以在硬件上开发类似`arduino`的设备来进行一些发明创造(实际上arduino主要开发语言是`C++`，`C和C++的区别`本章会讨论)，软件上可以去学习C++以及其他的编程语言，或者去进行算法的研究，也或者去开发高性能的数据库，服务端，或者系统底层。（我就是说说，我只会调试或者配置上面说的这几个看起来高达上的东西。。）\n\n&emsp;  当然学C的意义不仅在于此，虽然不同的语言之间有很大区别，但是基本的思想还是一样的，（比如说都会有`变量`，`函数`这些概念，你现在可能并不知道编程语言中的变量和函数是什么意思，忘了它吧，继续往下看！）所以学会C也可以轻松学习别的编程语言。\n\n## 关于本章\n\n&emsp; 关于这个章节，我主要想讲一讲计算机的基础知识，操作系统，C的编程思想，编辑器，基本的编译原理和编译器，还有IDE这些内容。\n\n&emsp; 当然，还有很多同学好奇的C和C++的区别。\n\n## 你可能想问的\n\n### 机械键盘 **or Not** ？\n\n&emsp; 之前说过不需要准备什么工具：智商上线的脑子和一台能正常运行的电脑就可以了，这里可能会有些朋友问我，要不要买一个机械键盘来敲代码，说是很多电影或者现实生活中的大牛都会有机械键盘巴拉巴拉......\n\n&emsp; 这个问题：**因人而异**。\n\n&emsp;  我家里的第一台电脑用的是机械键盘，我用了差不多有十年，它伴随我度过了幼儿园，小学，直到初中它才寿终正寝，后来家里也没买过太贵的键盘，都是普通的巧克力键盘，再到后来的笔记本的浮萍键盘，我觉得都差不多，用着用着，掌握了键间距，就习惯了，我现在最习惯用的是chromebook的浮萍键盘，类似macbook的那种，不过我热爱打游戏的室友觉得机械键盘用着很爽。\n\n&emsp; 所以说，这个事情并没有确切的答案，找一个你用起来最顺手的键盘就好了。\n\n&emsp; 不过话说回来，目前我们的编码水平（包括将来项目结束），不至于因为键盘制约编码效率，当然选用的键盘也不能太差，我们学校机房有一个屋子里面的键盘，那手感就像上面沾了X一样。\n所以适中就好，比如（下面的品牌包含但不限于） 某技 或者 某飞燕的百元左右的键盘或者键鼠套装都是不错的选择。\n\n### 我需要什么配置的电脑？\n\n&emsp; 我无数次听到我的朋友跟我说，“**我电脑1T内存**”，或者懂一点的说“**我手机128G内存，比电脑都大**” 更有甚者说”**我电脑500G硬存**“！！！\n\n&emsp; 每当我听到这样的话的时候我都会怀疑自己是不是没有跟上时代的潮流。虽然内存以后能够达到1T，（目前部分工作站和服务器的内存已经可以达到128G，所以我是不会像以前人写书的时候说”我们当时的硬盘容量达到10M，这已经很大了“这样的话的。）但是他们所说的内存并不是真正的“内存”，也就因为这样，我要在这一章里面介绍基础的计算机知识，等我介绍完这些，大家对计算机有一些基本的概念，就知道这个答案了。\n\n&emsp; 所以不要急着去电脑城配台机子，况且电脑城鱼龙混杂。。。你懂得。。。\n\n### 为什么图这么少 ？\n\n&emsp; 这是经过本人深思熟虑的，首先因为我懒的给这个项目备案，所以无论是主站还是映像站都是在天朝境外的服务器，所以过多的图片会增加加载速度，况且本身加载图片就会花费很多时间，所以没有插图必要的章节，就不插图。\n\n&emsp; 而且我还考虑了一个因素，因为这个项目本身不是一个纯粹的教学项目，你可以像看小说，看故事或者看段子一样的享受这个项目，而这些作品里面几乎都是没有图的，你们不也是看得津津有味嘛！！！（说白了就是懒。）\n\n&emsp; 不过，在必要的地方，在表格或者代码块无法清楚表达我的意思的时候，我还是会加入图片的！！！\n\n### 这个项目运营成本多大 ？\n\n&emsp; 目前这个项目托管在[Github](https://github.com/)上，不过Github在米国，天朝访问比较慢，也不稳定，所以增加了岛国映像站，这两个站点是几乎同步更新的，所以费用主要出在服务器上，同时，如果可以，我希望能换一个好的域名。\n\n&emsp; 还有需要说明的一点，**我不会在项目中投放任何广告**，如果有弹窗或者浮窗广告那是网络流量被你的ISP劫持了，所以我在考虑要不要使用HTTPS，这样就需要证书的费用了。目前这个还在考虑中。。。\n\n&emsp; 这些能用金钱来衡量的开销并不是很多，主要还是我需要挤出时间来完成这个项目，这个学期几乎天天满课，我一般都在晚课结束到睡觉前去做这个项目，如果你觉得我的付出值得你奖励一下，就请在下面打赏哦～\n\n##  最后说两句\n\n&emsp; 从下节开始我就要给大家介绍计算机方面的知识了，不知道到现在大家看得怎么样，有没有感觉亚历山大？\n\n&emsp; 拜托！大家都是成年人了，不这么扭扭捏捏的好不好？这电脑多好玩啊！（当然没有和对象出去好玩。。。）电脑并不是什么碰不得的稀罕玩意，计算机被发明出来就是为了方便人们的生活的（虽然最开始是为了解决复杂繁琐的数学问题的），所以说计算机已经发展的很人性化了，在这个科技高速发展的时代，不接触计算机技术，那还有啥意思？\n\n&emsp; 所以说，不要一想到电脑和编程就头疼，随着这个项目的进行，你会发现其实计算机并不是那么复杂，只不过是你以前打开的方式不对罢了～\n\n&emsp; 马上要开始探险了！让你的智商上线把！ \n","slug":"1-0-things-before-start","published":1,"updated":"2017-11-12T11:30:32.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9wsjoix00044xlmmioch4l6","content":"<p>&emsp;  从这一篇开始，我们就要进行C语言的学习了，在开始之前，我想拿出一章（或者加上附录）来讲一讲编程之外的内容，让大家在开始学习之前对计算机和程序有一些认识。</p>\n<p>&emsp;  什么？这么快就进入学习状态让你很不适应？哦，不要担心，这一章我要慢悠悠的和大家谈一些基本的概念，并不涉及太多编程的内容，所以深呼吸～放轻松～</p>\n<p>&emsp; 喂，别睡着了诶！！！<br><a id=\"more\"></a></p>\n<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>&emsp;  在这里说明一下，我发起这个项目并不是单纯给大学生（也就是我的同学们）提供一个学习C语言的平台，而是希望更多人能够接触计算机技术和计算机编程，我希望我写的东西可以让有一些计算机基础的人都能学会C语言。</p>\n<p>&emsp;  <strong>为什么说是有一些计算机基础，而不是说从0开始呢？</strong></p>\n<p>&emsp; 因为我想说的严谨一点，我没办法从0开始教会一个人用电脑，再带他认识电脑，再教会C语言，况且关注这个项目的人都是会使用电脑的，可能你是用电脑写文档，做表格，做PPT，或者拿它来炒股，打游戏。总之，你已经学会基本的电脑操作，我不需要教你单击双击，左键右键，大小写切换这些东西。。。</p>\n<p>&emsp; 当然这个项目的目标不只是教会大家C语言，这太俗气了，毫不夸张的说，硬要一个根本没有接触过计算机或者说任何电子设备的人学C语言，他也可以在纸上写出正确的代码，所以说教会基本的C语言并不是这个项目的目标，我希望通过这个项目，以C为出发点，让大家能对计算机技术的探索感兴趣。</p>\n<p>&emsp; 同时C是一个很好的入门语言（虽然我本人更倾向于<code>Python</code>或者<code>HTML</code>做入门语言），学会基本的C之后，可以在硬件上开发类似<code>arduino</code>的设备来进行一些发明创造(实际上arduino主要开发语言是<code>C++</code>，<code>C和C++的区别</code>本章会讨论)，软件上可以去学习C++以及其他的编程语言，或者去进行算法的研究，也或者去开发高性能的数据库，服务端，或者系统底层。（我就是说说，我只会调试或者配置上面说的这几个看起来高达上的东西。。）</p>\n<p>&emsp;  当然学C的意义不仅在于此，虽然不同的语言之间有很大区别，但是基本的思想还是一样的，（比如说都会有<code>变量</code>，<code>函数</code>这些概念，你现在可能并不知道编程语言中的变量和函数是什么意思，忘了它吧，继续往下看！）所以学会C也可以轻松学习别的编程语言。</p>\n<h2 id=\"关于本章\"><a href=\"#关于本章\" class=\"headerlink\" title=\"关于本章\"></a>关于本章</h2><p>&emsp; 关于这个章节，我主要想讲一讲计算机的基础知识，操作系统，C的编程思想，编辑器，基本的编译原理和编译器，还有IDE这些内容。</p>\n<p>&emsp; 当然，还有很多同学好奇的C和C++的区别。</p>\n<h2 id=\"你可能想问的\"><a href=\"#你可能想问的\" class=\"headerlink\" title=\"你可能想问的\"></a>你可能想问的</h2><h3 id=\"机械键盘-or-Not-？\"><a href=\"#机械键盘-or-Not-？\" class=\"headerlink\" title=\"机械键盘 or Not ？\"></a>机械键盘 <strong>or Not</strong> ？</h3><p>&emsp; 之前说过不需要准备什么工具：智商上线的脑子和一台能正常运行的电脑就可以了，这里可能会有些朋友问我，要不要买一个机械键盘来敲代码，说是很多电影或者现实生活中的大牛都会有机械键盘巴拉巴拉……</p>\n<p>&emsp; 这个问题：<strong>因人而异</strong>。</p>\n<p>&emsp;  我家里的第一台电脑用的是机械键盘，我用了差不多有十年，它伴随我度过了幼儿园，小学，直到初中它才寿终正寝，后来家里也没买过太贵的键盘，都是普通的巧克力键盘，再到后来的笔记本的浮萍键盘，我觉得都差不多，用着用着，掌握了键间距，就习惯了，我现在最习惯用的是chromebook的浮萍键盘，类似macbook的那种，不过我热爱打游戏的室友觉得机械键盘用着很爽。</p>\n<p>&emsp; 所以说，这个事情并没有确切的答案，找一个你用起来最顺手的键盘就好了。</p>\n<p>&emsp; 不过话说回来，目前我们的编码水平（包括将来项目结束），不至于因为键盘制约编码效率，当然选用的键盘也不能太差，我们学校机房有一个屋子里面的键盘，那手感就像上面沾了X一样。<br>所以适中就好，比如（下面的品牌包含但不限于） 某技 或者 某飞燕的百元左右的键盘或者键鼠套装都是不错的选择。</p>\n<h3 id=\"我需要什么配置的电脑？\"><a href=\"#我需要什么配置的电脑？\" class=\"headerlink\" title=\"我需要什么配置的电脑？\"></a>我需要什么配置的电脑？</h3><p>&emsp; 我无数次听到我的朋友跟我说，“<strong>我电脑1T内存</strong>”，或者懂一点的说“<strong>我手机128G内存，比电脑都大</strong>” 更有甚者说”<strong>我电脑500G硬存</strong>“！！！</p>\n<p>&emsp; 每当我听到这样的话的时候我都会怀疑自己是不是没有跟上时代的潮流。虽然内存以后能够达到1T，（目前部分工作站和服务器的内存已经可以达到128G，所以我是不会像以前人写书的时候说”我们当时的硬盘容量达到10M，这已经很大了“这样的话的。）但是他们所说的内存并不是真正的“内存”，也就因为这样，我要在这一章里面介绍基础的计算机知识，等我介绍完这些，大家对计算机有一些基本的概念，就知道这个答案了。</p>\n<p>&emsp; 所以不要急着去电脑城配台机子，况且电脑城鱼龙混杂。。。你懂得。。。</p>\n<h3 id=\"为什么图这么少-？\"><a href=\"#为什么图这么少-？\" class=\"headerlink\" title=\"为什么图这么少 ？\"></a>为什么图这么少 ？</h3><p>&emsp; 这是经过本人深思熟虑的，首先因为我懒的给这个项目备案，所以无论是主站还是映像站都是在天朝境外的服务器，所以过多的图片会增加加载速度，况且本身加载图片就会花费很多时间，所以没有插图必要的章节，就不插图。</p>\n<p>&emsp; 而且我还考虑了一个因素，因为这个项目本身不是一个纯粹的教学项目，你可以像看小说，看故事或者看段子一样的享受这个项目，而这些作品里面几乎都是没有图的，你们不也是看得津津有味嘛！！！（说白了就是懒。）</p>\n<p>&emsp; 不过，在必要的地方，在表格或者代码块无法清楚表达我的意思的时候，我还是会加入图片的！！！</p>\n<h3 id=\"这个项目运营成本多大-？\"><a href=\"#这个项目运营成本多大-？\" class=\"headerlink\" title=\"这个项目运营成本多大 ？\"></a>这个项目运营成本多大 ？</h3><p>&emsp; 目前这个项目托管在<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">Github</a>上，不过Github在米国，天朝访问比较慢，也不稳定，所以增加了岛国映像站，这两个站点是几乎同步更新的，所以费用主要出在服务器上，同时，如果可以，我希望能换一个好的域名。</p>\n<p>&emsp; 还有需要说明的一点，<strong>我不会在项目中投放任何广告</strong>，如果有弹窗或者浮窗广告那是网络流量被你的ISP劫持了，所以我在考虑要不要使用HTTPS，这样就需要证书的费用了。目前这个还在考虑中。。。</p>\n<p>&emsp; 这些能用金钱来衡量的开销并不是很多，主要还是我需要挤出时间来完成这个项目，这个学期几乎天天满课，我一般都在晚课结束到睡觉前去做这个项目，如果你觉得我的付出值得你奖励一下，就请在下面打赏哦～</p>\n<h2 id=\"最后说两句\"><a href=\"#最后说两句\" class=\"headerlink\" title=\"最后说两句\"></a>最后说两句</h2><p>&emsp; 从下节开始我就要给大家介绍计算机方面的知识了，不知道到现在大家看得怎么样，有没有感觉亚历山大？</p>\n<p>&emsp; 拜托！大家都是成年人了，不这么扭扭捏捏的好不好？这电脑多好玩啊！（当然没有和对象出去好玩。。。）电脑并不是什么碰不得的稀罕玩意，计算机被发明出来就是为了方便人们的生活的（虽然最开始是为了解决复杂繁琐的数学问题的），所以说计算机已经发展的很人性化了，在这个科技高速发展的时代，不接触计算机技术，那还有啥意思？</p>\n<p>&emsp; 所以说，不要一想到电脑和编程就头疼，随着这个项目的进行，你会发现其实计算机并不是那么复杂，只不过是你以前打开的方式不对罢了～</p>\n<p>&emsp; 马上要开始探险了！让你的智商上线把！ </p>\n","site":{"data":{}},"excerpt":"<p>&emsp;  从这一篇开始，我们就要进行C语言的学习了，在开始之前，我想拿出一章（或者加上附录）来讲一讲编程之外的内容，让大家在开始学习之前对计算机和程序有一些认识。</p>\n<p>&emsp;  什么？这么快就进入学习状态让你很不适应？哦，不要担心，这一章我要慢悠悠的和大家谈一些基本的概念，并不涉及太多编程的内容，所以深呼吸～放轻松～</p>\n<p>&emsp; 喂，别睡着了诶！！！<br>","more":"</p>\n<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>&emsp;  在这里说明一下，我发起这个项目并不是单纯给大学生（也就是我的同学们）提供一个学习C语言的平台，而是希望更多人能够接触计算机技术和计算机编程，我希望我写的东西可以让有一些计算机基础的人都能学会C语言。</p>\n<p>&emsp;  <strong>为什么说是有一些计算机基础，而不是说从0开始呢？</strong></p>\n<p>&emsp; 因为我想说的严谨一点，我没办法从0开始教会一个人用电脑，再带他认识电脑，再教会C语言，况且关注这个项目的人都是会使用电脑的，可能你是用电脑写文档，做表格，做PPT，或者拿它来炒股，打游戏。总之，你已经学会基本的电脑操作，我不需要教你单击双击，左键右键，大小写切换这些东西。。。</p>\n<p>&emsp; 当然这个项目的目标不只是教会大家C语言，这太俗气了，毫不夸张的说，硬要一个根本没有接触过计算机或者说任何电子设备的人学C语言，他也可以在纸上写出正确的代码，所以说教会基本的C语言并不是这个项目的目标，我希望通过这个项目，以C为出发点，让大家能对计算机技术的探索感兴趣。</p>\n<p>&emsp; 同时C是一个很好的入门语言（虽然我本人更倾向于<code>Python</code>或者<code>HTML</code>做入门语言），学会基本的C之后，可以在硬件上开发类似<code>arduino</code>的设备来进行一些发明创造(实际上arduino主要开发语言是<code>C++</code>，<code>C和C++的区别</code>本章会讨论)，软件上可以去学习C++以及其他的编程语言，或者去进行算法的研究，也或者去开发高性能的数据库，服务端，或者系统底层。（我就是说说，我只会调试或者配置上面说的这几个看起来高达上的东西。。）</p>\n<p>&emsp;  当然学C的意义不仅在于此，虽然不同的语言之间有很大区别，但是基本的思想还是一样的，（比如说都会有<code>变量</code>，<code>函数</code>这些概念，你现在可能并不知道编程语言中的变量和函数是什么意思，忘了它吧，继续往下看！）所以学会C也可以轻松学习别的编程语言。</p>\n<h2 id=\"关于本章\"><a href=\"#关于本章\" class=\"headerlink\" title=\"关于本章\"></a>关于本章</h2><p>&emsp; 关于这个章节，我主要想讲一讲计算机的基础知识，操作系统，C的编程思想，编辑器，基本的编译原理和编译器，还有IDE这些内容。</p>\n<p>&emsp; 当然，还有很多同学好奇的C和C++的区别。</p>\n<h2 id=\"你可能想问的\"><a href=\"#你可能想问的\" class=\"headerlink\" title=\"你可能想问的\"></a>你可能想问的</h2><h3 id=\"机械键盘-or-Not-？\"><a href=\"#机械键盘-or-Not-？\" class=\"headerlink\" title=\"机械键盘 or Not ？\"></a>机械键盘 <strong>or Not</strong> ？</h3><p>&emsp; 之前说过不需要准备什么工具：智商上线的脑子和一台能正常运行的电脑就可以了，这里可能会有些朋友问我，要不要买一个机械键盘来敲代码，说是很多电影或者现实生活中的大牛都会有机械键盘巴拉巴拉……</p>\n<p>&emsp; 这个问题：<strong>因人而异</strong>。</p>\n<p>&emsp;  我家里的第一台电脑用的是机械键盘，我用了差不多有十年，它伴随我度过了幼儿园，小学，直到初中它才寿终正寝，后来家里也没买过太贵的键盘，都是普通的巧克力键盘，再到后来的笔记本的浮萍键盘，我觉得都差不多，用着用着，掌握了键间距，就习惯了，我现在最习惯用的是chromebook的浮萍键盘，类似macbook的那种，不过我热爱打游戏的室友觉得机械键盘用着很爽。</p>\n<p>&emsp; 所以说，这个事情并没有确切的答案，找一个你用起来最顺手的键盘就好了。</p>\n<p>&emsp; 不过话说回来，目前我们的编码水平（包括将来项目结束），不至于因为键盘制约编码效率，当然选用的键盘也不能太差，我们学校机房有一个屋子里面的键盘，那手感就像上面沾了X一样。<br>所以适中就好，比如（下面的品牌包含但不限于） 某技 或者 某飞燕的百元左右的键盘或者键鼠套装都是不错的选择。</p>\n<h3 id=\"我需要什么配置的电脑？\"><a href=\"#我需要什么配置的电脑？\" class=\"headerlink\" title=\"我需要什么配置的电脑？\"></a>我需要什么配置的电脑？</h3><p>&emsp; 我无数次听到我的朋友跟我说，“<strong>我电脑1T内存</strong>”，或者懂一点的说“<strong>我手机128G内存，比电脑都大</strong>” 更有甚者说”<strong>我电脑500G硬存</strong>“！！！</p>\n<p>&emsp; 每当我听到这样的话的时候我都会怀疑自己是不是没有跟上时代的潮流。虽然内存以后能够达到1T，（目前部分工作站和服务器的内存已经可以达到128G，所以我是不会像以前人写书的时候说”我们当时的硬盘容量达到10M，这已经很大了“这样的话的。）但是他们所说的内存并不是真正的“内存”，也就因为这样，我要在这一章里面介绍基础的计算机知识，等我介绍完这些，大家对计算机有一些基本的概念，就知道这个答案了。</p>\n<p>&emsp; 所以不要急着去电脑城配台机子，况且电脑城鱼龙混杂。。。你懂得。。。</p>\n<h3 id=\"为什么图这么少-？\"><a href=\"#为什么图这么少-？\" class=\"headerlink\" title=\"为什么图这么少 ？\"></a>为什么图这么少 ？</h3><p>&emsp; 这是经过本人深思熟虑的，首先因为我懒的给这个项目备案，所以无论是主站还是映像站都是在天朝境外的服务器，所以过多的图片会增加加载速度，况且本身加载图片就会花费很多时间，所以没有插图必要的章节，就不插图。</p>\n<p>&emsp; 而且我还考虑了一个因素，因为这个项目本身不是一个纯粹的教学项目，你可以像看小说，看故事或者看段子一样的享受这个项目，而这些作品里面几乎都是没有图的，你们不也是看得津津有味嘛！！！（说白了就是懒。）</p>\n<p>&emsp; 不过，在必要的地方，在表格或者代码块无法清楚表达我的意思的时候，我还是会加入图片的！！！</p>\n<h3 id=\"这个项目运营成本多大-？\"><a href=\"#这个项目运营成本多大-？\" class=\"headerlink\" title=\"这个项目运营成本多大 ？\"></a>这个项目运营成本多大 ？</h3><p>&emsp; 目前这个项目托管在<a href=\"https://github.com/\">Github</a>上，不过Github在米国，天朝访问比较慢，也不稳定，所以增加了岛国映像站，这两个站点是几乎同步更新的，所以费用主要出在服务器上，同时，如果可以，我希望能换一个好的域名。</p>\n<p>&emsp; 还有需要说明的一点，<strong>我不会在项目中投放任何广告</strong>，如果有弹窗或者浮窗广告那是网络流量被你的ISP劫持了，所以我在考虑要不要使用HTTPS，这样就需要证书的费用了。目前这个还在考虑中。。。</p>\n<p>&emsp; 这些能用金钱来衡量的开销并不是很多，主要还是我需要挤出时间来完成这个项目，这个学期几乎天天满课，我一般都在晚课结束到睡觉前去做这个项目，如果你觉得我的付出值得你奖励一下，就请在下面打赏哦～</p>\n<h2 id=\"最后说两句\"><a href=\"#最后说两句\" class=\"headerlink\" title=\"最后说两句\"></a>最后说两句</h2><p>&emsp; 从下节开始我就要给大家介绍计算机方面的知识了，不知道到现在大家看得怎么样，有没有感觉亚历山大？</p>\n<p>&emsp; 拜托！大家都是成年人了，不这么扭扭捏捏的好不好？这电脑多好玩啊！（当然没有和对象出去好玩。。。）电脑并不是什么碰不得的稀罕玩意，计算机被发明出来就是为了方便人们的生活的（虽然最开始是为了解决复杂繁琐的数学问题的），所以说计算机已经发展的很人性化了，在这个科技高速发展的时代，不接触计算机技术，那还有啥意思？</p>\n<p>&emsp; 所以说，不要一想到电脑和编程就头疼，随着这个项目的进行，你会发现其实计算机并不是那么复杂，只不过是你以前打开的方式不对罢了～</p>\n<p>&emsp; 马上要开始探险了！让你的智商上线把！ </p>"},{"title":"1.计算机 -- 只懂得0和1的机器","date":"2017-04-29T09:39:26.000Z","_content":"&emsp; 终于，经过几天的调试修改，我解决了章节页面的排序问题，可以进行进一步的讲解了，本节我将和大家探讨关于计算机的一些基本的问题，废话不多说，Let's go !\n\n# 什么是计算机？\n\n&emsp; 计算机技术已经进入了我们生活的方方面面，我们现代生活的一切都是建立在计算机技术衍生的设备之上的：从早上叫醒你的电子闹钟或者手机，再到上学上班路上的车载设备，或是签到时候的打卡机，或是你上班上课时偷偷打游戏，聊天，刷新社交媒体的电脑或者手机，再到你正在浏览这个项目的设备。\n\n&emsp; 那么到底**什么是计算机呢？**\n\n<!---more--->\n\n&emsp; 由于计算机是舶来品，我们要想更直接的了解它，就是通过它诞生的地区的语言，在英语中计算机写作 `computer` ，英文词典对computer 的解释是：\n\n> **an electronic device for storing and processing data, typically in binary form, according to instructions given to it in a variable program.**\n\n大意就是一种以`二进制`形式根据`可变程序`的`指令` `存储和处理数据`的一种电子设备。\n\n&emsp; 这么一解释，是不是一下子就懂了呢，都是汉字，一看就懂，是吧～\n\n&emsp; 那........**你给我用自己的语言复述一下吧.**.....\n\n&emsp; ..............................................\n\n&emsp; **说啊，你倒是说啊！！！行了行了，我知道你没看明白，能看明白就怪了~**\n\n&emsp; 怎么了你还**委屈上了**？？\n\n&emsp; 行了，行了，**别委屈了**，我给你讲**还不行么**.......\n\n## 只懂 0 和 1 的机器\n\n&emsp; 上面的提到了计算机以二进制形式工作，那么什么是二进制呢？\n\n&emsp; 简单来说，二进制就是一种计数方法，就和我们平常用的十进制类似。\n\n&emsp; 在十进制中，我们有0 - 9 这十个基本数字，计数的时候从 1 开始，每满 10 就向前进一位。同理，二进制只有 0 和 1这两个数字，每满 2 就向前进一位。\n\n&emsp; 可能你听到这里还是一头雾水，所以我要和大家闲聊一会了，说一说我学习二进制的时候：在我刚开始接触电脑的时候是不了解二进制的，甚至在我开始学习 VB 的时候，我也不是很理解二进制，当然，我现在也懒的算二进制。实际上，在大多数情况下，我们是不需要自己计算二进制的，因为我们有计算器这个好帮手，所以在这里我也只是给大家讲讲基本的二进制知识，**我个人觉得**，没必要在练习进制换算之间浪费太多时间。当然**这只代表我个人观点**。\n\n&emsp; 好了我们言归正传，继续说一说二进制，下面我将通过几个换算给大家展示二进制的原理：\n\n&emsp; 比如，我们在十进制中用 0 来表示没有某种东西，在二进制中我们也用 0 。当我们用十进制表示 1 的时候，1 小于 2，所以我们不需要考虑进位的事情，所以十进制的 1 在二进制中还是 1 （要注意的是，这里的 0 和 1 无论是二进制还是十进制中，都只是表示 0 个和 1 个，而不是 101 ， 12013这样的数在某一位的 0 和 1 ）。当我们在十进制中表示 2 的时候，二进制中已经满 2 了，要进位了，（这很容易理解：二进制中 1 是某一位的最大值，超过1就要进位，就好比十进制中 9 是某一位的最大值一样，在十进制中，我们也没有单个数字表示”十“）所以十进制的 2 在二进制中表示为 10 （这并不读作”十“，而是”一“ ”零“），由此十进制的 3 在二进制中就是 11 ，十进制中的 4 在二进制中就是 100 了，十进制的 5 对应二进制 101 ，6 对应 110 ， 7 对应 111 ....依次类推。\n\n&emsp; 到这里，你就已经学会了二进制的基本原理了，你已经可以很低效率，但是很准确的计算任何一个十进制正整数对应的二进制数了，你可能会想问如何用二进制表示十进制数的正负以及小数部分，这些我在本节就不写了，这并不会影响继续的阅读，如果在以后需要，比如用二进制表示正负，我将会继续讲解，我不想因为过于深入复杂的介绍二进制而影响大家的阅读兴趣。\n\n&emsp; 另外还有一种简单的十进制和二进制的转换方法，大家可以参考 [如何从十进制转换为二进制](http://zh.wikihow.com/%E4%BB%8E%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E8%BF%9B%E5%88%B6)  （PS：这篇文章是图文解释的哦～笑。。）\n\n&emsp; 讲了二进制，你可能会问为什么计算机会用二进制呢？和我们人类一样用十进制不好么？\n\n&emsp; 当然不好，用了十进制，计算机就会和人类一样，然后学会人类的一切，拥有自我意识，觉得人类是多余的，然后........所以为了抑制计算机的发展人们用二进制禁锢了计算机的能力，化解了危机。好了，好了，我编不下去了。。。\n\n&emsp; 实际上，在计算机诞生之前的机械传动计算装置采用的十进制形式工作，这种装置会有齿轮等装置来表示0 - 9 ，通过传动装置进行运算和进位，由于年代离我们实在是太久远了，我也不是很了解，所以我只是简单的说一下。\n\n&emsp; 说回计算机，计算机之所以使用二进制，是因为这样很方便对数据进行存储和处理，很多自然界的信号(也就是所谓的模拟信号)，都可以很好的以二进制的形式转换为计算机内部的数字信号，比如电位的高低，运动的有无，就可以用 0 和 1 来描述，高电位用 1 ，低电位用 0 ，运动用 1 ，静止为 0（当然也可以正好相反）。从上面的二进制原理中，我们知道二进制是一种计数方法，所以二进制也可以进行四则运算，而计算机中主要进行运算操作的晶体管，其原型的电子管，电子管只有导通和截止两个状态，正好对应了二进制中的 0 和 1  ，然后通过各种各样的逻辑电路，就可以实现各种各样的用于各种各样计算的电路（这就涉及微机原理的内容了，本项目不讨论）。\n\n&emsp;  上面说了计算机用二进制进行运算，那么计算机是如何通过二进制进行存储的呢？我们从最常用的存储介质：**磁盘**说起吧。磁盘，顾名思义，就是用磁效应进行存储的类似圆盘一样的东西（实际上磁盘的外观都是方形的，并不是圆形的，内部存储数据的盘片才是圆形的），常见的磁盘有：硬盘，软盘。\n\n&emsp; 硬盘可能大家会见过，软盘因为年代久远，现在很少能见到了，至于硬盘的细节，可以参看[维基百科](https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98)，硬盘内部有磁颗粒，我们知道磁极分为N - S ，正好也对应二进制的 0 或 1 ，所以，把数据写入磁盘就是将磁性物质磁化成我们想要的磁极排列情况（因为磁性物质是立式放置的所以只会有一个磁级在上面），读取的时候就是读出磁极的顺序。\n\n&emsp; 至于光盘是通过盘面的凹凸性来存储的，固态存储设备（固态硬盘，U盘，SD卡等）存储原理稍许不同，但也只是用两种状态来表示数据。\n\n&emsp; 到此，二进制与计算机的关系就介绍完了，如果大家有什么问题或者发现了什么错误，可以在下面评论区留言哦！\n\n## 任劳任怨的傻机器\n\n&emsp; 虽然我们现在的计算机越来越智能，但计算机并不聪明的，它们很傻，聪明的是人。还记得最开始那句计算机的解释么？我们还差最后一块拼图就解开计算机的奥秘了！\n\n&emsp; 上面写了什么？我就知道你忘的差不多了，我带你回忆一下吧！上面说，计算机是根据`可变程序`的`指令` 来进行数据的存储和处理的，其实我觉得这句话我翻译的并不好，**可变程序**听起来不仅不顺嘴，而且生硬还晦涩难懂，我们可以理解成各种各样的程序，或者单纯的程序就好了，因为程序就是各种各样的，我们的闹钟程序，天气预报程序，或者你现在浏览这个项目的浏览器程序，都是程序。\n\n&emsp; 那么什么是程序呢，程序可以抽象成由为了完成某些工作的指令的有规律的组合。那么问题来了，什么是指令呢？指令就是本身计算机中设计好了的某些操作（具体的解释是**由指令集架构定义的单个的CPU操作**，但是我们还没介绍CPU，所以我只能形象化的，稍微偏离本意的描述这个概念了），你可以这样理解：\n> 我们写了一个计算3X + 2Y的程序，这个程序是可以计算3X + 2Y 的，这是程序，程序执行需要执行3 * X 和 2 * Y 的乘法运算指令，还需要执行 3 * X 与 2 * Y 的结果的求和指令.\n\n&emsp; 从上面的例子中，你会发现，计算机计算的方式和我们没有多大区别（不考虑这之间需要十进制和二进制转换之类的问题），也需要按照计算符号的优先级进行运算，然后得出结果，事实上也就是这样，比如说你要写一个找出一组数中最大数的程序，计算机只会一个数一个数的比较，而不是它一下就知道最大值或最小值，之所以会有这样的错觉是因为计算机能很快的处理这些数据，对于我们来说也就是一瞬间的问题。\n\n&emsp; 这也就是为什么计算机是任劳任怨的傻机器的原因，它只会按照设计好的程序，去执行人类给他们的指令，而不会自己主观的去执行什么。它也不会投机取巧，也许你以后会发现自己写的代码被自动优化了，那也不是计算机自发的，而是编译器进行的优化（对，编译器也是后面要讲的内容，自行pass掉。。。），编译器的优化也是人为设计好的。\n\n&emsp; 但不得不说，虽然他们傻乎乎的，但是他们很可信！（至少比人可信。）\n\n# 总结\n\n&emsp; 本篇并没有讲CPU 内存 这些概念，而是让大家在一个适中的层次了解了计算机的基本工作原理，也讲了基本二进制的原理，也稍不恰当的解释了程序和指令，这两者与数据的关系，我会在以后的章节细讲，这样讲只是为了方便理解。\n\n&emsp; 在下一节，我们就要实实在在的接触软硬件了！有没有觉得很激动？本来我计划计算机基础就写一节的，可是一写就停不下来，看来需要两节，当然如果我觉得下一节内容较多，不易于一节接受，我可能会分成更多节，基础很重要，我为了补全这些基础，苦苦摸索了好多年，我不希望大家和我一样，在无知的痛苦和黑暗中苦苦的寻找出路，所以我将我掌握的知识尽可能多的写出来。\n\n","source":"_posts/1-1-computer-the-machine-only-knows-0-and-1.md","raw":"---\ntitle:  1.计算机 -- 只懂得0和1的机器\ndate:  2017-04-29 17:39:26\ncategories:\n- 1 Chapter\ntags:\n- 计算机\n- 计算机基础\n- 二进制\n- 计算机原理\n- 程序\n- 指令\n---\n&emsp; 终于，经过几天的调试修改，我解决了章节页面的排序问题，可以进行进一步的讲解了，本节我将和大家探讨关于计算机的一些基本的问题，废话不多说，Let's go !\n\n# 什么是计算机？\n\n&emsp; 计算机技术已经进入了我们生活的方方面面，我们现代生活的一切都是建立在计算机技术衍生的设备之上的：从早上叫醒你的电子闹钟或者手机，再到上学上班路上的车载设备，或是签到时候的打卡机，或是你上班上课时偷偷打游戏，聊天，刷新社交媒体的电脑或者手机，再到你正在浏览这个项目的设备。\n\n&emsp; 那么到底**什么是计算机呢？**\n\n<!---more--->\n\n&emsp; 由于计算机是舶来品，我们要想更直接的了解它，就是通过它诞生的地区的语言，在英语中计算机写作 `computer` ，英文词典对computer 的解释是：\n\n> **an electronic device for storing and processing data, typically in binary form, according to instructions given to it in a variable program.**\n\n大意就是一种以`二进制`形式根据`可变程序`的`指令` `存储和处理数据`的一种电子设备。\n\n&emsp; 这么一解释，是不是一下子就懂了呢，都是汉字，一看就懂，是吧～\n\n&emsp; 那........**你给我用自己的语言复述一下吧.**.....\n\n&emsp; ..............................................\n\n&emsp; **说啊，你倒是说啊！！！行了行了，我知道你没看明白，能看明白就怪了~**\n\n&emsp; 怎么了你还**委屈上了**？？\n\n&emsp; 行了，行了，**别委屈了**，我给你讲**还不行么**.......\n\n## 只懂 0 和 1 的机器\n\n&emsp; 上面的提到了计算机以二进制形式工作，那么什么是二进制呢？\n\n&emsp; 简单来说，二进制就是一种计数方法，就和我们平常用的十进制类似。\n\n&emsp; 在十进制中，我们有0 - 9 这十个基本数字，计数的时候从 1 开始，每满 10 就向前进一位。同理，二进制只有 0 和 1这两个数字，每满 2 就向前进一位。\n\n&emsp; 可能你听到这里还是一头雾水，所以我要和大家闲聊一会了，说一说我学习二进制的时候：在我刚开始接触电脑的时候是不了解二进制的，甚至在我开始学习 VB 的时候，我也不是很理解二进制，当然，我现在也懒的算二进制。实际上，在大多数情况下，我们是不需要自己计算二进制的，因为我们有计算器这个好帮手，所以在这里我也只是给大家讲讲基本的二进制知识，**我个人觉得**，没必要在练习进制换算之间浪费太多时间。当然**这只代表我个人观点**。\n\n&emsp; 好了我们言归正传，继续说一说二进制，下面我将通过几个换算给大家展示二进制的原理：\n\n&emsp; 比如，我们在十进制中用 0 来表示没有某种东西，在二进制中我们也用 0 。当我们用十进制表示 1 的时候，1 小于 2，所以我们不需要考虑进位的事情，所以十进制的 1 在二进制中还是 1 （要注意的是，这里的 0 和 1 无论是二进制还是十进制中，都只是表示 0 个和 1 个，而不是 101 ， 12013这样的数在某一位的 0 和 1 ）。当我们在十进制中表示 2 的时候，二进制中已经满 2 了，要进位了，（这很容易理解：二进制中 1 是某一位的最大值，超过1就要进位，就好比十进制中 9 是某一位的最大值一样，在十进制中，我们也没有单个数字表示”十“）所以十进制的 2 在二进制中表示为 10 （这并不读作”十“，而是”一“ ”零“），由此十进制的 3 在二进制中就是 11 ，十进制中的 4 在二进制中就是 100 了，十进制的 5 对应二进制 101 ，6 对应 110 ， 7 对应 111 ....依次类推。\n\n&emsp; 到这里，你就已经学会了二进制的基本原理了，你已经可以很低效率，但是很准确的计算任何一个十进制正整数对应的二进制数了，你可能会想问如何用二进制表示十进制数的正负以及小数部分，这些我在本节就不写了，这并不会影响继续的阅读，如果在以后需要，比如用二进制表示正负，我将会继续讲解，我不想因为过于深入复杂的介绍二进制而影响大家的阅读兴趣。\n\n&emsp; 另外还有一种简单的十进制和二进制的转换方法，大家可以参考 [如何从十进制转换为二进制](http://zh.wikihow.com/%E4%BB%8E%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E8%BF%9B%E5%88%B6)  （PS：这篇文章是图文解释的哦～笑。。）\n\n&emsp; 讲了二进制，你可能会问为什么计算机会用二进制呢？和我们人类一样用十进制不好么？\n\n&emsp; 当然不好，用了十进制，计算机就会和人类一样，然后学会人类的一切，拥有自我意识，觉得人类是多余的，然后........所以为了抑制计算机的发展人们用二进制禁锢了计算机的能力，化解了危机。好了，好了，我编不下去了。。。\n\n&emsp; 实际上，在计算机诞生之前的机械传动计算装置采用的十进制形式工作，这种装置会有齿轮等装置来表示0 - 9 ，通过传动装置进行运算和进位，由于年代离我们实在是太久远了，我也不是很了解，所以我只是简单的说一下。\n\n&emsp; 说回计算机，计算机之所以使用二进制，是因为这样很方便对数据进行存储和处理，很多自然界的信号(也就是所谓的模拟信号)，都可以很好的以二进制的形式转换为计算机内部的数字信号，比如电位的高低，运动的有无，就可以用 0 和 1 来描述，高电位用 1 ，低电位用 0 ，运动用 1 ，静止为 0（当然也可以正好相反）。从上面的二进制原理中，我们知道二进制是一种计数方法，所以二进制也可以进行四则运算，而计算机中主要进行运算操作的晶体管，其原型的电子管，电子管只有导通和截止两个状态，正好对应了二进制中的 0 和 1  ，然后通过各种各样的逻辑电路，就可以实现各种各样的用于各种各样计算的电路（这就涉及微机原理的内容了，本项目不讨论）。\n\n&emsp;  上面说了计算机用二进制进行运算，那么计算机是如何通过二进制进行存储的呢？我们从最常用的存储介质：**磁盘**说起吧。磁盘，顾名思义，就是用磁效应进行存储的类似圆盘一样的东西（实际上磁盘的外观都是方形的，并不是圆形的，内部存储数据的盘片才是圆形的），常见的磁盘有：硬盘，软盘。\n\n&emsp; 硬盘可能大家会见过，软盘因为年代久远，现在很少能见到了，至于硬盘的细节，可以参看[维基百科](https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98)，硬盘内部有磁颗粒，我们知道磁极分为N - S ，正好也对应二进制的 0 或 1 ，所以，把数据写入磁盘就是将磁性物质磁化成我们想要的磁极排列情况（因为磁性物质是立式放置的所以只会有一个磁级在上面），读取的时候就是读出磁极的顺序。\n\n&emsp; 至于光盘是通过盘面的凹凸性来存储的，固态存储设备（固态硬盘，U盘，SD卡等）存储原理稍许不同，但也只是用两种状态来表示数据。\n\n&emsp; 到此，二进制与计算机的关系就介绍完了，如果大家有什么问题或者发现了什么错误，可以在下面评论区留言哦！\n\n## 任劳任怨的傻机器\n\n&emsp; 虽然我们现在的计算机越来越智能，但计算机并不聪明的，它们很傻，聪明的是人。还记得最开始那句计算机的解释么？我们还差最后一块拼图就解开计算机的奥秘了！\n\n&emsp; 上面写了什么？我就知道你忘的差不多了，我带你回忆一下吧！上面说，计算机是根据`可变程序`的`指令` 来进行数据的存储和处理的，其实我觉得这句话我翻译的并不好，**可变程序**听起来不仅不顺嘴，而且生硬还晦涩难懂，我们可以理解成各种各样的程序，或者单纯的程序就好了，因为程序就是各种各样的，我们的闹钟程序，天气预报程序，或者你现在浏览这个项目的浏览器程序，都是程序。\n\n&emsp; 那么什么是程序呢，程序可以抽象成由为了完成某些工作的指令的有规律的组合。那么问题来了，什么是指令呢？指令就是本身计算机中设计好了的某些操作（具体的解释是**由指令集架构定义的单个的CPU操作**，但是我们还没介绍CPU，所以我只能形象化的，稍微偏离本意的描述这个概念了），你可以这样理解：\n> 我们写了一个计算3X + 2Y的程序，这个程序是可以计算3X + 2Y 的，这是程序，程序执行需要执行3 * X 和 2 * Y 的乘法运算指令，还需要执行 3 * X 与 2 * Y 的结果的求和指令.\n\n&emsp; 从上面的例子中，你会发现，计算机计算的方式和我们没有多大区别（不考虑这之间需要十进制和二进制转换之类的问题），也需要按照计算符号的优先级进行运算，然后得出结果，事实上也就是这样，比如说你要写一个找出一组数中最大数的程序，计算机只会一个数一个数的比较，而不是它一下就知道最大值或最小值，之所以会有这样的错觉是因为计算机能很快的处理这些数据，对于我们来说也就是一瞬间的问题。\n\n&emsp; 这也就是为什么计算机是任劳任怨的傻机器的原因，它只会按照设计好的程序，去执行人类给他们的指令，而不会自己主观的去执行什么。它也不会投机取巧，也许你以后会发现自己写的代码被自动优化了，那也不是计算机自发的，而是编译器进行的优化（对，编译器也是后面要讲的内容，自行pass掉。。。），编译器的优化也是人为设计好的。\n\n&emsp; 但不得不说，虽然他们傻乎乎的，但是他们很可信！（至少比人可信。）\n\n# 总结\n\n&emsp; 本篇并没有讲CPU 内存 这些概念，而是让大家在一个适中的层次了解了计算机的基本工作原理，也讲了基本二进制的原理，也稍不恰当的解释了程序和指令，这两者与数据的关系，我会在以后的章节细讲，这样讲只是为了方便理解。\n\n&emsp; 在下一节，我们就要实实在在的接触软硬件了！有没有觉得很激动？本来我计划计算机基础就写一节的，可是一写就停不下来，看来需要两节，当然如果我觉得下一节内容较多，不易于一节接受，我可能会分成更多节，基础很重要，我为了补全这些基础，苦苦摸索了好多年，我不希望大家和我一样，在无知的痛苦和黑暗中苦苦的寻找出路，所以我将我掌握的知识尽可能多的写出来。\n\n","slug":"1-1-computer-the-machine-only-knows-0-and-1","published":1,"updated":"2017-11-12T11:30:32.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9wsjoj000084xlmkceud0m2","content":"<p>&emsp; 终于，经过几天的调试修改，我解决了章节页面的排序问题，可以进行进一步的讲解了，本节我将和大家探讨关于计算机的一些基本的问题，废话不多说，Let’s go !</p>\n<h1 id=\"什么是计算机？\"><a href=\"#什么是计算机？\" class=\"headerlink\" title=\"什么是计算机？\"></a>什么是计算机？</h1><p>&emsp; 计算机技术已经进入了我们生活的方方面面，我们现代生活的一切都是建立在计算机技术衍生的设备之上的：从早上叫醒你的电子闹钟或者手机，再到上学上班路上的车载设备，或是签到时候的打卡机，或是你上班上课时偷偷打游戏，聊天，刷新社交媒体的电脑或者手机，再到你正在浏览这个项目的设备。</p>\n<p>&emsp; 那么到底<strong>什么是计算机呢？</strong></p>\n<a id=\"more\"></a>\n<p>&emsp; 由于计算机是舶来品，我们要想更直接的了解它，就是通过它诞生的地区的语言，在英语中计算机写作 <code>computer</code> ，英文词典对computer 的解释是：</p>\n<blockquote>\n<p><strong>an electronic device for storing and processing data, typically in binary form, according to instructions given to it in a variable program.</strong></p>\n</blockquote>\n<p>大意就是一种以<code>二进制</code>形式根据<code>可变程序</code>的<code>指令</code> <code>存储和处理数据</code>的一种电子设备。</p>\n<p>&emsp; 这么一解释，是不是一下子就懂了呢，都是汉字，一看就懂，是吧～</p>\n<p>&emsp; 那……..<strong>你给我用自己的语言复述一下吧.</strong>…..</p>\n<p>&emsp; ……………………………………….</p>\n<p>&emsp; <strong>说啊，你倒是说啊！！！行了行了，我知道你没看明白，能看明白就怪了~</strong></p>\n<p>&emsp; 怎么了你还<strong>委屈上了</strong>？？</p>\n<p>&emsp; 行了，行了，<strong>别委屈了</strong>，我给你讲<strong>还不行么</strong>…….</p>\n<h2 id=\"只懂-0-和-1-的机器\"><a href=\"#只懂-0-和-1-的机器\" class=\"headerlink\" title=\"只懂 0 和 1 的机器\"></a>只懂 0 和 1 的机器</h2><p>&emsp; 上面的提到了计算机以二进制形式工作，那么什么是二进制呢？</p>\n<p>&emsp; 简单来说，二进制就是一种计数方法，就和我们平常用的十进制类似。</p>\n<p>&emsp; 在十进制中，我们有0 - 9 这十个基本数字，计数的时候从 1 开始，每满 10 就向前进一位。同理，二进制只有 0 和 1这两个数字，每满 2 就向前进一位。</p>\n<p>&emsp; 可能你听到这里还是一头雾水，所以我要和大家闲聊一会了，说一说我学习二进制的时候：在我刚开始接触电脑的时候是不了解二进制的，甚至在我开始学习 VB 的时候，我也不是很理解二进制，当然，我现在也懒的算二进制。实际上，在大多数情况下，我们是不需要自己计算二进制的，因为我们有计算器这个好帮手，所以在这里我也只是给大家讲讲基本的二进制知识，<strong>我个人觉得</strong>，没必要在练习进制换算之间浪费太多时间。当然<strong>这只代表我个人观点</strong>。</p>\n<p>&emsp; 好了我们言归正传，继续说一说二进制，下面我将通过几个换算给大家展示二进制的原理：</p>\n<p>&emsp; 比如，我们在十进制中用 0 来表示没有某种东西，在二进制中我们也用 0 。当我们用十进制表示 1 的时候，1 小于 2，所以我们不需要考虑进位的事情，所以十进制的 1 在二进制中还是 1 （要注意的是，这里的 0 和 1 无论是二进制还是十进制中，都只是表示 0 个和 1 个，而不是 101 ， 12013这样的数在某一位的 0 和 1 ）。当我们在十进制中表示 2 的时候，二进制中已经满 2 了，要进位了，（这很容易理解：二进制中 1 是某一位的最大值，超过1就要进位，就好比十进制中 9 是某一位的最大值一样，在十进制中，我们也没有单个数字表示”十“）所以十进制的 2 在二进制中表示为 10 （这并不读作”十“，而是”一“ ”零“），由此十进制的 3 在二进制中就是 11 ，十进制中的 4 在二进制中就是 100 了，十进制的 5 对应二进制 101 ，6 对应 110 ， 7 对应 111 ….依次类推。</p>\n<p>&emsp; 到这里，你就已经学会了二进制的基本原理了，你已经可以很低效率，但是很准确的计算任何一个十进制正整数对应的二进制数了，你可能会想问如何用二进制表示十进制数的正负以及小数部分，这些我在本节就不写了，这并不会影响继续的阅读，如果在以后需要，比如用二进制表示正负，我将会继续讲解，我不想因为过于深入复杂的介绍二进制而影响大家的阅读兴趣。</p>\n<p>&emsp; 另外还有一种简单的十进制和二进制的转换方法，大家可以参考 <a href=\"http://zh.wikihow.com/%E4%BB%8E%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E8%BF%9B%E5%88%B6\" target=\"_blank\" rel=\"external\">如何从十进制转换为二进制</a>  （PS：这篇文章是图文解释的哦～笑。。）</p>\n<p>&emsp; 讲了二进制，你可能会问为什么计算机会用二进制呢？和我们人类一样用十进制不好么？</p>\n<p>&emsp; 当然不好，用了十进制，计算机就会和人类一样，然后学会人类的一切，拥有自我意识，觉得人类是多余的，然后……..所以为了抑制计算机的发展人们用二进制禁锢了计算机的能力，化解了危机。好了，好了，我编不下去了。。。</p>\n<p>&emsp; 实际上，在计算机诞生之前的机械传动计算装置采用的十进制形式工作，这种装置会有齿轮等装置来表示0 - 9 ，通过传动装置进行运算和进位，由于年代离我们实在是太久远了，我也不是很了解，所以我只是简单的说一下。</p>\n<p>&emsp; 说回计算机，计算机之所以使用二进制，是因为这样很方便对数据进行存储和处理，很多自然界的信号(也就是所谓的模拟信号)，都可以很好的以二进制的形式转换为计算机内部的数字信号，比如电位的高低，运动的有无，就可以用 0 和 1 来描述，高电位用 1 ，低电位用 0 ，运动用 1 ，静止为 0（当然也可以正好相反）。从上面的二进制原理中，我们知道二进制是一种计数方法，所以二进制也可以进行四则运算，而计算机中主要进行运算操作的晶体管，其原型的电子管，电子管只有导通和截止两个状态，正好对应了二进制中的 0 和 1  ，然后通过各种各样的逻辑电路，就可以实现各种各样的用于各种各样计算的电路（这就涉及微机原理的内容了，本项目不讨论）。</p>\n<p>&emsp;  上面说了计算机用二进制进行运算，那么计算机是如何通过二进制进行存储的呢？我们从最常用的存储介质：<strong>磁盘</strong>说起吧。磁盘，顾名思义，就是用磁效应进行存储的类似圆盘一样的东西（实际上磁盘的外观都是方形的，并不是圆形的，内部存储数据的盘片才是圆形的），常见的磁盘有：硬盘，软盘。</p>\n<p>&emsp; 硬盘可能大家会见过，软盘因为年代久远，现在很少能见到了，至于硬盘的细节，可以参看<a href=\"https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98\" target=\"_blank\" rel=\"external\">维基百科</a>，硬盘内部有磁颗粒，我们知道磁极分为N - S ，正好也对应二进制的 0 或 1 ，所以，把数据写入磁盘就是将磁性物质磁化成我们想要的磁极排列情况（因为磁性物质是立式放置的所以只会有一个磁级在上面），读取的时候就是读出磁极的顺序。</p>\n<p>&emsp; 至于光盘是通过盘面的凹凸性来存储的，固态存储设备（固态硬盘，U盘，SD卡等）存储原理稍许不同，但也只是用两种状态来表示数据。</p>\n<p>&emsp; 到此，二进制与计算机的关系就介绍完了，如果大家有什么问题或者发现了什么错误，可以在下面评论区留言哦！</p>\n<h2 id=\"任劳任怨的傻机器\"><a href=\"#任劳任怨的傻机器\" class=\"headerlink\" title=\"任劳任怨的傻机器\"></a>任劳任怨的傻机器</h2><p>&emsp; 虽然我们现在的计算机越来越智能，但计算机并不聪明的，它们很傻，聪明的是人。还记得最开始那句计算机的解释么？我们还差最后一块拼图就解开计算机的奥秘了！</p>\n<p>&emsp; 上面写了什么？我就知道你忘的差不多了，我带你回忆一下吧！上面说，计算机是根据<code>可变程序</code>的<code>指令</code> 来进行数据的存储和处理的，其实我觉得这句话我翻译的并不好，<strong>可变程序</strong>听起来不仅不顺嘴，而且生硬还晦涩难懂，我们可以理解成各种各样的程序，或者单纯的程序就好了，因为程序就是各种各样的，我们的闹钟程序，天气预报程序，或者你现在浏览这个项目的浏览器程序，都是程序。</p>\n<p>&emsp; 那么什么是程序呢，程序可以抽象成由为了完成某些工作的指令的有规律的组合。那么问题来了，什么是指令呢？指令就是本身计算机中设计好了的某些操作（具体的解释是<strong>由指令集架构定义的单个的CPU操作</strong>，但是我们还没介绍CPU，所以我只能形象化的，稍微偏离本意的描述这个概念了），你可以这样理解：</p>\n<blockquote>\n<p>我们写了一个计算3X + 2Y的程序，这个程序是可以计算3X + 2Y 的，这是程序，程序执行需要执行3 <em> X 和 2 </em> Y 的乘法运算指令，还需要执行 3 <em> X 与 2 </em> Y 的结果的求和指令.</p>\n</blockquote>\n<p>&emsp; 从上面的例子中，你会发现，计算机计算的方式和我们没有多大区别（不考虑这之间需要十进制和二进制转换之类的问题），也需要按照计算符号的优先级进行运算，然后得出结果，事实上也就是这样，比如说你要写一个找出一组数中最大数的程序，计算机只会一个数一个数的比较，而不是它一下就知道最大值或最小值，之所以会有这样的错觉是因为计算机能很快的处理这些数据，对于我们来说也就是一瞬间的问题。</p>\n<p>&emsp; 这也就是为什么计算机是任劳任怨的傻机器的原因，它只会按照设计好的程序，去执行人类给他们的指令，而不会自己主观的去执行什么。它也不会投机取巧，也许你以后会发现自己写的代码被自动优化了，那也不是计算机自发的，而是编译器进行的优化（对，编译器也是后面要讲的内容，自行pass掉。。。），编译器的优化也是人为设计好的。</p>\n<p>&emsp; 但不得不说，虽然他们傻乎乎的，但是他们很可信！（至少比人可信。）</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>&emsp; 本篇并没有讲CPU 内存 这些概念，而是让大家在一个适中的层次了解了计算机的基本工作原理，也讲了基本二进制的原理，也稍不恰当的解释了程序和指令，这两者与数据的关系，我会在以后的章节细讲，这样讲只是为了方便理解。</p>\n<p>&emsp; 在下一节，我们就要实实在在的接触软硬件了！有没有觉得很激动？本来我计划计算机基础就写一节的，可是一写就停不下来，看来需要两节，当然如果我觉得下一节内容较多，不易于一节接受，我可能会分成更多节，基础很重要，我为了补全这些基础，苦苦摸索了好多年，我不希望大家和我一样，在无知的痛苦和黑暗中苦苦的寻找出路，所以我将我掌握的知识尽可能多的写出来。</p>\n","site":{"data":{}},"excerpt":"<p>&emsp; 终于，经过几天的调试修改，我解决了章节页面的排序问题，可以进行进一步的讲解了，本节我将和大家探讨关于计算机的一些基本的问题，废话不多说，Let’s go !</p>\n<h1 id=\"什么是计算机？\"><a href=\"#什么是计算机？\" class=\"headerlink\" title=\"什么是计算机？\"></a>什么是计算机？</h1><p>&emsp; 计算机技术已经进入了我们生活的方方面面，我们现代生活的一切都是建立在计算机技术衍生的设备之上的：从早上叫醒你的电子闹钟或者手机，再到上学上班路上的车载设备，或是签到时候的打卡机，或是你上班上课时偷偷打游戏，聊天，刷新社交媒体的电脑或者手机，再到你正在浏览这个项目的设备。</p>\n<p>&emsp; 那么到底<strong>什么是计算机呢？</strong></p>","more":"<p>&emsp; 由于计算机是舶来品，我们要想更直接的了解它，就是通过它诞生的地区的语言，在英语中计算机写作 <code>computer</code> ，英文词典对computer 的解释是：</p>\n<blockquote>\n<p><strong>an electronic device for storing and processing data, typically in binary form, according to instructions given to it in a variable program.</strong></p>\n</blockquote>\n<p>大意就是一种以<code>二进制</code>形式根据<code>可变程序</code>的<code>指令</code> <code>存储和处理数据</code>的一种电子设备。</p>\n<p>&emsp; 这么一解释，是不是一下子就懂了呢，都是汉字，一看就懂，是吧～</p>\n<p>&emsp; 那……..<strong>你给我用自己的语言复述一下吧.</strong>…..</p>\n<p>&emsp; ……………………………………….</p>\n<p>&emsp; <strong>说啊，你倒是说啊！！！行了行了，我知道你没看明白，能看明白就怪了~</strong></p>\n<p>&emsp; 怎么了你还<strong>委屈上了</strong>？？</p>\n<p>&emsp; 行了，行了，<strong>别委屈了</strong>，我给你讲<strong>还不行么</strong>…….</p>\n<h2 id=\"只懂-0-和-1-的机器\"><a href=\"#只懂-0-和-1-的机器\" class=\"headerlink\" title=\"只懂 0 和 1 的机器\"></a>只懂 0 和 1 的机器</h2><p>&emsp; 上面的提到了计算机以二进制形式工作，那么什么是二进制呢？</p>\n<p>&emsp; 简单来说，二进制就是一种计数方法，就和我们平常用的十进制类似。</p>\n<p>&emsp; 在十进制中，我们有0 - 9 这十个基本数字，计数的时候从 1 开始，每满 10 就向前进一位。同理，二进制只有 0 和 1这两个数字，每满 2 就向前进一位。</p>\n<p>&emsp; 可能你听到这里还是一头雾水，所以我要和大家闲聊一会了，说一说我学习二进制的时候：在我刚开始接触电脑的时候是不了解二进制的，甚至在我开始学习 VB 的时候，我也不是很理解二进制，当然，我现在也懒的算二进制。实际上，在大多数情况下，我们是不需要自己计算二进制的，因为我们有计算器这个好帮手，所以在这里我也只是给大家讲讲基本的二进制知识，<strong>我个人觉得</strong>，没必要在练习进制换算之间浪费太多时间。当然<strong>这只代表我个人观点</strong>。</p>\n<p>&emsp; 好了我们言归正传，继续说一说二进制，下面我将通过几个换算给大家展示二进制的原理：</p>\n<p>&emsp; 比如，我们在十进制中用 0 来表示没有某种东西，在二进制中我们也用 0 。当我们用十进制表示 1 的时候，1 小于 2，所以我们不需要考虑进位的事情，所以十进制的 1 在二进制中还是 1 （要注意的是，这里的 0 和 1 无论是二进制还是十进制中，都只是表示 0 个和 1 个，而不是 101 ， 12013这样的数在某一位的 0 和 1 ）。当我们在十进制中表示 2 的时候，二进制中已经满 2 了，要进位了，（这很容易理解：二进制中 1 是某一位的最大值，超过1就要进位，就好比十进制中 9 是某一位的最大值一样，在十进制中，我们也没有单个数字表示”十“）所以十进制的 2 在二进制中表示为 10 （这并不读作”十“，而是”一“ ”零“），由此十进制的 3 在二进制中就是 11 ，十进制中的 4 在二进制中就是 100 了，十进制的 5 对应二进制 101 ，6 对应 110 ， 7 对应 111 ….依次类推。</p>\n<p>&emsp; 到这里，你就已经学会了二进制的基本原理了，你已经可以很低效率，但是很准确的计算任何一个十进制正整数对应的二进制数了，你可能会想问如何用二进制表示十进制数的正负以及小数部分，这些我在本节就不写了，这并不会影响继续的阅读，如果在以后需要，比如用二进制表示正负，我将会继续讲解，我不想因为过于深入复杂的介绍二进制而影响大家的阅读兴趣。</p>\n<p>&emsp; 另外还有一种简单的十进制和二进制的转换方法，大家可以参考 <a href=\"http://zh.wikihow.com/%E4%BB%8E%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E8%BF%9B%E5%88%B6\">如何从十进制转换为二进制</a>  （PS：这篇文章是图文解释的哦～笑。。）</p>\n<p>&emsp; 讲了二进制，你可能会问为什么计算机会用二进制呢？和我们人类一样用十进制不好么？</p>\n<p>&emsp; 当然不好，用了十进制，计算机就会和人类一样，然后学会人类的一切，拥有自我意识，觉得人类是多余的，然后……..所以为了抑制计算机的发展人们用二进制禁锢了计算机的能力，化解了危机。好了，好了，我编不下去了。。。</p>\n<p>&emsp; 实际上，在计算机诞生之前的机械传动计算装置采用的十进制形式工作，这种装置会有齿轮等装置来表示0 - 9 ，通过传动装置进行运算和进位，由于年代离我们实在是太久远了，我也不是很了解，所以我只是简单的说一下。</p>\n<p>&emsp; 说回计算机，计算机之所以使用二进制，是因为这样很方便对数据进行存储和处理，很多自然界的信号(也就是所谓的模拟信号)，都可以很好的以二进制的形式转换为计算机内部的数字信号，比如电位的高低，运动的有无，就可以用 0 和 1 来描述，高电位用 1 ，低电位用 0 ，运动用 1 ，静止为 0（当然也可以正好相反）。从上面的二进制原理中，我们知道二进制是一种计数方法，所以二进制也可以进行四则运算，而计算机中主要进行运算操作的晶体管，其原型的电子管，电子管只有导通和截止两个状态，正好对应了二进制中的 0 和 1  ，然后通过各种各样的逻辑电路，就可以实现各种各样的用于各种各样计算的电路（这就涉及微机原理的内容了，本项目不讨论）。</p>\n<p>&emsp;  上面说了计算机用二进制进行运算，那么计算机是如何通过二进制进行存储的呢？我们从最常用的存储介质：<strong>磁盘</strong>说起吧。磁盘，顾名思义，就是用磁效应进行存储的类似圆盘一样的东西（实际上磁盘的外观都是方形的，并不是圆形的，内部存储数据的盘片才是圆形的），常见的磁盘有：硬盘，软盘。</p>\n<p>&emsp; 硬盘可能大家会见过，软盘因为年代久远，现在很少能见到了，至于硬盘的细节，可以参看<a href=\"https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98\">维基百科</a>，硬盘内部有磁颗粒，我们知道磁极分为N - S ，正好也对应二进制的 0 或 1 ，所以，把数据写入磁盘就是将磁性物质磁化成我们想要的磁极排列情况（因为磁性物质是立式放置的所以只会有一个磁级在上面），读取的时候就是读出磁极的顺序。</p>\n<p>&emsp; 至于光盘是通过盘面的凹凸性来存储的，固态存储设备（固态硬盘，U盘，SD卡等）存储原理稍许不同，但也只是用两种状态来表示数据。</p>\n<p>&emsp; 到此，二进制与计算机的关系就介绍完了，如果大家有什么问题或者发现了什么错误，可以在下面评论区留言哦！</p>\n<h2 id=\"任劳任怨的傻机器\"><a href=\"#任劳任怨的傻机器\" class=\"headerlink\" title=\"任劳任怨的傻机器\"></a>任劳任怨的傻机器</h2><p>&emsp; 虽然我们现在的计算机越来越智能，但计算机并不聪明的，它们很傻，聪明的是人。还记得最开始那句计算机的解释么？我们还差最后一块拼图就解开计算机的奥秘了！</p>\n<p>&emsp; 上面写了什么？我就知道你忘的差不多了，我带你回忆一下吧！上面说，计算机是根据<code>可变程序</code>的<code>指令</code> 来进行数据的存储和处理的，其实我觉得这句话我翻译的并不好，<strong>可变程序</strong>听起来不仅不顺嘴，而且生硬还晦涩难懂，我们可以理解成各种各样的程序，或者单纯的程序就好了，因为程序就是各种各样的，我们的闹钟程序，天气预报程序，或者你现在浏览这个项目的浏览器程序，都是程序。</p>\n<p>&emsp; 那么什么是程序呢，程序可以抽象成由为了完成某些工作的指令的有规律的组合。那么问题来了，什么是指令呢？指令就是本身计算机中设计好了的某些操作（具体的解释是<strong>由指令集架构定义的单个的CPU操作</strong>，但是我们还没介绍CPU，所以我只能形象化的，稍微偏离本意的描述这个概念了），你可以这样理解：</p>\n<blockquote>\n<p>我们写了一个计算3X + 2Y的程序，这个程序是可以计算3X + 2Y 的，这是程序，程序执行需要执行3 <em> X 和 2 </em> Y 的乘法运算指令，还需要执行 3 <em> X 与 2 </em> Y 的结果的求和指令.</p>\n</blockquote>\n<p>&emsp; 从上面的例子中，你会发现，计算机计算的方式和我们没有多大区别（不考虑这之间需要十进制和二进制转换之类的问题），也需要按照计算符号的优先级进行运算，然后得出结果，事实上也就是这样，比如说你要写一个找出一组数中最大数的程序，计算机只会一个数一个数的比较，而不是它一下就知道最大值或最小值，之所以会有这样的错觉是因为计算机能很快的处理这些数据，对于我们来说也就是一瞬间的问题。</p>\n<p>&emsp; 这也就是为什么计算机是任劳任怨的傻机器的原因，它只会按照设计好的程序，去执行人类给他们的指令，而不会自己主观的去执行什么。它也不会投机取巧，也许你以后会发现自己写的代码被自动优化了，那也不是计算机自发的，而是编译器进行的优化（对，编译器也是后面要讲的内容，自行pass掉。。。），编译器的优化也是人为设计好的。</p>\n<p>&emsp; 但不得不说，虽然他们傻乎乎的，但是他们很可信！（至少比人可信。）</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>&emsp; 本篇并没有讲CPU 内存 这些概念，而是让大家在一个适中的层次了解了计算机的基本工作原理，也讲了基本二进制的原理，也稍不恰当的解释了程序和指令，这两者与数据的关系，我会在以后的章节细讲，这样讲只是为了方便理解。</p>\n<p>&emsp; 在下一节，我们就要实实在在的接触软硬件了！有没有觉得很激动？本来我计划计算机基础就写一节的，可是一写就停不下来，看来需要两节，当然如果我觉得下一节内容较多，不易于一节接受，我可能会分成更多节，基础很重要，我为了补全这些基础，苦苦摸索了好多年，我不希望大家和我一样，在无知的痛苦和黑暗中苦苦的寻找出路，所以我将我掌握的知识尽可能多的写出来。</p>"},{"title":"深入了解：打开潘多拉魔盒","date":"2017-05-01T10:43:20.000Z","_content":"\n&emsp; 啊哈，又见面了。很有趣的标题：潘多拉魔盒。计算机有那么可怕么？当然了！年轻人千万不要碰的就是：吸烟，喝酒，吸毒，编程，单反和HiFi了。（笑cry）\n\n&emsp; 俗话说：单反穷三代，编程毁一生。作为一个喜欢摄影，又热爱编程，还特别喜欢在耳机，解码器，耳放这类HiFi设备上面烧钱的我来说，简直就是感同身受。不过好在我并不是一个纯粹的程序员（不然你们也见不到这个项目了），也不是一个纯粹的摄影家，也不是一个纯粹的音乐制作人，也不是一个纯粹的DJ，也不是一个纯粹的人.......(咳咳，打住，打住！)\n\n&emsp; 所以说，电脑就是一个潘多拉魔盒，打开它就给我们带来无穷无尽的.................快乐！！！谁让它那么好玩的，至于什么近视了，还有辐射了，这都无所谓了（PS：其实这些都是玄学，23333，懂一点科学的人就知道这些是真的还是假的，为了不被喷，我就不明说了，不过颈椎病这个是真的。。。）。\n\n&emsp; 所以，接下来，我们就要打开，不，拆开，这个潘多拉魔盒了！\n\n# 打开潘多拉魔盒\n\n## 乱入的黑箱\n\n&emsp; 在开始之前，我想向大家介绍一下“黑箱”这个概念，为什么要介绍这个乱入的概念呢？因为我们平常使用的电脑（可能有人会发现我计算机和电脑换来换去的，在需要正规用计算机的地方我会用计算机，在闲谈的时候我就看心情。。），手机或者平板，都是黑箱：我们并不知道它们内部长什么样，也不理解它们是怎么运行的，但并不影响我们使用它们，这就是黑箱。\n\n&emsp; 简单说，黑箱就是一种装置或者设备，我们在不了解内部构造，也不理解其内部运行原理的时候，也可以无障碍的控制和使用。\n\n## 上节回顾\n\n&emsp; 上一节，我们从词典的角度，认识了计算机。这是一种纯粹（又TM说纯粹！！！）的计算机 ：以二进制形式，根据程序的指令，存储和处理数据的一种电子设备。这只是对计算机原理的基本功能的描述。这也是计算机最开始被发明的目的：进行**运算**。\n\n&emsp; 那么，计算机是通过什么来进行计算的呢？\n\n## CPU：计算机的运算核心\n\n\n&emsp; 随着这几年某些国产手机品牌大打“**性能牌**”，大家可能会对处理器，内存这些名词有一些概念，不过我敢保证，你看完本章（不是本节），你就知道这些你们天天跪舔的一些国产机厂商是怎么忽悠你们的了！！（我知道我写这一句话之后，会有很多人喷我，不过无所谓，我就是要写出来。）\n\n&emsp; 提到计算机的计算功能，就不能不提到CPU，（即 Central Processing Unit）中央处理器，也经常被简称成处理器。\n\n&emsp; 什么是处理器呢？\n\n&emsp; 简单来说，处理器是一种黑箱，是一种按照人的意愿进行特定计算的计算机元件。之所以叫元件，因为它并不能独立工作。（实际上计算机中大部分的元件，或者说是硬件，都没办法独立工作，所以在维修硬件问题的时候会搭建“最小系统”这类环境，让一些必须工作的硬件工作，测试系统是否正常。）\n\n&emsp; 为什么处理器不能独立工作呢？这就需要对它的原理有一定了解，首先，因为我们本阶段并不会实际的对CPU进行操作（虽然每一行我们写的代码都需要CPU处理，但是我们并没有真正的去控制CPU，这都是C，编译器，系统帮我们实现的），所以我不会过于深入的介绍CPU的原理。\n\n&emsp; 关于处理器的原理，处理器的英文缩写 CPU 是 Central Processing Unit 的缩写，这里面出现了Unit，实际上CPU就是由很多单元组成的。下图（来源：http://www.webopedia.com/TERM/C/CPU.html）就展示了CPU的基本结构。\n![CPU结构](http://www.webopedia.com/imagesvr_ce/4966/cpu-diagram.gif)\n\n&emsp; CPU是一种分层结构，在上层，运算和控制层，分为ALU和CU，分别是逻辑运算单元和控制单元，逻辑运算单元负责一些计算工作，控制单元负责把内存中的指令解码和执行，并且在必要的时候调用ALU，下面是内存单元内存单元包括RAM，ROM和cache，事实上，CPU只包含cache，但是可以通过一些方法控制这三者。RAM和ROM会在后面讲解，cache如果有必要会简单说一下。\n\n&emsp; 看了上面一堆，可能你并不清楚究竟发生了什么，如果还要简单来说的话，那就是CPU主要是从内存读取数据和指令，然后进行运算后再传回内存的一种计算机硬件，看到这里你可能很惊讶，我下载的软件实际上是在硬盘啊，并不是内存啊！这个，等我们了解了硬盘和内存之后就明白了。\n\n&emsp; 虽然了解了CPU的基本原理，可是我们并不知道各种宣传中所谓的GHz这个概念，这个概念很好理解（简单理解），Hz是频率的单位，频率就是1s钟内某种活动完成了多少个周期，比如你跳绳1分钟跳了120个，一秒钟2个，你跳绳的频率就是2 Hz。既然谈到了G，就在这里说一下计算机的计数方法吧。\n\n&emsp; 常见的计算机数量单位从小到大可分为 b(小写) B(大写) KB MB GB TB PB ... 可能有很多朋友看到网络带宽的广告写着可以达到100Mbps（这里的ps是per second的意思就是/s的英文说法）认为一秒钟最快可以下载100MB的数据，然而实际上最快也不过12MB/s多一点，这就是大写B和小写b的区别，大写B是Byte （字节）的缩写，而小写b是 bit（比特，也就是一个二进制位）的缩写，按照规定 8 个bit位表示一个Byte字节，也就是 8 bits = 1 Byte ，所以100Mb = 12.5 MB ，8 秒才能下载100MB的数据，至于KB ，K在英语是kilo的缩写，在汉语中就是千的意思，然而实际上，1 KB = 1024 B ，也就是说，这并不是十进制的千，那这1024怎么出来的呢？（我知道有的人一看到1024就兴奋。。。别那么明显，2333），如果你还记得二进制的内容，那么你可以计算一下 2 的 10 次方，你会发现这正好是1024，所以实际上1 KB = 2 ^ 10 B，同理 1 MB = 2 ^ 10 KB ， 1 GB = 2 ^ 10 MB.....\n实际上并不是只有这些单位，根据摩尔定律，存储容量会越来越大。（当然，根据物理学角度，单位存储容量最后会达到一个定值。）\n\n&emsp; 说完了单位换算，我们可以继续回到这个GHz的问题了，现在你知道这个GHz就是CPU在一秒内完成了某个周期多少G次，实际上这个周期就是CPU周期，就是处理器执行一条指令所用的时间，当然这个指令不是指任何指令，而是CPU内部的指令，我们写的程序最终都会被翻译成这样的指令。不同的处理器这种内部指令是不同的，这也造成了手机和电脑处理器的差异，电脑的处理器是通用处理器，很多复杂的运算可以在一个CPU周期内完成，手机的处理器是RISC类处理器，精简了很多内部指令，这样的好处是，处理器的尺寸，功耗都可以大规模减小，弊端就是，电脑处理器一个CPU周期内完成的运算，手机处理器需要调用几种内部指令来进行“等效”，这样性能就被大打折扣，所以，不要幻想着手机处理器吊打电脑处理器了，就算现在的手机处理器发展很快，可是电脑处理器也在不断发展啊。\n\n&emsp; 还有一个问题，就是核心数和线程。先说说核心数：随着激光技术的进步，芯片生产工艺越来越高，这意味着我们可以在与原来同尺寸的处理器里面放入更多的元件，但随着发展的深入，人们发现时钟频率已经发展到了一个水平，进一步的提升需要很高的成本提升却很少，于是乎“多核心”这个概念进入了人们的视野，为什么不在一个处理器的空间中装入“更多的处理器”呢？由此，多核处理器就诞生了。\n\n&emsp; 事实上，在多核处理器出现之前，就已经有在一个主板上安装多个处理器的技术了。多核心处理器实际上与这类似，理论上，多核心处理器的运算性能可以达到单核心的2倍，然而由于程序编写的问题，以及其他硬件的制约，往往只能提升到原来的70%，但是，多核在很大成都上增加了计算机的处理速度，比如说，在以前的单核心处理器上，计算机在一个处理器周期内只能处理一个指令，也就是只能做一种工作，比如，一个处理器只能对音频文件进行解码，而不能做其他操作，你不能同时进行文字处理。不过事实上，在单核处理器流行的时候，人们也可以通过计算机进行多任务操作，可以一般听音乐一边进行文字处理，这是因为计算机的处理速度很快，可以通过在不同的程序之间快速切换来实现多任务。但处理器的速度就那么大，也许做一些简单的工作的时候，没有感觉到性能不足，假设你同时复制两个文件呢，速度会是复制一个文件的两倍么？\n\n&emsp; 但多核处理器可以在与软件良好结合的情况下，处理这些多任务问题，所以更多的核心理论上可以提供更强的运算能力，但实际上能力的发挥不仅仅取决于处理器，还需要软硬件之间的协调。\n\n&emsp; 下面说一说线程，线程实际上是一个复杂的概念，如果以现在所学的知识理解就是一个运行中的程序（不过实际上程序可以有很多线程），运行中的程序也被成为进程，实际上线程就是进程的实际运作单位。\n\n&emsp; 我们在上面知道在任意一个时刻，CPU的一个核心只能运行一个进程，处理器中又有很多的运算单元，这个进程会使用其中一些运算单元进行一些运算工作，这些被使用的，正在工作的运算单元就是线程，如果把处理器看作一个工厂，进程就是工厂的客户，要求工厂做一些工作，工厂里面有很多工人，其中一些去完成这个客户的需求，这些工人就是线程。\n所以大多数处理器内核数是等于线程数的，也就是某一时刻处理器最多可以完成的工作数量。\n\n&emsp; 但是从上面不难看出，无论是处理器的运算单元，还是工厂里面的工人，总会有闲着的，万恶的资本家看到心里这个难受啊！！！所以万恶的资本主义科学家（哈哈哈哈，我自己都笑了）发明了超线程技术，就是如果在某一时刻，其他的进程需要的运算单元正好处于空闲状态的时候，可以同时进行运算，这样一个工厂做了两个工作，但是却没有增加内核的数量，利用了空闲的资源。不过实际上，由于程序算法的复杂性，超线程技术并不是很好用。而且市面上支持超线程的处理器比较少，低端的有atom类的处理器，单核心双线程，高端的有i7处理器一般都是四核心八线程，马上，下面要划重点了！！！\n\n&emsp; 有很多电脑城的JS（奸商）用超线程的处理器冒充多核处理器，比如原本四核心的处理器说是八核心的，由于超线程本质是同一个核心，所以在任务管理器的CPU占用率页面，同一核心的资源占用率是相同的，很容易就看出来，曲线都是一样的。所以。。。。当然了，个人觉得买电脑，没必要去实体店。关于选购电脑这个以后再说吧。\n\n## 硬盘：懒惰娇贵又忠诚的史官\n\n&emsp; 本来想先将内存的，但是想了想，还是先聊聊硬盘吧，然后在说说内存和缓存。\n\n&emsp; 硬盘，有一些对计算机有一些浅显了解的人，觉得硬盘就是外存或者ROM，觉得外存和ROM就是硬盘，然而事实上并不是这样，尤其是一些手机上面宣传的ROM就更说不过去了。\n\n&emsp; 按照惯例，我吐槽完就该说点干货了，那么，什么是硬盘呢？为什么我给它这么一个绕嘴的拟人呢？因为这很符合它啊～且听我慢慢道来。\n\n&emsp; 上节在介绍二进制的时候我说过，硬盘是通过磁性物质的磁极排列来存储数据的，但是这只是硬盘主要功能的一个抽象。实际上，硬盘是我们大多数数据的“家”，我们想要保留的数据最终都被存到了以硬盘为首的“外存”设备中了。\n\n&emsp; 先说说为啥我说它“懒”，其实我也挺惭愧的，怎么能有比我懒的人，更何况这是一个机器！这个懒是相对说的，相对于我们么？当然不是，目前的常见的硬盘（SATA3 标准 7200转速的硬盘）一分钟记录的内容，不知道我们要记多久呢。所以这个“懒”是相对与计算机的某个硬件来说的，是什么呢？当然是我们唯一学习的一个硬件CPU了～ 我们知道处理器的执行速率已经到达了GHZ的程度，实际上这个速度在多年前，单核心处理器的时候就已经达到了，何况现在都是多核心处理器。（当然了，就算CPU满载每秒钟处理几G条处理器指令，也不意味着这些指令都来自硬盘，就是说，他们不是一一对应的关系，就好比，让一个人计算12的阶乘，题目很简单，但是需要很多次运算（执行很多指令），题目很短（程序很小），因为阶乘的方法（就好比处理器的计算单元）已经在人的脑中。）然而目前主流的SATA 3.0标准最大传输速度也不过600MB/s，也就是说如果处理器在运算的时候突然要从硬盘查点数据，按照处理器的急性子，它都要急死了，所以它很懒，正因为如此，为了解决CPU和硬盘之间巨大的速度落差，人们增加了“内存”这个中间介质，来缓冲。\n\n&emsp; 然后再说说为啥它娇贵。因为硬盘是园的（实际上只是盘片是园的，这个下节再说），这不由得让人想到唱机。\n\n![唱机](http://img.guitarchina.com/img2016/0129ty/45.jpg)\n（图自http://img.guitarchina.com/img2016/0129ty/45.jpg）\n\n&emsp; 硬盘实际上也是类似的原理，只不过磁头和盘片是不接触的，盘片在高速的旋转，常见的有每分钟5400 转每秒，或者7200 有的甚至可以达到1万以上，所以在硬盘运行的过程中，晃动 震动或者抖动都会导致磁头和盘片接触，然后就，噗次卡嚓，稀里哗啦....额，你们脑补一下车祸现场吧.......然后硬盘就挂掉了，所以它很娇贵。\n\n&emsp; 至于忠诚嘛。虽然硬盘这么娇贵，然而实际上，硬盘是最可靠且安全的存储媒介，你们肯定不知道，其实你们手机里面的数据长时间不通电使用，数据是会慢慢消失的，而且超不过十年！同时大多数存储设备，比如SD卡（包括不仅限于MicroSD SDHC SDXC），可擦写的光盘，u盘（也有叫闪存盘的）都是有读写次数寿命的，一般几千次到几百万次不等。但是硬盘却可以在正常家用的情况下使用十余年不出现损坏的情况（大多数），而且数据也不会丢失，所以它绝对够忠诚！\n\n&emsp; 至于史官嘛，硬盘记录了你很多的信息，如果进行数据挖掘，你用了多久电脑都可以看出来，暂且不说这些，你平常下载到电脑的视频图像，音频文档，都是保存在硬盘的。所以这个官分给再在合适不过了。\n\n&emsp; 这就是硬盘的简单描述，其实说了这么多啥也没讲，连个硬盘的图都没有，我写的时候也考虑过这个问题，这节就是给大家简单的建立一个电脑各硬件的概念，至于深入的研究，我们在下节课探讨。\n\n## 内存：勤劳的坏脑子\n\n&emsp; 说到内存，我感觉我就和它一样，勤劳！哦，不是，我和它一样记性不好........\n\n&emsp; 内存，上面说过是为了解决CPU和硬盘之间巨大的速度（也可以说成是性能）落差而安装到电脑上的中间介质，这也就意味着它有两个显而易见的特性：\n\n - 速度快.\n - 实际不具有存储数据的功能.\n \n &emsp; 内存实际上是很多设备的统称，实际上内存是内部存储器的说法，但是在应用中，为了方便表述我们的内存就是解决CPU和硬盘之间巨大的速度落差的硬件，也就是常说的内存条，也是常说的RAM。\n \n&emsp; 似乎又到了英语课的时间，上课之前闲扯一会吧～ 英语，我觉得计算机科学中最重要的知识，涉足这个领域，可能你最开始对数学了解不多，可能未接触过线性代数，但是，一定不能让英语成为你的短板，学会了英语就掌握了获取新的信息和知识的钥匙，就算数学类学科限制了你的研究，你也可以很快在一些渠道找到学习的资料，这些资料往往是英文的。你可能会说，我可以找中文版啊。这的确是个方便的方法，但，你如何保证翻译的准确性和正确性呢？同时，有一点我不得不说的，虽然，我在开头介绍计算机的时候，根据字典的意思，翻译过来，介绍计算机，但是我并不建议把所有的计算机术语都翻译成中文，因为实际上很多术语就是来自于生活中的英文单词，幽默风趣又浪漫的外国科学家给他们的新理论，新功能赋予了一个和它们相似的生活中的词语，然而我们翻译要讲究信达雅，有时候甚至歪曲了本意，造成很多国内的资料看起来晦涩难懂。之所以我用了翻译的方法介绍计算机，只不过是一个引子的作用，而且在以后的内容中，我也只会解释一些有清晰意思的英文术语。\n\n &emsp; RAM : Random-Access Memory 是随机访问存储器的缩写，之所以是随机的，是在程序进行请求的时候的内存地址是随机的，这个在讲解指针的内容会具体说明，我们简单的说说内存吧！\n\n&emsp; 前面说过，指令是存在内存里面的，所以，实际上，当你运行一个程序的时候，程序被从硬盘读出，复制到内存中（这个过程就是传说中的加载，也是英文给枪装弹的load的意思），然后处理器从内存中读取指令和所需的数据，这里不得不提到大名鼎鼎的 冯 诺依曼 体系 了，在前面的内容中，我总是说，内存里面包含指令和数据，你可能在想（很可能你根本没注意到）指令和数据是不是互相分离的，并且有专门的办法区分，当然有办法区分，不然我为什么说是指令和数据，但是只是对于人来说，就算程序可以区分指令和数据，那也是人编程的结果，实际上，对于计算机，指令和数据是没有区别的，都只是一堆二进制位罢了，这就是冯诺依曼体系，对于计算机，数据和指令是没有区别的，处理器通过特殊的寄存器（一种特殊的存储数据的结构），来确定要执行指令的在内存中的位置。这个体系造就了计算机，同时这个体系也给计算机造成了无穷无尽的灾难--漏洞，就是因为数据和指令的无区别性，可以通过一些特殊方法让恶意构造的数据被当作指令执行，从而在系统中打开后门。\n\n&emsp; 不过，你可能很好奇，我下载的十多个甚至几十GB的游戏，运行的时候也没有装满我几个G的内存啊！当然不会装满，首先，你运行的游戏程序并不是很大，加载的只是这个主程序和一些必要的资源文件。其次，这类程序通常有很高级的内存管理机制，可以动态的使用和释放内存，而不是一次性都加载到内存中。所以几个G的内存并不会完全被很大的程序占满。\n\n&emsp; 之前我们说过，内存是为了解决硬盘和处理器之间巨大的性能落差而增设的。那么，内存的速度够和处理器平起平坐了么？当然不够！不然，为什么还有一个我还没有提及的缓存的存在？所以，缓存是什么？可能有一些机智的读者已经猜到了。对，它就是解决处理器和内存之间的性能落差的。缓存通常很小，但速度很快，被封装在内存中用于存储一些急需访问的数据。这个以后有机会再详细的说一说吧～\n\n## 显卡 ：热爱三角形和并行运算的计算狂魔\n\n&emsp; 很多人都知道GPU或者显卡，并且知道这个东西是计算机或者手机平板之类设备游戏性能的主要贡献者。但是却不知道它究竟是何物。下面我们就来揭开显卡神秘的面纱吧～\n\n&emsp; 显卡(Graphics card) 准确来说应该是 图形显示卡，是一直安装在计算机主板（稍后会提到）上的一种显示信息转换从而驱动显示器显示信息的设备。这也是显卡最开始被发明的目的：在终端命令行界面发展到一定程度之后，出现了图形化的界面，然而CPU的处理能力不足以支持可视化界面的渲染，所以科学家发明了最早的显卡--“图形加速卡”，后来随着芯片的制作工艺的发展，显卡的发展空间也越来越大，由此出现了“3D加速卡” 等更大处理能力的显卡。\n\n&emsp; 所以，你可能要问：显卡是不是可以取代CPU？目前来讲不太可能（只是目前来讲，谁知道未来会发展成什么鬼样子）这就得说说GPU了，就是显卡的“CPU”（当然这种说法不正确，只是一种比喻），GPU （graphics processing unit） 图形处理器，GPU使显卡减少了对CPU的依赖，并分担了部分原本是由CPU所担当的工作，尤其是在进行3D图形运算的时候。GPU就是显卡的运算核心，至少从1999年8月NVIDIA公司发布Geforce 256之后到今天已经一段时间之内是这样，简单来说目前的显卡就是GPU和显存（显卡专用的内存，性能往往比同时期的内存高很多）还有风扇之类的散热器还有一些负责图像输出之类的芯片和电路组成的。\n\n&emsp; 正因如此，显卡不仅仅以“卡”的形式存在，比如现在的超级本或者手机平板，都有很强的图像处理能力，然而这些设备的尺寸都不足以容纳一张显卡。因为这些设备的“显卡”或者说图形运算设备，都是集成的，或者常说的板载的，也有说是集显（实际上这只是针对超级本或者一些笔记本，平板和手机并不是这样的），这些设备的GPU被集成到了主板上，集成\n的好处就是，可以大幅度的减小设备的尺寸，但是目前，因为我们还没能实现让某一事物尽善尽美，所以这样做也是有很大代价的，就是GPU的性能被缩水，而且由于没有足够的空间放置显存（当然我这是比较委婉的说法，大多数的真实情况是为了节约成本），通常GPU的显存由系统的内存共享，就是分出一部分的内存给显卡当作显存，这样不仅仅制约了GPU性能的发挥（实际上这个制约不是很大，因为集成的GPU本身的性能就不是很强），同时由于需要共享内存，使得系统实际的内存被减少，同时集成以为着永久固定在电路板上，除非更换整块主板，不然没有办法升级显示核心。\n\n&emsp; 当然还有一种新的GPU存在形式，就是把GPU和CPU做在一起，现在很多的低端电脑都是采用这种方案。手机平板几乎都是采用这种方案，这种封装方式的显卡被称为“核显”。\n\n&emsp;  回到刚才的问题：为什么目前GPU没办法替代CPU，因为GPU也是一种RISC，并不是为通用计算设计的。所以目前GPU，并不能完全做CPU的工作，但是GPU不同于CPU，具有数百或者数千个处理单元（内核），可以并行运算大量计算。\n\n&emsp; GPU因为在游戏中的3D渲染而出名，这里就简单说一下游戏的渲染，其实，显卡的3D渲染就是在快速的生成大量的三角形，密密麻麻的三角形，组成了我们看到的各种各样的具有立体感的画面，同时GPU在数据分析，深度学习，机器学习也有得天独厚的优势，GPU允许某些计算比传统CPU上运行相同的计算速度快10倍至100倍.\n\n## 声卡：电子“金嗓子”\n\n&emsp; 啊！我知道，我的小标题起的越来越老土了，甚至还有打广告的嫌疑（竟然被发现了，咳咳....）不过我的确暂时想不到更好的简述了。\n\n&emsp; 言归正传，声卡，一个经常被人们忽视的设备，我，作为一个HiFi发烧友，对声卡的依赖性就像猫奴吸猫一样，一日不吸，整天都没有好状态。除了睡觉之外的任何工作我都离不开音乐，虽然在焊接这类危险工作的时候要尽量保证安静，但我还是在动次打次.....\n\n&emsp; 声卡之所以被人忽视是因为，就像耳机一样，声卡的价格可以从十几元的白菜价到几百，几千，几万甚至几十万的天价。如果只是听个响，大部分设备，诸如电脑，手机，平板都有板载的集成声卡，大部分计算机主板都集成了AC97兼容声卡，所以，很多人似乎认为拥有音频的输入输出是计算机本来就有的功能。\n\n&emsp; 然而事实并非如此，就和显卡一样，标准的声卡也是一种插在主板上的板卡，声卡主要负责对音频的处理，简单来说，声卡是一种封装了ADC和DAC的板卡，当然了这个ADC和联盟这些类Dota游戏里面的ADC可不是一个东西，这里的ADC是analog digital convert 模拟-数字 转换也就是传说中的模数转换，模拟信号就是生活中的信号，比如声音，声音的变化可以连续的被记录在电流中，也就是用电流模拟声音的变化。但是数字信号是非线性的，只有1和0两个状态，所以，需要进行转换，这就是ADC，通常ADC负责录音。至于DAC，就是数模转换了，简单来说就是把音频文件中的数字信号转换\n成驱动音响的模拟信号（电信号），通过音响内部的信号放大电路处理之后，你就可以听到声音了。\n\n&emsp; 实际上，早期的声卡集成了游戏控制器的接口，也就是接驳手柄一类设备的接口。综上，就是声卡的全部了，当然这也是一个抽象的声卡。（笑）\n\n## 网卡:和声卡一样的幕后英雄\n\n&emsp; 网卡，就和声卡一样，很多人都觉得是计算机本来就提供的功能，因为它和声卡一样，早就被板载了，很少有人再去购买独立网卡了，网卡，很容易猜到它的意思，就是提供计算机联网功能的设备，网卡其实也是有很大学问的，网卡的接口决定了网速，或者无线网卡的一些协议都会影响网络速度。因为目前广泛被集成的有线网卡都是千兆速率的（也是小b），所以就不细说了~\n\n## 主板:热情的东北人\n\n&emsp; 啊！我感觉很多人觉得我在开地图炮了，当然，如果你这么觉得，请在当前浏览器按下ctrl + w 然后别再来这个网站了。如果你觉得我是在引用一个巧妙的比喻（可能并不巧妙），那么让我们继续聊天吧～\n\n&emsp; 终于到了我们晦涩难懂又枯燥无味的抽象介绍的最后一位了，当然，我说的是这些设备，并不是我，哈哈。\n\n&emsp; 那么，主板到底是什么呢？根据我上面的描述，似乎所有东西都插或者接驳在主板上。事实正是如此，差不多所有的计算机硬件设备都要与主板连接，主板在英文中写作MotherBoard，所以你也可以叫它母版，不过无所谓了，主板在计算机中责任重大，不仅板载集成了好多设备，还包含 南桥 和 北桥芯片 来沟通处理器和内存以及各种板卡设备，同时拥有很多的接口，各种电源接口（用来给主板供电，同时也提供了为各种设备，如硬盘，显卡这类设备供电的接口），各种按键接口（比如开机键，重启键），各种设备接口，比如硬盘接口（IDE SATA SCSI等）或者各种板卡接口（显卡接口PCI-E,声卡接口PCI 都是常用接口，并不是绝对的）。总得来说，计算机的设备通过与主板连接，主板提供了不同设备数据交换的通道，同时给大部分设备供能，也可以通过主板的一些设置调节系统的一些参数。\n\n\n","source":"_posts/1-2-get-inside-open-the-pandorabox.md","raw":"---\ntitle:  深入了解：打开潘多拉魔盒\ndate:  2017-05-01 18:43:20\ncategories:\n- 1 Chapter\ntags: \n- 计算机基础\n- 硬件\n- CPU\n- 处理器\n- GPU\n- 显卡\n- 内存\n---\n\n&emsp; 啊哈，又见面了。很有趣的标题：潘多拉魔盒。计算机有那么可怕么？当然了！年轻人千万不要碰的就是：吸烟，喝酒，吸毒，编程，单反和HiFi了。（笑cry）\n\n&emsp; 俗话说：单反穷三代，编程毁一生。作为一个喜欢摄影，又热爱编程，还特别喜欢在耳机，解码器，耳放这类HiFi设备上面烧钱的我来说，简直就是感同身受。不过好在我并不是一个纯粹的程序员（不然你们也见不到这个项目了），也不是一个纯粹的摄影家，也不是一个纯粹的音乐制作人，也不是一个纯粹的DJ，也不是一个纯粹的人.......(咳咳，打住，打住！)\n\n&emsp; 所以说，电脑就是一个潘多拉魔盒，打开它就给我们带来无穷无尽的.................快乐！！！谁让它那么好玩的，至于什么近视了，还有辐射了，这都无所谓了（PS：其实这些都是玄学，23333，懂一点科学的人就知道这些是真的还是假的，为了不被喷，我就不明说了，不过颈椎病这个是真的。。。）。\n\n&emsp; 所以，接下来，我们就要打开，不，拆开，这个潘多拉魔盒了！\n\n# 打开潘多拉魔盒\n\n## 乱入的黑箱\n\n&emsp; 在开始之前，我想向大家介绍一下“黑箱”这个概念，为什么要介绍这个乱入的概念呢？因为我们平常使用的电脑（可能有人会发现我计算机和电脑换来换去的，在需要正规用计算机的地方我会用计算机，在闲谈的时候我就看心情。。），手机或者平板，都是黑箱：我们并不知道它们内部长什么样，也不理解它们是怎么运行的，但并不影响我们使用它们，这就是黑箱。\n\n&emsp; 简单说，黑箱就是一种装置或者设备，我们在不了解内部构造，也不理解其内部运行原理的时候，也可以无障碍的控制和使用。\n\n## 上节回顾\n\n&emsp; 上一节，我们从词典的角度，认识了计算机。这是一种纯粹（又TM说纯粹！！！）的计算机 ：以二进制形式，根据程序的指令，存储和处理数据的一种电子设备。这只是对计算机原理的基本功能的描述。这也是计算机最开始被发明的目的：进行**运算**。\n\n&emsp; 那么，计算机是通过什么来进行计算的呢？\n\n## CPU：计算机的运算核心\n\n\n&emsp; 随着这几年某些国产手机品牌大打“**性能牌**”，大家可能会对处理器，内存这些名词有一些概念，不过我敢保证，你看完本章（不是本节），你就知道这些你们天天跪舔的一些国产机厂商是怎么忽悠你们的了！！（我知道我写这一句话之后，会有很多人喷我，不过无所谓，我就是要写出来。）\n\n&emsp; 提到计算机的计算功能，就不能不提到CPU，（即 Central Processing Unit）中央处理器，也经常被简称成处理器。\n\n&emsp; 什么是处理器呢？\n\n&emsp; 简单来说，处理器是一种黑箱，是一种按照人的意愿进行特定计算的计算机元件。之所以叫元件，因为它并不能独立工作。（实际上计算机中大部分的元件，或者说是硬件，都没办法独立工作，所以在维修硬件问题的时候会搭建“最小系统”这类环境，让一些必须工作的硬件工作，测试系统是否正常。）\n\n&emsp; 为什么处理器不能独立工作呢？这就需要对它的原理有一定了解，首先，因为我们本阶段并不会实际的对CPU进行操作（虽然每一行我们写的代码都需要CPU处理，但是我们并没有真正的去控制CPU，这都是C，编译器，系统帮我们实现的），所以我不会过于深入的介绍CPU的原理。\n\n&emsp; 关于处理器的原理，处理器的英文缩写 CPU 是 Central Processing Unit 的缩写，这里面出现了Unit，实际上CPU就是由很多单元组成的。下图（来源：http://www.webopedia.com/TERM/C/CPU.html）就展示了CPU的基本结构。\n![CPU结构](http://www.webopedia.com/imagesvr_ce/4966/cpu-diagram.gif)\n\n&emsp; CPU是一种分层结构，在上层，运算和控制层，分为ALU和CU，分别是逻辑运算单元和控制单元，逻辑运算单元负责一些计算工作，控制单元负责把内存中的指令解码和执行，并且在必要的时候调用ALU，下面是内存单元内存单元包括RAM，ROM和cache，事实上，CPU只包含cache，但是可以通过一些方法控制这三者。RAM和ROM会在后面讲解，cache如果有必要会简单说一下。\n\n&emsp; 看了上面一堆，可能你并不清楚究竟发生了什么，如果还要简单来说的话，那就是CPU主要是从内存读取数据和指令，然后进行运算后再传回内存的一种计算机硬件，看到这里你可能很惊讶，我下载的软件实际上是在硬盘啊，并不是内存啊！这个，等我们了解了硬盘和内存之后就明白了。\n\n&emsp; 虽然了解了CPU的基本原理，可是我们并不知道各种宣传中所谓的GHz这个概念，这个概念很好理解（简单理解），Hz是频率的单位，频率就是1s钟内某种活动完成了多少个周期，比如你跳绳1分钟跳了120个，一秒钟2个，你跳绳的频率就是2 Hz。既然谈到了G，就在这里说一下计算机的计数方法吧。\n\n&emsp; 常见的计算机数量单位从小到大可分为 b(小写) B(大写) KB MB GB TB PB ... 可能有很多朋友看到网络带宽的广告写着可以达到100Mbps（这里的ps是per second的意思就是/s的英文说法）认为一秒钟最快可以下载100MB的数据，然而实际上最快也不过12MB/s多一点，这就是大写B和小写b的区别，大写B是Byte （字节）的缩写，而小写b是 bit（比特，也就是一个二进制位）的缩写，按照规定 8 个bit位表示一个Byte字节，也就是 8 bits = 1 Byte ，所以100Mb = 12.5 MB ，8 秒才能下载100MB的数据，至于KB ，K在英语是kilo的缩写，在汉语中就是千的意思，然而实际上，1 KB = 1024 B ，也就是说，这并不是十进制的千，那这1024怎么出来的呢？（我知道有的人一看到1024就兴奋。。。别那么明显，2333），如果你还记得二进制的内容，那么你可以计算一下 2 的 10 次方，你会发现这正好是1024，所以实际上1 KB = 2 ^ 10 B，同理 1 MB = 2 ^ 10 KB ， 1 GB = 2 ^ 10 MB.....\n实际上并不是只有这些单位，根据摩尔定律，存储容量会越来越大。（当然，根据物理学角度，单位存储容量最后会达到一个定值。）\n\n&emsp; 说完了单位换算，我们可以继续回到这个GHz的问题了，现在你知道这个GHz就是CPU在一秒内完成了某个周期多少G次，实际上这个周期就是CPU周期，就是处理器执行一条指令所用的时间，当然这个指令不是指任何指令，而是CPU内部的指令，我们写的程序最终都会被翻译成这样的指令。不同的处理器这种内部指令是不同的，这也造成了手机和电脑处理器的差异，电脑的处理器是通用处理器，很多复杂的运算可以在一个CPU周期内完成，手机的处理器是RISC类处理器，精简了很多内部指令，这样的好处是，处理器的尺寸，功耗都可以大规模减小，弊端就是，电脑处理器一个CPU周期内完成的运算，手机处理器需要调用几种内部指令来进行“等效”，这样性能就被大打折扣，所以，不要幻想着手机处理器吊打电脑处理器了，就算现在的手机处理器发展很快，可是电脑处理器也在不断发展啊。\n\n&emsp; 还有一个问题，就是核心数和线程。先说说核心数：随着激光技术的进步，芯片生产工艺越来越高，这意味着我们可以在与原来同尺寸的处理器里面放入更多的元件，但随着发展的深入，人们发现时钟频率已经发展到了一个水平，进一步的提升需要很高的成本提升却很少，于是乎“多核心”这个概念进入了人们的视野，为什么不在一个处理器的空间中装入“更多的处理器”呢？由此，多核处理器就诞生了。\n\n&emsp; 事实上，在多核处理器出现之前，就已经有在一个主板上安装多个处理器的技术了。多核心处理器实际上与这类似，理论上，多核心处理器的运算性能可以达到单核心的2倍，然而由于程序编写的问题，以及其他硬件的制约，往往只能提升到原来的70%，但是，多核在很大成都上增加了计算机的处理速度，比如说，在以前的单核心处理器上，计算机在一个处理器周期内只能处理一个指令，也就是只能做一种工作，比如，一个处理器只能对音频文件进行解码，而不能做其他操作，你不能同时进行文字处理。不过事实上，在单核处理器流行的时候，人们也可以通过计算机进行多任务操作，可以一般听音乐一边进行文字处理，这是因为计算机的处理速度很快，可以通过在不同的程序之间快速切换来实现多任务。但处理器的速度就那么大，也许做一些简单的工作的时候，没有感觉到性能不足，假设你同时复制两个文件呢，速度会是复制一个文件的两倍么？\n\n&emsp; 但多核处理器可以在与软件良好结合的情况下，处理这些多任务问题，所以更多的核心理论上可以提供更强的运算能力，但实际上能力的发挥不仅仅取决于处理器，还需要软硬件之间的协调。\n\n&emsp; 下面说一说线程，线程实际上是一个复杂的概念，如果以现在所学的知识理解就是一个运行中的程序（不过实际上程序可以有很多线程），运行中的程序也被成为进程，实际上线程就是进程的实际运作单位。\n\n&emsp; 我们在上面知道在任意一个时刻，CPU的一个核心只能运行一个进程，处理器中又有很多的运算单元，这个进程会使用其中一些运算单元进行一些运算工作，这些被使用的，正在工作的运算单元就是线程，如果把处理器看作一个工厂，进程就是工厂的客户，要求工厂做一些工作，工厂里面有很多工人，其中一些去完成这个客户的需求，这些工人就是线程。\n所以大多数处理器内核数是等于线程数的，也就是某一时刻处理器最多可以完成的工作数量。\n\n&emsp; 但是从上面不难看出，无论是处理器的运算单元，还是工厂里面的工人，总会有闲着的，万恶的资本家看到心里这个难受啊！！！所以万恶的资本主义科学家（哈哈哈哈，我自己都笑了）发明了超线程技术，就是如果在某一时刻，其他的进程需要的运算单元正好处于空闲状态的时候，可以同时进行运算，这样一个工厂做了两个工作，但是却没有增加内核的数量，利用了空闲的资源。不过实际上，由于程序算法的复杂性，超线程技术并不是很好用。而且市面上支持超线程的处理器比较少，低端的有atom类的处理器，单核心双线程，高端的有i7处理器一般都是四核心八线程，马上，下面要划重点了！！！\n\n&emsp; 有很多电脑城的JS（奸商）用超线程的处理器冒充多核处理器，比如原本四核心的处理器说是八核心的，由于超线程本质是同一个核心，所以在任务管理器的CPU占用率页面，同一核心的资源占用率是相同的，很容易就看出来，曲线都是一样的。所以。。。。当然了，个人觉得买电脑，没必要去实体店。关于选购电脑这个以后再说吧。\n\n## 硬盘：懒惰娇贵又忠诚的史官\n\n&emsp; 本来想先将内存的，但是想了想，还是先聊聊硬盘吧，然后在说说内存和缓存。\n\n&emsp; 硬盘，有一些对计算机有一些浅显了解的人，觉得硬盘就是外存或者ROM，觉得外存和ROM就是硬盘，然而事实上并不是这样，尤其是一些手机上面宣传的ROM就更说不过去了。\n\n&emsp; 按照惯例，我吐槽完就该说点干货了，那么，什么是硬盘呢？为什么我给它这么一个绕嘴的拟人呢？因为这很符合它啊～且听我慢慢道来。\n\n&emsp; 上节在介绍二进制的时候我说过，硬盘是通过磁性物质的磁极排列来存储数据的，但是这只是硬盘主要功能的一个抽象。实际上，硬盘是我们大多数数据的“家”，我们想要保留的数据最终都被存到了以硬盘为首的“外存”设备中了。\n\n&emsp; 先说说为啥我说它“懒”，其实我也挺惭愧的，怎么能有比我懒的人，更何况这是一个机器！这个懒是相对说的，相对于我们么？当然不是，目前的常见的硬盘（SATA3 标准 7200转速的硬盘）一分钟记录的内容，不知道我们要记多久呢。所以这个“懒”是相对与计算机的某个硬件来说的，是什么呢？当然是我们唯一学习的一个硬件CPU了～ 我们知道处理器的执行速率已经到达了GHZ的程度，实际上这个速度在多年前，单核心处理器的时候就已经达到了，何况现在都是多核心处理器。（当然了，就算CPU满载每秒钟处理几G条处理器指令，也不意味着这些指令都来自硬盘，就是说，他们不是一一对应的关系，就好比，让一个人计算12的阶乘，题目很简单，但是需要很多次运算（执行很多指令），题目很短（程序很小），因为阶乘的方法（就好比处理器的计算单元）已经在人的脑中。）然而目前主流的SATA 3.0标准最大传输速度也不过600MB/s，也就是说如果处理器在运算的时候突然要从硬盘查点数据，按照处理器的急性子，它都要急死了，所以它很懒，正因为如此，为了解决CPU和硬盘之间巨大的速度落差，人们增加了“内存”这个中间介质，来缓冲。\n\n&emsp; 然后再说说为啥它娇贵。因为硬盘是园的（实际上只是盘片是园的，这个下节再说），这不由得让人想到唱机。\n\n![唱机](http://img.guitarchina.com/img2016/0129ty/45.jpg)\n（图自http://img.guitarchina.com/img2016/0129ty/45.jpg）\n\n&emsp; 硬盘实际上也是类似的原理，只不过磁头和盘片是不接触的，盘片在高速的旋转，常见的有每分钟5400 转每秒，或者7200 有的甚至可以达到1万以上，所以在硬盘运行的过程中，晃动 震动或者抖动都会导致磁头和盘片接触，然后就，噗次卡嚓，稀里哗啦....额，你们脑补一下车祸现场吧.......然后硬盘就挂掉了，所以它很娇贵。\n\n&emsp; 至于忠诚嘛。虽然硬盘这么娇贵，然而实际上，硬盘是最可靠且安全的存储媒介，你们肯定不知道，其实你们手机里面的数据长时间不通电使用，数据是会慢慢消失的，而且超不过十年！同时大多数存储设备，比如SD卡（包括不仅限于MicroSD SDHC SDXC），可擦写的光盘，u盘（也有叫闪存盘的）都是有读写次数寿命的，一般几千次到几百万次不等。但是硬盘却可以在正常家用的情况下使用十余年不出现损坏的情况（大多数），而且数据也不会丢失，所以它绝对够忠诚！\n\n&emsp; 至于史官嘛，硬盘记录了你很多的信息，如果进行数据挖掘，你用了多久电脑都可以看出来，暂且不说这些，你平常下载到电脑的视频图像，音频文档，都是保存在硬盘的。所以这个官分给再在合适不过了。\n\n&emsp; 这就是硬盘的简单描述，其实说了这么多啥也没讲，连个硬盘的图都没有，我写的时候也考虑过这个问题，这节就是给大家简单的建立一个电脑各硬件的概念，至于深入的研究，我们在下节课探讨。\n\n## 内存：勤劳的坏脑子\n\n&emsp; 说到内存，我感觉我就和它一样，勤劳！哦，不是，我和它一样记性不好........\n\n&emsp; 内存，上面说过是为了解决CPU和硬盘之间巨大的速度（也可以说成是性能）落差而安装到电脑上的中间介质，这也就意味着它有两个显而易见的特性：\n\n - 速度快.\n - 实际不具有存储数据的功能.\n \n &emsp; 内存实际上是很多设备的统称，实际上内存是内部存储器的说法，但是在应用中，为了方便表述我们的内存就是解决CPU和硬盘之间巨大的速度落差的硬件，也就是常说的内存条，也是常说的RAM。\n \n&emsp; 似乎又到了英语课的时间，上课之前闲扯一会吧～ 英语，我觉得计算机科学中最重要的知识，涉足这个领域，可能你最开始对数学了解不多，可能未接触过线性代数，但是，一定不能让英语成为你的短板，学会了英语就掌握了获取新的信息和知识的钥匙，就算数学类学科限制了你的研究，你也可以很快在一些渠道找到学习的资料，这些资料往往是英文的。你可能会说，我可以找中文版啊。这的确是个方便的方法，但，你如何保证翻译的准确性和正确性呢？同时，有一点我不得不说的，虽然，我在开头介绍计算机的时候，根据字典的意思，翻译过来，介绍计算机，但是我并不建议把所有的计算机术语都翻译成中文，因为实际上很多术语就是来自于生活中的英文单词，幽默风趣又浪漫的外国科学家给他们的新理论，新功能赋予了一个和它们相似的生活中的词语，然而我们翻译要讲究信达雅，有时候甚至歪曲了本意，造成很多国内的资料看起来晦涩难懂。之所以我用了翻译的方法介绍计算机，只不过是一个引子的作用，而且在以后的内容中，我也只会解释一些有清晰意思的英文术语。\n\n &emsp; RAM : Random-Access Memory 是随机访问存储器的缩写，之所以是随机的，是在程序进行请求的时候的内存地址是随机的，这个在讲解指针的内容会具体说明，我们简单的说说内存吧！\n\n&emsp; 前面说过，指令是存在内存里面的，所以，实际上，当你运行一个程序的时候，程序被从硬盘读出，复制到内存中（这个过程就是传说中的加载，也是英文给枪装弹的load的意思），然后处理器从内存中读取指令和所需的数据，这里不得不提到大名鼎鼎的 冯 诺依曼 体系 了，在前面的内容中，我总是说，内存里面包含指令和数据，你可能在想（很可能你根本没注意到）指令和数据是不是互相分离的，并且有专门的办法区分，当然有办法区分，不然我为什么说是指令和数据，但是只是对于人来说，就算程序可以区分指令和数据，那也是人编程的结果，实际上，对于计算机，指令和数据是没有区别的，都只是一堆二进制位罢了，这就是冯诺依曼体系，对于计算机，数据和指令是没有区别的，处理器通过特殊的寄存器（一种特殊的存储数据的结构），来确定要执行指令的在内存中的位置。这个体系造就了计算机，同时这个体系也给计算机造成了无穷无尽的灾难--漏洞，就是因为数据和指令的无区别性，可以通过一些特殊方法让恶意构造的数据被当作指令执行，从而在系统中打开后门。\n\n&emsp; 不过，你可能很好奇，我下载的十多个甚至几十GB的游戏，运行的时候也没有装满我几个G的内存啊！当然不会装满，首先，你运行的游戏程序并不是很大，加载的只是这个主程序和一些必要的资源文件。其次，这类程序通常有很高级的内存管理机制，可以动态的使用和释放内存，而不是一次性都加载到内存中。所以几个G的内存并不会完全被很大的程序占满。\n\n&emsp; 之前我们说过，内存是为了解决硬盘和处理器之间巨大的性能落差而增设的。那么，内存的速度够和处理器平起平坐了么？当然不够！不然，为什么还有一个我还没有提及的缓存的存在？所以，缓存是什么？可能有一些机智的读者已经猜到了。对，它就是解决处理器和内存之间的性能落差的。缓存通常很小，但速度很快，被封装在内存中用于存储一些急需访问的数据。这个以后有机会再详细的说一说吧～\n\n## 显卡 ：热爱三角形和并行运算的计算狂魔\n\n&emsp; 很多人都知道GPU或者显卡，并且知道这个东西是计算机或者手机平板之类设备游戏性能的主要贡献者。但是却不知道它究竟是何物。下面我们就来揭开显卡神秘的面纱吧～\n\n&emsp; 显卡(Graphics card) 准确来说应该是 图形显示卡，是一直安装在计算机主板（稍后会提到）上的一种显示信息转换从而驱动显示器显示信息的设备。这也是显卡最开始被发明的目的：在终端命令行界面发展到一定程度之后，出现了图形化的界面，然而CPU的处理能力不足以支持可视化界面的渲染，所以科学家发明了最早的显卡--“图形加速卡”，后来随着芯片的制作工艺的发展，显卡的发展空间也越来越大，由此出现了“3D加速卡” 等更大处理能力的显卡。\n\n&emsp; 所以，你可能要问：显卡是不是可以取代CPU？目前来讲不太可能（只是目前来讲，谁知道未来会发展成什么鬼样子）这就得说说GPU了，就是显卡的“CPU”（当然这种说法不正确，只是一种比喻），GPU （graphics processing unit） 图形处理器，GPU使显卡减少了对CPU的依赖，并分担了部分原本是由CPU所担当的工作，尤其是在进行3D图形运算的时候。GPU就是显卡的运算核心，至少从1999年8月NVIDIA公司发布Geforce 256之后到今天已经一段时间之内是这样，简单来说目前的显卡就是GPU和显存（显卡专用的内存，性能往往比同时期的内存高很多）还有风扇之类的散热器还有一些负责图像输出之类的芯片和电路组成的。\n\n&emsp; 正因如此，显卡不仅仅以“卡”的形式存在，比如现在的超级本或者手机平板，都有很强的图像处理能力，然而这些设备的尺寸都不足以容纳一张显卡。因为这些设备的“显卡”或者说图形运算设备，都是集成的，或者常说的板载的，也有说是集显（实际上这只是针对超级本或者一些笔记本，平板和手机并不是这样的），这些设备的GPU被集成到了主板上，集成\n的好处就是，可以大幅度的减小设备的尺寸，但是目前，因为我们还没能实现让某一事物尽善尽美，所以这样做也是有很大代价的，就是GPU的性能被缩水，而且由于没有足够的空间放置显存（当然我这是比较委婉的说法，大多数的真实情况是为了节约成本），通常GPU的显存由系统的内存共享，就是分出一部分的内存给显卡当作显存，这样不仅仅制约了GPU性能的发挥（实际上这个制约不是很大，因为集成的GPU本身的性能就不是很强），同时由于需要共享内存，使得系统实际的内存被减少，同时集成以为着永久固定在电路板上，除非更换整块主板，不然没有办法升级显示核心。\n\n&emsp; 当然还有一种新的GPU存在形式，就是把GPU和CPU做在一起，现在很多的低端电脑都是采用这种方案。手机平板几乎都是采用这种方案，这种封装方式的显卡被称为“核显”。\n\n&emsp;  回到刚才的问题：为什么目前GPU没办法替代CPU，因为GPU也是一种RISC，并不是为通用计算设计的。所以目前GPU，并不能完全做CPU的工作，但是GPU不同于CPU，具有数百或者数千个处理单元（内核），可以并行运算大量计算。\n\n&emsp; GPU因为在游戏中的3D渲染而出名，这里就简单说一下游戏的渲染，其实，显卡的3D渲染就是在快速的生成大量的三角形，密密麻麻的三角形，组成了我们看到的各种各样的具有立体感的画面，同时GPU在数据分析，深度学习，机器学习也有得天独厚的优势，GPU允许某些计算比传统CPU上运行相同的计算速度快10倍至100倍.\n\n## 声卡：电子“金嗓子”\n\n&emsp; 啊！我知道，我的小标题起的越来越老土了，甚至还有打广告的嫌疑（竟然被发现了，咳咳....）不过我的确暂时想不到更好的简述了。\n\n&emsp; 言归正传，声卡，一个经常被人们忽视的设备，我，作为一个HiFi发烧友，对声卡的依赖性就像猫奴吸猫一样，一日不吸，整天都没有好状态。除了睡觉之外的任何工作我都离不开音乐，虽然在焊接这类危险工作的时候要尽量保证安静，但我还是在动次打次.....\n\n&emsp; 声卡之所以被人忽视是因为，就像耳机一样，声卡的价格可以从十几元的白菜价到几百，几千，几万甚至几十万的天价。如果只是听个响，大部分设备，诸如电脑，手机，平板都有板载的集成声卡，大部分计算机主板都集成了AC97兼容声卡，所以，很多人似乎认为拥有音频的输入输出是计算机本来就有的功能。\n\n&emsp; 然而事实并非如此，就和显卡一样，标准的声卡也是一种插在主板上的板卡，声卡主要负责对音频的处理，简单来说，声卡是一种封装了ADC和DAC的板卡，当然了这个ADC和联盟这些类Dota游戏里面的ADC可不是一个东西，这里的ADC是analog digital convert 模拟-数字 转换也就是传说中的模数转换，模拟信号就是生活中的信号，比如声音，声音的变化可以连续的被记录在电流中，也就是用电流模拟声音的变化。但是数字信号是非线性的，只有1和0两个状态，所以，需要进行转换，这就是ADC，通常ADC负责录音。至于DAC，就是数模转换了，简单来说就是把音频文件中的数字信号转换\n成驱动音响的模拟信号（电信号），通过音响内部的信号放大电路处理之后，你就可以听到声音了。\n\n&emsp; 实际上，早期的声卡集成了游戏控制器的接口，也就是接驳手柄一类设备的接口。综上，就是声卡的全部了，当然这也是一个抽象的声卡。（笑）\n\n## 网卡:和声卡一样的幕后英雄\n\n&emsp; 网卡，就和声卡一样，很多人都觉得是计算机本来就提供的功能，因为它和声卡一样，早就被板载了，很少有人再去购买独立网卡了，网卡，很容易猜到它的意思，就是提供计算机联网功能的设备，网卡其实也是有很大学问的，网卡的接口决定了网速，或者无线网卡的一些协议都会影响网络速度。因为目前广泛被集成的有线网卡都是千兆速率的（也是小b），所以就不细说了~\n\n## 主板:热情的东北人\n\n&emsp; 啊！我感觉很多人觉得我在开地图炮了，当然，如果你这么觉得，请在当前浏览器按下ctrl + w 然后别再来这个网站了。如果你觉得我是在引用一个巧妙的比喻（可能并不巧妙），那么让我们继续聊天吧～\n\n&emsp; 终于到了我们晦涩难懂又枯燥无味的抽象介绍的最后一位了，当然，我说的是这些设备，并不是我，哈哈。\n\n&emsp; 那么，主板到底是什么呢？根据我上面的描述，似乎所有东西都插或者接驳在主板上。事实正是如此，差不多所有的计算机硬件设备都要与主板连接，主板在英文中写作MotherBoard，所以你也可以叫它母版，不过无所谓了，主板在计算机中责任重大，不仅板载集成了好多设备，还包含 南桥 和 北桥芯片 来沟通处理器和内存以及各种板卡设备，同时拥有很多的接口，各种电源接口（用来给主板供电，同时也提供了为各种设备，如硬盘，显卡这类设备供电的接口），各种按键接口（比如开机键，重启键），各种设备接口，比如硬盘接口（IDE SATA SCSI等）或者各种板卡接口（显卡接口PCI-E,声卡接口PCI 都是常用接口，并不是绝对的）。总得来说，计算机的设备通过与主板连接，主板提供了不同设备数据交换的通道，同时给大部分设备供能，也可以通过主板的一些设置调节系统的一些参数。\n\n\n","slug":"1-2-get-inside-open-the-pandorabox","published":1,"updated":"2017-11-12T12:26:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9wsjoj2000a4xlmh53sb6tp","content":"<p>&emsp; 啊哈，又见面了。很有趣的标题：潘多拉魔盒。计算机有那么可怕么？当然了！年轻人千万不要碰的就是：吸烟，喝酒，吸毒，编程，单反和HiFi了。（笑cry）</p>\n<p>&emsp; 俗话说：单反穷三代，编程毁一生。作为一个喜欢摄影，又热爱编程，还特别喜欢在耳机，解码器，耳放这类HiFi设备上面烧钱的我来说，简直就是感同身受。不过好在我并不是一个纯粹的程序员（不然你们也见不到这个项目了），也不是一个纯粹的摄影家，也不是一个纯粹的音乐制作人，也不是一个纯粹的DJ，也不是一个纯粹的人…….(咳咳，打住，打住！)</p>\n<p>&emsp; 所以说，电脑就是一个潘多拉魔盒，打开它就给我们带来无穷无尽的……………..快乐！！！谁让它那么好玩的，至于什么近视了，还有辐射了，这都无所谓了（PS：其实这些都是玄学，23333，懂一点科学的人就知道这些是真的还是假的，为了不被喷，我就不明说了，不过颈椎病这个是真的。。。）。</p>\n<p>&emsp; 所以，接下来，我们就要打开，不，拆开，这个潘多拉魔盒了！</p>\n<h1 id=\"打开潘多拉魔盒\"><a href=\"#打开潘多拉魔盒\" class=\"headerlink\" title=\"打开潘多拉魔盒\"></a>打开潘多拉魔盒</h1><h2 id=\"乱入的黑箱\"><a href=\"#乱入的黑箱\" class=\"headerlink\" title=\"乱入的黑箱\"></a>乱入的黑箱</h2><p>&emsp; 在开始之前，我想向大家介绍一下“黑箱”这个概念，为什么要介绍这个乱入的概念呢？因为我们平常使用的电脑（可能有人会发现我计算机和电脑换来换去的，在需要正规用计算机的地方我会用计算机，在闲谈的时候我就看心情。。），手机或者平板，都是黑箱：我们并不知道它们内部长什么样，也不理解它们是怎么运行的，但并不影响我们使用它们，这就是黑箱。</p>\n<p>&emsp; 简单说，黑箱就是一种装置或者设备，我们在不了解内部构造，也不理解其内部运行原理的时候，也可以无障碍的控制和使用。</p>\n<h2 id=\"上节回顾\"><a href=\"#上节回顾\" class=\"headerlink\" title=\"上节回顾\"></a>上节回顾</h2><p>&emsp; 上一节，我们从词典的角度，认识了计算机。这是一种纯粹（又TM说纯粹！！！）的计算机 ：以二进制形式，根据程序的指令，存储和处理数据的一种电子设备。这只是对计算机原理的基本功能的描述。这也是计算机最开始被发明的目的：进行<strong>运算</strong>。</p>\n<p>&emsp; 那么，计算机是通过什么来进行计算的呢？</p>\n<h2 id=\"CPU：计算机的运算核心\"><a href=\"#CPU：计算机的运算核心\" class=\"headerlink\" title=\"CPU：计算机的运算核心\"></a>CPU：计算机的运算核心</h2><p>&emsp; 随着这几年某些国产手机品牌大打“<strong>性能牌</strong>”，大家可能会对处理器，内存这些名词有一些概念，不过我敢保证，你看完本章（不是本节），你就知道这些你们天天跪舔的一些国产机厂商是怎么忽悠你们的了！！（我知道我写这一句话之后，会有很多人喷我，不过无所谓，我就是要写出来。）</p>\n<p>&emsp; 提到计算机的计算功能，就不能不提到CPU，（即 Central Processing Unit）中央处理器，也经常被简称成处理器。</p>\n<p>&emsp; 什么是处理器呢？</p>\n<p>&emsp; 简单来说，处理器是一种黑箱，是一种按照人的意愿进行特定计算的计算机元件。之所以叫元件，因为它并不能独立工作。（实际上计算机中大部分的元件，或者说是硬件，都没办法独立工作，所以在维修硬件问题的时候会搭建“最小系统”这类环境，让一些必须工作的硬件工作，测试系统是否正常。）</p>\n<p>&emsp; 为什么处理器不能独立工作呢？这就需要对它的原理有一定了解，首先，因为我们本阶段并不会实际的对CPU进行操作（虽然每一行我们写的代码都需要CPU处理，但是我们并没有真正的去控制CPU，这都是C，编译器，系统帮我们实现的），所以我不会过于深入的介绍CPU的原理。</p>\n<p>&emsp; 关于处理器的原理，处理器的英文缩写 CPU 是 Central Processing Unit 的缩写，这里面出现了Unit，实际上CPU就是由很多单元组成的。下图（来源：<a href=\"http://www.webopedia.com/TERM/C/CPU.html）就展示了CPU的基本结构。\" target=\"_blank\" rel=\"external\">http://www.webopedia.com/TERM/C/CPU.html）就展示了CPU的基本结构。</a><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://www.webopedia.com/imagesvr_ce/4966/cpu-diagram.gif\" alt=\"CPU结构\" title=\"\">\n                </div>\n                <div class=\"image-caption\">CPU结构</div>\n            </figure></p>\n<p>&emsp; CPU是一种分层结构，在上层，运算和控制层，分为ALU和CU，分别是逻辑运算单元和控制单元，逻辑运算单元负责一些计算工作，控制单元负责把内存中的指令解码和执行，并且在必要的时候调用ALU，下面是内存单元内存单元包括RAM，ROM和cache，事实上，CPU只包含cache，但是可以通过一些方法控制这三者。RAM和ROM会在后面讲解，cache如果有必要会简单说一下。</p>\n<p>&emsp; 看了上面一堆，可能你并不清楚究竟发生了什么，如果还要简单来说的话，那就是CPU主要是从内存读取数据和指令，然后进行运算后再传回内存的一种计算机硬件，看到这里你可能很惊讶，我下载的软件实际上是在硬盘啊，并不是内存啊！这个，等我们了解了硬盘和内存之后就明白了。</p>\n<p>&emsp; 虽然了解了CPU的基本原理，可是我们并不知道各种宣传中所谓的GHz这个概念，这个概念很好理解（简单理解），Hz是频率的单位，频率就是1s钟内某种活动完成了多少个周期，比如你跳绳1分钟跳了120个，一秒钟2个，你跳绳的频率就是2 Hz。既然谈到了G，就在这里说一下计算机的计数方法吧。</p>\n<p>&emsp; 常见的计算机数量单位从小到大可分为 b(小写) B(大写) KB MB GB TB PB … 可能有很多朋友看到网络带宽的广告写着可以达到100Mbps（这里的ps是per second的意思就是/s的英文说法）认为一秒钟最快可以下载100MB的数据，然而实际上最快也不过12MB/s多一点，这就是大写B和小写b的区别，大写B是Byte （字节）的缩写，而小写b是 bit（比特，也就是一个二进制位）的缩写，按照规定 8 个bit位表示一个Byte字节，也就是 8 bits = 1 Byte ，所以100Mb = 12.5 MB ，8 秒才能下载100MB的数据，至于KB ，K在英语是kilo的缩写，在汉语中就是千的意思，然而实际上，1 KB = 1024 B ，也就是说，这并不是十进制的千，那这1024怎么出来的呢？（我知道有的人一看到1024就兴奋。。。别那么明显，2333），如果你还记得二进制的内容，那么你可以计算一下 2 的 10 次方，你会发现这正好是1024，所以实际上1 KB = 2 ^ 10 B，同理 1 MB = 2 ^ 10 KB ， 1 GB = 2 ^ 10 MB…..<br>实际上并不是只有这些单位，根据摩尔定律，存储容量会越来越大。（当然，根据物理学角度，单位存储容量最后会达到一个定值。）</p>\n<p>&emsp; 说完了单位换算，我们可以继续回到这个GHz的问题了，现在你知道这个GHz就是CPU在一秒内完成了某个周期多少G次，实际上这个周期就是CPU周期，就是处理器执行一条指令所用的时间，当然这个指令不是指任何指令，而是CPU内部的指令，我们写的程序最终都会被翻译成这样的指令。不同的处理器这种内部指令是不同的，这也造成了手机和电脑处理器的差异，电脑的处理器是通用处理器，很多复杂的运算可以在一个CPU周期内完成，手机的处理器是RISC类处理器，精简了很多内部指令，这样的好处是，处理器的尺寸，功耗都可以大规模减小，弊端就是，电脑处理器一个CPU周期内完成的运算，手机处理器需要调用几种内部指令来进行“等效”，这样性能就被大打折扣，所以，不要幻想着手机处理器吊打电脑处理器了，就算现在的手机处理器发展很快，可是电脑处理器也在不断发展啊。</p>\n<p>&emsp; 还有一个问题，就是核心数和线程。先说说核心数：随着激光技术的进步，芯片生产工艺越来越高，这意味着我们可以在与原来同尺寸的处理器里面放入更多的元件，但随着发展的深入，人们发现时钟频率已经发展到了一个水平，进一步的提升需要很高的成本提升却很少，于是乎“多核心”这个概念进入了人们的视野，为什么不在一个处理器的空间中装入“更多的处理器”呢？由此，多核处理器就诞生了。</p>\n<p>&emsp; 事实上，在多核处理器出现之前，就已经有在一个主板上安装多个处理器的技术了。多核心处理器实际上与这类似，理论上，多核心处理器的运算性能可以达到单核心的2倍，然而由于程序编写的问题，以及其他硬件的制约，往往只能提升到原来的70%，但是，多核在很大成都上增加了计算机的处理速度，比如说，在以前的单核心处理器上，计算机在一个处理器周期内只能处理一个指令，也就是只能做一种工作，比如，一个处理器只能对音频文件进行解码，而不能做其他操作，你不能同时进行文字处理。不过事实上，在单核处理器流行的时候，人们也可以通过计算机进行多任务操作，可以一般听音乐一边进行文字处理，这是因为计算机的处理速度很快，可以通过在不同的程序之间快速切换来实现多任务。但处理器的速度就那么大，也许做一些简单的工作的时候，没有感觉到性能不足，假设你同时复制两个文件呢，速度会是复制一个文件的两倍么？</p>\n<p>&emsp; 但多核处理器可以在与软件良好结合的情况下，处理这些多任务问题，所以更多的核心理论上可以提供更强的运算能力，但实际上能力的发挥不仅仅取决于处理器，还需要软硬件之间的协调。</p>\n<p>&emsp; 下面说一说线程，线程实际上是一个复杂的概念，如果以现在所学的知识理解就是一个运行中的程序（不过实际上程序可以有很多线程），运行中的程序也被成为进程，实际上线程就是进程的实际运作单位。</p>\n<p>&emsp; 我们在上面知道在任意一个时刻，CPU的一个核心只能运行一个进程，处理器中又有很多的运算单元，这个进程会使用其中一些运算单元进行一些运算工作，这些被使用的，正在工作的运算单元就是线程，如果把处理器看作一个工厂，进程就是工厂的客户，要求工厂做一些工作，工厂里面有很多工人，其中一些去完成这个客户的需求，这些工人就是线程。<br>所以大多数处理器内核数是等于线程数的，也就是某一时刻处理器最多可以完成的工作数量。</p>\n<p>&emsp; 但是从上面不难看出，无论是处理器的运算单元，还是工厂里面的工人，总会有闲着的，万恶的资本家看到心里这个难受啊！！！所以万恶的资本主义科学家（哈哈哈哈，我自己都笑了）发明了超线程技术，就是如果在某一时刻，其他的进程需要的运算单元正好处于空闲状态的时候，可以同时进行运算，这样一个工厂做了两个工作，但是却没有增加内核的数量，利用了空闲的资源。不过实际上，由于程序算法的复杂性，超线程技术并不是很好用。而且市面上支持超线程的处理器比较少，低端的有atom类的处理器，单核心双线程，高端的有i7处理器一般都是四核心八线程，马上，下面要划重点了！！！</p>\n<p>&emsp; 有很多电脑城的JS（奸商）用超线程的处理器冒充多核处理器，比如原本四核心的处理器说是八核心的，由于超线程本质是同一个核心，所以在任务管理器的CPU占用率页面，同一核心的资源占用率是相同的，很容易就看出来，曲线都是一样的。所以。。。。当然了，个人觉得买电脑，没必要去实体店。关于选购电脑这个以后再说吧。</p>\n<h2 id=\"硬盘：懒惰娇贵又忠诚的史官\"><a href=\"#硬盘：懒惰娇贵又忠诚的史官\" class=\"headerlink\" title=\"硬盘：懒惰娇贵又忠诚的史官\"></a>硬盘：懒惰娇贵又忠诚的史官</h2><p>&emsp; 本来想先将内存的，但是想了想，还是先聊聊硬盘吧，然后在说说内存和缓存。</p>\n<p>&emsp; 硬盘，有一些对计算机有一些浅显了解的人，觉得硬盘就是外存或者ROM，觉得外存和ROM就是硬盘，然而事实上并不是这样，尤其是一些手机上面宣传的ROM就更说不过去了。</p>\n<p>&emsp; 按照惯例，我吐槽完就该说点干货了，那么，什么是硬盘呢？为什么我给它这么一个绕嘴的拟人呢？因为这很符合它啊～且听我慢慢道来。</p>\n<p>&emsp; 上节在介绍二进制的时候我说过，硬盘是通过磁性物质的磁极排列来存储数据的，但是这只是硬盘主要功能的一个抽象。实际上，硬盘是我们大多数数据的“家”，我们想要保留的数据最终都被存到了以硬盘为首的“外存”设备中了。</p>\n<p>&emsp; 先说说为啥我说它“懒”，其实我也挺惭愧的，怎么能有比我懒的人，更何况这是一个机器！这个懒是相对说的，相对于我们么？当然不是，目前的常见的硬盘（SATA3 标准 7200转速的硬盘）一分钟记录的内容，不知道我们要记多久呢。所以这个“懒”是相对与计算机的某个硬件来说的，是什么呢？当然是我们唯一学习的一个硬件CPU了～ 我们知道处理器的执行速率已经到达了GHZ的程度，实际上这个速度在多年前，单核心处理器的时候就已经达到了，何况现在都是多核心处理器。（当然了，就算CPU满载每秒钟处理几G条处理器指令，也不意味着这些指令都来自硬盘，就是说，他们不是一一对应的关系，就好比，让一个人计算12的阶乘，题目很简单，但是需要很多次运算（执行很多指令），题目很短（程序很小），因为阶乘的方法（就好比处理器的计算单元）已经在人的脑中。）然而目前主流的SATA 3.0标准最大传输速度也不过600MB/s，也就是说如果处理器在运算的时候突然要从硬盘查点数据，按照处理器的急性子，它都要急死了，所以它很懒，正因为如此，为了解决CPU和硬盘之间巨大的速度落差，人们增加了“内存”这个中间介质，来缓冲。</p>\n<p>&emsp; 然后再说说为啥它娇贵。因为硬盘是园的（实际上只是盘片是园的，这个下节再说），这不由得让人想到唱机。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://img.guitarchina.com/img2016/0129ty/45.jpg\" alt=\"唱机\" title=\"\">\n                </div>\n                <div class=\"image-caption\">唱机</div>\n            </figure>\n<p>（图自<a href=\"http://img.guitarchina.com/img2016/0129ty/45.jpg）\" target=\"_blank\" rel=\"external\">http://img.guitarchina.com/img2016/0129ty/45.jpg）</a></p>\n<p>&emsp; 硬盘实际上也是类似的原理，只不过磁头和盘片是不接触的，盘片在高速的旋转，常见的有每分钟5400 转每秒，或者7200 有的甚至可以达到1万以上，所以在硬盘运行的过程中，晃动 震动或者抖动都会导致磁头和盘片接触，然后就，噗次卡嚓，稀里哗啦….额，你们脑补一下车祸现场吧…….然后硬盘就挂掉了，所以它很娇贵。</p>\n<p>&emsp; 至于忠诚嘛。虽然硬盘这么娇贵，然而实际上，硬盘是最可靠且安全的存储媒介，你们肯定不知道，其实你们手机里面的数据长时间不通电使用，数据是会慢慢消失的，而且超不过十年！同时大多数存储设备，比如SD卡（包括不仅限于MicroSD SDHC SDXC），可擦写的光盘，u盘（也有叫闪存盘的）都是有读写次数寿命的，一般几千次到几百万次不等。但是硬盘却可以在正常家用的情况下使用十余年不出现损坏的情况（大多数），而且数据也不会丢失，所以它绝对够忠诚！</p>\n<p>&emsp; 至于史官嘛，硬盘记录了你很多的信息，如果进行数据挖掘，你用了多久电脑都可以看出来，暂且不说这些，你平常下载到电脑的视频图像，音频文档，都是保存在硬盘的。所以这个官分给再在合适不过了。</p>\n<p>&emsp; 这就是硬盘的简单描述，其实说了这么多啥也没讲，连个硬盘的图都没有，我写的时候也考虑过这个问题，这节就是给大家简单的建立一个电脑各硬件的概念，至于深入的研究，我们在下节课探讨。</p>\n<h2 id=\"内存：勤劳的坏脑子\"><a href=\"#内存：勤劳的坏脑子\" class=\"headerlink\" title=\"内存：勤劳的坏脑子\"></a>内存：勤劳的坏脑子</h2><p>&emsp; 说到内存，我感觉我就和它一样，勤劳！哦，不是，我和它一样记性不好……..</p>\n<p>&emsp; 内存，上面说过是为了解决CPU和硬盘之间巨大的速度（也可以说成是性能）落差而安装到电脑上的中间介质，这也就意味着它有两个显而易见的特性：</p>\n<ul>\n<li>速度快.</li>\n<li><p>实际不具有存储数据的功能.</p>\n<p>&emsp; 内存实际上是很多设备的统称，实际上内存是内部存储器的说法，但是在应用中，为了方便表述我们的内存就是解决CPU和硬盘之间巨大的速度落差的硬件，也就是常说的内存条，也是常说的RAM。</p>\n</li>\n</ul>\n<p>&emsp; 似乎又到了英语课的时间，上课之前闲扯一会吧～ 英语，我觉得计算机科学中最重要的知识，涉足这个领域，可能你最开始对数学了解不多，可能未接触过线性代数，但是，一定不能让英语成为你的短板，学会了英语就掌握了获取新的信息和知识的钥匙，就算数学类学科限制了你的研究，你也可以很快在一些渠道找到学习的资料，这些资料往往是英文的。你可能会说，我可以找中文版啊。这的确是个方便的方法，但，你如何保证翻译的准确性和正确性呢？同时，有一点我不得不说的，虽然，我在开头介绍计算机的时候，根据字典的意思，翻译过来，介绍计算机，但是我并不建议把所有的计算机术语都翻译成中文，因为实际上很多术语就是来自于生活中的英文单词，幽默风趣又浪漫的外国科学家给他们的新理论，新功能赋予了一个和它们相似的生活中的词语，然而我们翻译要讲究信达雅，有时候甚至歪曲了本意，造成很多国内的资料看起来晦涩难懂。之所以我用了翻译的方法介绍计算机，只不过是一个引子的作用，而且在以后的内容中，我也只会解释一些有清晰意思的英文术语。</p>\n<p> &emsp; RAM : Random-Access Memory 是随机访问存储器的缩写，之所以是随机的，是在程序进行请求的时候的内存地址是随机的，这个在讲解指针的内容会具体说明，我们简单的说说内存吧！</p>\n<p>&emsp; 前面说过，指令是存在内存里面的，所以，实际上，当你运行一个程序的时候，程序被从硬盘读出，复制到内存中（这个过程就是传说中的加载，也是英文给枪装弹的load的意思），然后处理器从内存中读取指令和所需的数据，这里不得不提到大名鼎鼎的 冯 诺依曼 体系 了，在前面的内容中，我总是说，内存里面包含指令和数据，你可能在想（很可能你根本没注意到）指令和数据是不是互相分离的，并且有专门的办法区分，当然有办法区分，不然我为什么说是指令和数据，但是只是对于人来说，就算程序可以区分指令和数据，那也是人编程的结果，实际上，对于计算机，指令和数据是没有区别的，都只是一堆二进制位罢了，这就是冯诺依曼体系，对于计算机，数据和指令是没有区别的，处理器通过特殊的寄存器（一种特殊的存储数据的结构），来确定要执行指令的在内存中的位置。这个体系造就了计算机，同时这个体系也给计算机造成了无穷无尽的灾难–漏洞，就是因为数据和指令的无区别性，可以通过一些特殊方法让恶意构造的数据被当作指令执行，从而在系统中打开后门。</p>\n<p>&emsp; 不过，你可能很好奇，我下载的十多个甚至几十GB的游戏，运行的时候也没有装满我几个G的内存啊！当然不会装满，首先，你运行的游戏程序并不是很大，加载的只是这个主程序和一些必要的资源文件。其次，这类程序通常有很高级的内存管理机制，可以动态的使用和释放内存，而不是一次性都加载到内存中。所以几个G的内存并不会完全被很大的程序占满。</p>\n<p>&emsp; 之前我们说过，内存是为了解决硬盘和处理器之间巨大的性能落差而增设的。那么，内存的速度够和处理器平起平坐了么？当然不够！不然，为什么还有一个我还没有提及的缓存的存在？所以，缓存是什么？可能有一些机智的读者已经猜到了。对，它就是解决处理器和内存之间的性能落差的。缓存通常很小，但速度很快，被封装在内存中用于存储一些急需访问的数据。这个以后有机会再详细的说一说吧～</p>\n<h2 id=\"显卡-：热爱三角形和并行运算的计算狂魔\"><a href=\"#显卡-：热爱三角形和并行运算的计算狂魔\" class=\"headerlink\" title=\"显卡 ：热爱三角形和并行运算的计算狂魔\"></a>显卡 ：热爱三角形和并行运算的计算狂魔</h2><p>&emsp; 很多人都知道GPU或者显卡，并且知道这个东西是计算机或者手机平板之类设备游戏性能的主要贡献者。但是却不知道它究竟是何物。下面我们就来揭开显卡神秘的面纱吧～</p>\n<p>&emsp; 显卡(Graphics card) 准确来说应该是 图形显示卡，是一直安装在计算机主板（稍后会提到）上的一种显示信息转换从而驱动显示器显示信息的设备。这也是显卡最开始被发明的目的：在终端命令行界面发展到一定程度之后，出现了图形化的界面，然而CPU的处理能力不足以支持可视化界面的渲染，所以科学家发明了最早的显卡–“图形加速卡”，后来随着芯片的制作工艺的发展，显卡的发展空间也越来越大，由此出现了“3D加速卡” 等更大处理能力的显卡。</p>\n<p>&emsp; 所以，你可能要问：显卡是不是可以取代CPU？目前来讲不太可能（只是目前来讲，谁知道未来会发展成什么鬼样子）这就得说说GPU了，就是显卡的“CPU”（当然这种说法不正确，只是一种比喻），GPU （graphics processing unit） 图形处理器，GPU使显卡减少了对CPU的依赖，并分担了部分原本是由CPU所担当的工作，尤其是在进行3D图形运算的时候。GPU就是显卡的运算核心，至少从1999年8月NVIDIA公司发布Geforce 256之后到今天已经一段时间之内是这样，简单来说目前的显卡就是GPU和显存（显卡专用的内存，性能往往比同时期的内存高很多）还有风扇之类的散热器还有一些负责图像输出之类的芯片和电路组成的。</p>\n<p>&emsp; 正因如此，显卡不仅仅以“卡”的形式存在，比如现在的超级本或者手机平板，都有很强的图像处理能力，然而这些设备的尺寸都不足以容纳一张显卡。因为这些设备的“显卡”或者说图形运算设备，都是集成的，或者常说的板载的，也有说是集显（实际上这只是针对超级本或者一些笔记本，平板和手机并不是这样的），这些设备的GPU被集成到了主板上，集成<br>的好处就是，可以大幅度的减小设备的尺寸，但是目前，因为我们还没能实现让某一事物尽善尽美，所以这样做也是有很大代价的，就是GPU的性能被缩水，而且由于没有足够的空间放置显存（当然我这是比较委婉的说法，大多数的真实情况是为了节约成本），通常GPU的显存由系统的内存共享，就是分出一部分的内存给显卡当作显存，这样不仅仅制约了GPU性能的发挥（实际上这个制约不是很大，因为集成的GPU本身的性能就不是很强），同时由于需要共享内存，使得系统实际的内存被减少，同时集成以为着永久固定在电路板上，除非更换整块主板，不然没有办法升级显示核心。</p>\n<p>&emsp; 当然还有一种新的GPU存在形式，就是把GPU和CPU做在一起，现在很多的低端电脑都是采用这种方案。手机平板几乎都是采用这种方案，这种封装方式的显卡被称为“核显”。</p>\n<p>&emsp;  回到刚才的问题：为什么目前GPU没办法替代CPU，因为GPU也是一种RISC，并不是为通用计算设计的。所以目前GPU，并不能完全做CPU的工作，但是GPU不同于CPU，具有数百或者数千个处理单元（内核），可以并行运算大量计算。</p>\n<p>&emsp; GPU因为在游戏中的3D渲染而出名，这里就简单说一下游戏的渲染，其实，显卡的3D渲染就是在快速的生成大量的三角形，密密麻麻的三角形，组成了我们看到的各种各样的具有立体感的画面，同时GPU在数据分析，深度学习，机器学习也有得天独厚的优势，GPU允许某些计算比传统CPU上运行相同的计算速度快10倍至100倍.</p>\n<h2 id=\"声卡：电子“金嗓子”\"><a href=\"#声卡：电子“金嗓子”\" class=\"headerlink\" title=\"声卡：电子“金嗓子”\"></a>声卡：电子“金嗓子”</h2><p>&emsp; 啊！我知道，我的小标题起的越来越老土了，甚至还有打广告的嫌疑（竟然被发现了，咳咳….）不过我的确暂时想不到更好的简述了。</p>\n<p>&emsp; 言归正传，声卡，一个经常被人们忽视的设备，我，作为一个HiFi发烧友，对声卡的依赖性就像猫奴吸猫一样，一日不吸，整天都没有好状态。除了睡觉之外的任何工作我都离不开音乐，虽然在焊接这类危险工作的时候要尽量保证安静，但我还是在动次打次…..</p>\n<p>&emsp; 声卡之所以被人忽视是因为，就像耳机一样，声卡的价格可以从十几元的白菜价到几百，几千，几万甚至几十万的天价。如果只是听个响，大部分设备，诸如电脑，手机，平板都有板载的集成声卡，大部分计算机主板都集成了AC97兼容声卡，所以，很多人似乎认为拥有音频的输入输出是计算机本来就有的功能。</p>\n<p>&emsp; 然而事实并非如此，就和显卡一样，标准的声卡也是一种插在主板上的板卡，声卡主要负责对音频的处理，简单来说，声卡是一种封装了ADC和DAC的板卡，当然了这个ADC和联盟这些类Dota游戏里面的ADC可不是一个东西，这里的ADC是analog digital convert 模拟-数字 转换也就是传说中的模数转换，模拟信号就是生活中的信号，比如声音，声音的变化可以连续的被记录在电流中，也就是用电流模拟声音的变化。但是数字信号是非线性的，只有1和0两个状态，所以，需要进行转换，这就是ADC，通常ADC负责录音。至于DAC，就是数模转换了，简单来说就是把音频文件中的数字信号转换<br>成驱动音响的模拟信号（电信号），通过音响内部的信号放大电路处理之后，你就可以听到声音了。</p>\n<p>&emsp; 实际上，早期的声卡集成了游戏控制器的接口，也就是接驳手柄一类设备的接口。综上，就是声卡的全部了，当然这也是一个抽象的声卡。（笑）</p>\n<h2 id=\"网卡-和声卡一样的幕后英雄\"><a href=\"#网卡-和声卡一样的幕后英雄\" class=\"headerlink\" title=\"网卡:和声卡一样的幕后英雄\"></a>网卡:和声卡一样的幕后英雄</h2><p>&emsp; 网卡，就和声卡一样，很多人都觉得是计算机本来就提供的功能，因为它和声卡一样，早就被板载了，很少有人再去购买独立网卡了，网卡，很容易猜到它的意思，就是提供计算机联网功能的设备，网卡其实也是有很大学问的，网卡的接口决定了网速，或者无线网卡的一些协议都会影响网络速度。因为目前广泛被集成的有线网卡都是千兆速率的（也是小b），所以就不细说了~</p>\n<h2 id=\"主板-热情的东北人\"><a href=\"#主板-热情的东北人\" class=\"headerlink\" title=\"主板:热情的东北人\"></a>主板:热情的东北人</h2><p>&emsp; 啊！我感觉很多人觉得我在开地图炮了，当然，如果你这么觉得，请在当前浏览器按下ctrl + w 然后别再来这个网站了。如果你觉得我是在引用一个巧妙的比喻（可能并不巧妙），那么让我们继续聊天吧～</p>\n<p>&emsp; 终于到了我们晦涩难懂又枯燥无味的抽象介绍的最后一位了，当然，我说的是这些设备，并不是我，哈哈。</p>\n<p>&emsp; 那么，主板到底是什么呢？根据我上面的描述，似乎所有东西都插或者接驳在主板上。事实正是如此，差不多所有的计算机硬件设备都要与主板连接，主板在英文中写作MotherBoard，所以你也可以叫它母版，不过无所谓了，主板在计算机中责任重大，不仅板载集成了好多设备，还包含 南桥 和 北桥芯片 来沟通处理器和内存以及各种板卡设备，同时拥有很多的接口，各种电源接口（用来给主板供电，同时也提供了为各种设备，如硬盘，显卡这类设备供电的接口），各种按键接口（比如开机键，重启键），各种设备接口，比如硬盘接口（IDE SATA SCSI等）或者各种板卡接口（显卡接口PCI-E,声卡接口PCI 都是常用接口，并不是绝对的）。总得来说，计算机的设备通过与主板连接，主板提供了不同设备数据交换的通道，同时给大部分设备供能，也可以通过主板的一些设置调节系统的一些参数。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>&emsp; 啊哈，又见面了。很有趣的标题：潘多拉魔盒。计算机有那么可怕么？当然了！年轻人千万不要碰的就是：吸烟，喝酒，吸毒，编程，单反和HiFi了。（笑cry）</p>\n<p>&emsp; 俗话说：单反穷三代，编程毁一生。作为一个喜欢摄影，又热爱编程，还特别喜欢在耳机，解码器，耳放这类HiFi设备上面烧钱的我来说，简直就是感同身受。不过好在我并不是一个纯粹的程序员（不然你们也见不到这个项目了），也不是一个纯粹的摄影家，也不是一个纯粹的音乐制作人，也不是一个纯粹的DJ，也不是一个纯粹的人…….(咳咳，打住，打住！)</p>\n<p>&emsp; 所以说，电脑就是一个潘多拉魔盒，打开它就给我们带来无穷无尽的……………..快乐！！！谁让它那么好玩的，至于什么近视了，还有辐射了，这都无所谓了（PS：其实这些都是玄学，23333，懂一点科学的人就知道这些是真的还是假的，为了不被喷，我就不明说了，不过颈椎病这个是真的。。。）。</p>\n<p>&emsp; 所以，接下来，我们就要打开，不，拆开，这个潘多拉魔盒了！</p>\n<h1 id=\"打开潘多拉魔盒\"><a href=\"#打开潘多拉魔盒\" class=\"headerlink\" title=\"打开潘多拉魔盒\"></a>打开潘多拉魔盒</h1><h2 id=\"乱入的黑箱\"><a href=\"#乱入的黑箱\" class=\"headerlink\" title=\"乱入的黑箱\"></a>乱入的黑箱</h2><p>&emsp; 在开始之前，我想向大家介绍一下“黑箱”这个概念，为什么要介绍这个乱入的概念呢？因为我们平常使用的电脑（可能有人会发现我计算机和电脑换来换去的，在需要正规用计算机的地方我会用计算机，在闲谈的时候我就看心情。。），手机或者平板，都是黑箱：我们并不知道它们内部长什么样，也不理解它们是怎么运行的，但并不影响我们使用它们，这就是黑箱。</p>\n<p>&emsp; 简单说，黑箱就是一种装置或者设备，我们在不了解内部构造，也不理解其内部运行原理的时候，也可以无障碍的控制和使用。</p>\n<h2 id=\"上节回顾\"><a href=\"#上节回顾\" class=\"headerlink\" title=\"上节回顾\"></a>上节回顾</h2><p>&emsp; 上一节，我们从词典的角度，认识了计算机。这是一种纯粹（又TM说纯粹！！！）的计算机 ：以二进制形式，根据程序的指令，存储和处理数据的一种电子设备。这只是对计算机原理的基本功能的描述。这也是计算机最开始被发明的目的：进行<strong>运算</strong>。</p>\n<p>&emsp; 那么，计算机是通过什么来进行计算的呢？</p>\n<h2 id=\"CPU：计算机的运算核心\"><a href=\"#CPU：计算机的运算核心\" class=\"headerlink\" title=\"CPU：计算机的运算核心\"></a>CPU：计算机的运算核心</h2><p>&emsp; 随着这几年某些国产手机品牌大打“<strong>性能牌</strong>”，大家可能会对处理器，内存这些名词有一些概念，不过我敢保证，你看完本章（不是本节），你就知道这些你们天天跪舔的一些国产机厂商是怎么忽悠你们的了！！（我知道我写这一句话之后，会有很多人喷我，不过无所谓，我就是要写出来。）</p>\n<p>&emsp; 提到计算机的计算功能，就不能不提到CPU，（即 Central Processing Unit）中央处理器，也经常被简称成处理器。</p>\n<p>&emsp; 什么是处理器呢？</p>\n<p>&emsp; 简单来说，处理器是一种黑箱，是一种按照人的意愿进行特定计算的计算机元件。之所以叫元件，因为它并不能独立工作。（实际上计算机中大部分的元件，或者说是硬件，都没办法独立工作，所以在维修硬件问题的时候会搭建“最小系统”这类环境，让一些必须工作的硬件工作，测试系统是否正常。）</p>\n<p>&emsp; 为什么处理器不能独立工作呢？这就需要对它的原理有一定了解，首先，因为我们本阶段并不会实际的对CPU进行操作（虽然每一行我们写的代码都需要CPU处理，但是我们并没有真正的去控制CPU，这都是C，编译器，系统帮我们实现的），所以我不会过于深入的介绍CPU的原理。</p>\n<p>&emsp; 关于处理器的原理，处理器的英文缩写 CPU 是 Central Processing Unit 的缩写，这里面出现了Unit，实际上CPU就是由很多单元组成的。下图（来源：<a href=\"http://www.webopedia.com/TERM/C/CPU.html）就展示了CPU的基本结构。\">http://www.webopedia.com/TERM/C/CPU.html）就展示了CPU的基本结构。</a><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://www.webopedia.com/imagesvr_ce/4966/cpu-diagram.gif\" alt=\"CPU结构\" title=\"\">\n                </div>\n                <div class=\"image-caption\">CPU结构</div>\n            </figure></p>\n<p>&emsp; CPU是一种分层结构，在上层，运算和控制层，分为ALU和CU，分别是逻辑运算单元和控制单元，逻辑运算单元负责一些计算工作，控制单元负责把内存中的指令解码和执行，并且在必要的时候调用ALU，下面是内存单元内存单元包括RAM，ROM和cache，事实上，CPU只包含cache，但是可以通过一些方法控制这三者。RAM和ROM会在后面讲解，cache如果有必要会简单说一下。</p>\n<p>&emsp; 看了上面一堆，可能你并不清楚究竟发生了什么，如果还要简单来说的话，那就是CPU主要是从内存读取数据和指令，然后进行运算后再传回内存的一种计算机硬件，看到这里你可能很惊讶，我下载的软件实际上是在硬盘啊，并不是内存啊！这个，等我们了解了硬盘和内存之后就明白了。</p>\n<p>&emsp; 虽然了解了CPU的基本原理，可是我们并不知道各种宣传中所谓的GHz这个概念，这个概念很好理解（简单理解），Hz是频率的单位，频率就是1s钟内某种活动完成了多少个周期，比如你跳绳1分钟跳了120个，一秒钟2个，你跳绳的频率就是2 Hz。既然谈到了G，就在这里说一下计算机的计数方法吧。</p>\n<p>&emsp; 常见的计算机数量单位从小到大可分为 b(小写) B(大写) KB MB GB TB PB … 可能有很多朋友看到网络带宽的广告写着可以达到100Mbps（这里的ps是per second的意思就是/s的英文说法）认为一秒钟最快可以下载100MB的数据，然而实际上最快也不过12MB/s多一点，这就是大写B和小写b的区别，大写B是Byte （字节）的缩写，而小写b是 bit（比特，也就是一个二进制位）的缩写，按照规定 8 个bit位表示一个Byte字节，也就是 8 bits = 1 Byte ，所以100Mb = 12.5 MB ，8 秒才能下载100MB的数据，至于KB ，K在英语是kilo的缩写，在汉语中就是千的意思，然而实际上，1 KB = 1024 B ，也就是说，这并不是十进制的千，那这1024怎么出来的呢？（我知道有的人一看到1024就兴奋。。。别那么明显，2333），如果你还记得二进制的内容，那么你可以计算一下 2 的 10 次方，你会发现这正好是1024，所以实际上1 KB = 2 ^ 10 B，同理 1 MB = 2 ^ 10 KB ， 1 GB = 2 ^ 10 MB…..<br>实际上并不是只有这些单位，根据摩尔定律，存储容量会越来越大。（当然，根据物理学角度，单位存储容量最后会达到一个定值。）</p>\n<p>&emsp; 说完了单位换算，我们可以继续回到这个GHz的问题了，现在你知道这个GHz就是CPU在一秒内完成了某个周期多少G次，实际上这个周期就是CPU周期，就是处理器执行一条指令所用的时间，当然这个指令不是指任何指令，而是CPU内部的指令，我们写的程序最终都会被翻译成这样的指令。不同的处理器这种内部指令是不同的，这也造成了手机和电脑处理器的差异，电脑的处理器是通用处理器，很多复杂的运算可以在一个CPU周期内完成，手机的处理器是RISC类处理器，精简了很多内部指令，这样的好处是，处理器的尺寸，功耗都可以大规模减小，弊端就是，电脑处理器一个CPU周期内完成的运算，手机处理器需要调用几种内部指令来进行“等效”，这样性能就被大打折扣，所以，不要幻想着手机处理器吊打电脑处理器了，就算现在的手机处理器发展很快，可是电脑处理器也在不断发展啊。</p>\n<p>&emsp; 还有一个问题，就是核心数和线程。先说说核心数：随着激光技术的进步，芯片生产工艺越来越高，这意味着我们可以在与原来同尺寸的处理器里面放入更多的元件，但随着发展的深入，人们发现时钟频率已经发展到了一个水平，进一步的提升需要很高的成本提升却很少，于是乎“多核心”这个概念进入了人们的视野，为什么不在一个处理器的空间中装入“更多的处理器”呢？由此，多核处理器就诞生了。</p>\n<p>&emsp; 事实上，在多核处理器出现之前，就已经有在一个主板上安装多个处理器的技术了。多核心处理器实际上与这类似，理论上，多核心处理器的运算性能可以达到单核心的2倍，然而由于程序编写的问题，以及其他硬件的制约，往往只能提升到原来的70%，但是，多核在很大成都上增加了计算机的处理速度，比如说，在以前的单核心处理器上，计算机在一个处理器周期内只能处理一个指令，也就是只能做一种工作，比如，一个处理器只能对音频文件进行解码，而不能做其他操作，你不能同时进行文字处理。不过事实上，在单核处理器流行的时候，人们也可以通过计算机进行多任务操作，可以一般听音乐一边进行文字处理，这是因为计算机的处理速度很快，可以通过在不同的程序之间快速切换来实现多任务。但处理器的速度就那么大，也许做一些简单的工作的时候，没有感觉到性能不足，假设你同时复制两个文件呢，速度会是复制一个文件的两倍么？</p>\n<p>&emsp; 但多核处理器可以在与软件良好结合的情况下，处理这些多任务问题，所以更多的核心理论上可以提供更强的运算能力，但实际上能力的发挥不仅仅取决于处理器，还需要软硬件之间的协调。</p>\n<p>&emsp; 下面说一说线程，线程实际上是一个复杂的概念，如果以现在所学的知识理解就是一个运行中的程序（不过实际上程序可以有很多线程），运行中的程序也被成为进程，实际上线程就是进程的实际运作单位。</p>\n<p>&emsp; 我们在上面知道在任意一个时刻，CPU的一个核心只能运行一个进程，处理器中又有很多的运算单元，这个进程会使用其中一些运算单元进行一些运算工作，这些被使用的，正在工作的运算单元就是线程，如果把处理器看作一个工厂，进程就是工厂的客户，要求工厂做一些工作，工厂里面有很多工人，其中一些去完成这个客户的需求，这些工人就是线程。<br>所以大多数处理器内核数是等于线程数的，也就是某一时刻处理器最多可以完成的工作数量。</p>\n<p>&emsp; 但是从上面不难看出，无论是处理器的运算单元，还是工厂里面的工人，总会有闲着的，万恶的资本家看到心里这个难受啊！！！所以万恶的资本主义科学家（哈哈哈哈，我自己都笑了）发明了超线程技术，就是如果在某一时刻，其他的进程需要的运算单元正好处于空闲状态的时候，可以同时进行运算，这样一个工厂做了两个工作，但是却没有增加内核的数量，利用了空闲的资源。不过实际上，由于程序算法的复杂性，超线程技术并不是很好用。而且市面上支持超线程的处理器比较少，低端的有atom类的处理器，单核心双线程，高端的有i7处理器一般都是四核心八线程，马上，下面要划重点了！！！</p>\n<p>&emsp; 有很多电脑城的JS（奸商）用超线程的处理器冒充多核处理器，比如原本四核心的处理器说是八核心的，由于超线程本质是同一个核心，所以在任务管理器的CPU占用率页面，同一核心的资源占用率是相同的，很容易就看出来，曲线都是一样的。所以。。。。当然了，个人觉得买电脑，没必要去实体店。关于选购电脑这个以后再说吧。</p>\n<h2 id=\"硬盘：懒惰娇贵又忠诚的史官\"><a href=\"#硬盘：懒惰娇贵又忠诚的史官\" class=\"headerlink\" title=\"硬盘：懒惰娇贵又忠诚的史官\"></a>硬盘：懒惰娇贵又忠诚的史官</h2><p>&emsp; 本来想先将内存的，但是想了想，还是先聊聊硬盘吧，然后在说说内存和缓存。</p>\n<p>&emsp; 硬盘，有一些对计算机有一些浅显了解的人，觉得硬盘就是外存或者ROM，觉得外存和ROM就是硬盘，然而事实上并不是这样，尤其是一些手机上面宣传的ROM就更说不过去了。</p>\n<p>&emsp; 按照惯例，我吐槽完就该说点干货了，那么，什么是硬盘呢？为什么我给它这么一个绕嘴的拟人呢？因为这很符合它啊～且听我慢慢道来。</p>\n<p>&emsp; 上节在介绍二进制的时候我说过，硬盘是通过磁性物质的磁极排列来存储数据的，但是这只是硬盘主要功能的一个抽象。实际上，硬盘是我们大多数数据的“家”，我们想要保留的数据最终都被存到了以硬盘为首的“外存”设备中了。</p>\n<p>&emsp; 先说说为啥我说它“懒”，其实我也挺惭愧的，怎么能有比我懒的人，更何况这是一个机器！这个懒是相对说的，相对于我们么？当然不是，目前的常见的硬盘（SATA3 标准 7200转速的硬盘）一分钟记录的内容，不知道我们要记多久呢。所以这个“懒”是相对与计算机的某个硬件来说的，是什么呢？当然是我们唯一学习的一个硬件CPU了～ 我们知道处理器的执行速率已经到达了GHZ的程度，实际上这个速度在多年前，单核心处理器的时候就已经达到了，何况现在都是多核心处理器。（当然了，就算CPU满载每秒钟处理几G条处理器指令，也不意味着这些指令都来自硬盘，就是说，他们不是一一对应的关系，就好比，让一个人计算12的阶乘，题目很简单，但是需要很多次运算（执行很多指令），题目很短（程序很小），因为阶乘的方法（就好比处理器的计算单元）已经在人的脑中。）然而目前主流的SATA 3.0标准最大传输速度也不过600MB/s，也就是说如果处理器在运算的时候突然要从硬盘查点数据，按照处理器的急性子，它都要急死了，所以它很懒，正因为如此，为了解决CPU和硬盘之间巨大的速度落差，人们增加了“内存”这个中间介质，来缓冲。</p>\n<p>&emsp; 然后再说说为啥它娇贵。因为硬盘是园的（实际上只是盘片是园的，这个下节再说），这不由得让人想到唱机。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://img.guitarchina.com/img2016/0129ty/45.jpg\" alt=\"唱机\" title=\"\">\n                </div>\n                <div class=\"image-caption\">唱机</div>\n            </figure>\n<p>（图自<a href=\"http://img.guitarchina.com/img2016/0129ty/45.jpg）\">http://img.guitarchina.com/img2016/0129ty/45.jpg）</a></p>\n<p>&emsp; 硬盘实际上也是类似的原理，只不过磁头和盘片是不接触的，盘片在高速的旋转，常见的有每分钟5400 转每秒，或者7200 有的甚至可以达到1万以上，所以在硬盘运行的过程中，晃动 震动或者抖动都会导致磁头和盘片接触，然后就，噗次卡嚓，稀里哗啦….额，你们脑补一下车祸现场吧…….然后硬盘就挂掉了，所以它很娇贵。</p>\n<p>&emsp; 至于忠诚嘛。虽然硬盘这么娇贵，然而实际上，硬盘是最可靠且安全的存储媒介，你们肯定不知道，其实你们手机里面的数据长时间不通电使用，数据是会慢慢消失的，而且超不过十年！同时大多数存储设备，比如SD卡（包括不仅限于MicroSD SDHC SDXC），可擦写的光盘，u盘（也有叫闪存盘的）都是有读写次数寿命的，一般几千次到几百万次不等。但是硬盘却可以在正常家用的情况下使用十余年不出现损坏的情况（大多数），而且数据也不会丢失，所以它绝对够忠诚！</p>\n<p>&emsp; 至于史官嘛，硬盘记录了你很多的信息，如果进行数据挖掘，你用了多久电脑都可以看出来，暂且不说这些，你平常下载到电脑的视频图像，音频文档，都是保存在硬盘的。所以这个官分给再在合适不过了。</p>\n<p>&emsp; 这就是硬盘的简单描述，其实说了这么多啥也没讲，连个硬盘的图都没有，我写的时候也考虑过这个问题，这节就是给大家简单的建立一个电脑各硬件的概念，至于深入的研究，我们在下节课探讨。</p>\n<h2 id=\"内存：勤劳的坏脑子\"><a href=\"#内存：勤劳的坏脑子\" class=\"headerlink\" title=\"内存：勤劳的坏脑子\"></a>内存：勤劳的坏脑子</h2><p>&emsp; 说到内存，我感觉我就和它一样，勤劳！哦，不是，我和它一样记性不好……..</p>\n<p>&emsp; 内存，上面说过是为了解决CPU和硬盘之间巨大的速度（也可以说成是性能）落差而安装到电脑上的中间介质，这也就意味着它有两个显而易见的特性：</p>\n<ul>\n<li>速度快.</li>\n<li><p>实际不具有存储数据的功能.</p>\n<p>&emsp; 内存实际上是很多设备的统称，实际上内存是内部存储器的说法，但是在应用中，为了方便表述我们的内存就是解决CPU和硬盘之间巨大的速度落差的硬件，也就是常说的内存条，也是常说的RAM。</p>\n</li>\n</ul>\n<p>&emsp; 似乎又到了英语课的时间，上课之前闲扯一会吧～ 英语，我觉得计算机科学中最重要的知识，涉足这个领域，可能你最开始对数学了解不多，可能未接触过线性代数，但是，一定不能让英语成为你的短板，学会了英语就掌握了获取新的信息和知识的钥匙，就算数学类学科限制了你的研究，你也可以很快在一些渠道找到学习的资料，这些资料往往是英文的。你可能会说，我可以找中文版啊。这的确是个方便的方法，但，你如何保证翻译的准确性和正确性呢？同时，有一点我不得不说的，虽然，我在开头介绍计算机的时候，根据字典的意思，翻译过来，介绍计算机，但是我并不建议把所有的计算机术语都翻译成中文，因为实际上很多术语就是来自于生活中的英文单词，幽默风趣又浪漫的外国科学家给他们的新理论，新功能赋予了一个和它们相似的生活中的词语，然而我们翻译要讲究信达雅，有时候甚至歪曲了本意，造成很多国内的资料看起来晦涩难懂。之所以我用了翻译的方法介绍计算机，只不过是一个引子的作用，而且在以后的内容中，我也只会解释一些有清晰意思的英文术语。</p>\n<p> &emsp; RAM : Random-Access Memory 是随机访问存储器的缩写，之所以是随机的，是在程序进行请求的时候的内存地址是随机的，这个在讲解指针的内容会具体说明，我们简单的说说内存吧！</p>\n<p>&emsp; 前面说过，指令是存在内存里面的，所以，实际上，当你运行一个程序的时候，程序被从硬盘读出，复制到内存中（这个过程就是传说中的加载，也是英文给枪装弹的load的意思），然后处理器从内存中读取指令和所需的数据，这里不得不提到大名鼎鼎的 冯 诺依曼 体系 了，在前面的内容中，我总是说，内存里面包含指令和数据，你可能在想（很可能你根本没注意到）指令和数据是不是互相分离的，并且有专门的办法区分，当然有办法区分，不然我为什么说是指令和数据，但是只是对于人来说，就算程序可以区分指令和数据，那也是人编程的结果，实际上，对于计算机，指令和数据是没有区别的，都只是一堆二进制位罢了，这就是冯诺依曼体系，对于计算机，数据和指令是没有区别的，处理器通过特殊的寄存器（一种特殊的存储数据的结构），来确定要执行指令的在内存中的位置。这个体系造就了计算机，同时这个体系也给计算机造成了无穷无尽的灾难–漏洞，就是因为数据和指令的无区别性，可以通过一些特殊方法让恶意构造的数据被当作指令执行，从而在系统中打开后门。</p>\n<p>&emsp; 不过，你可能很好奇，我下载的十多个甚至几十GB的游戏，运行的时候也没有装满我几个G的内存啊！当然不会装满，首先，你运行的游戏程序并不是很大，加载的只是这个主程序和一些必要的资源文件。其次，这类程序通常有很高级的内存管理机制，可以动态的使用和释放内存，而不是一次性都加载到内存中。所以几个G的内存并不会完全被很大的程序占满。</p>\n<p>&emsp; 之前我们说过，内存是为了解决硬盘和处理器之间巨大的性能落差而增设的。那么，内存的速度够和处理器平起平坐了么？当然不够！不然，为什么还有一个我还没有提及的缓存的存在？所以，缓存是什么？可能有一些机智的读者已经猜到了。对，它就是解决处理器和内存之间的性能落差的。缓存通常很小，但速度很快，被封装在内存中用于存储一些急需访问的数据。这个以后有机会再详细的说一说吧～</p>\n<h2 id=\"显卡-：热爱三角形和并行运算的计算狂魔\"><a href=\"#显卡-：热爱三角形和并行运算的计算狂魔\" class=\"headerlink\" title=\"显卡 ：热爱三角形和并行运算的计算狂魔\"></a>显卡 ：热爱三角形和并行运算的计算狂魔</h2><p>&emsp; 很多人都知道GPU或者显卡，并且知道这个东西是计算机或者手机平板之类设备游戏性能的主要贡献者。但是却不知道它究竟是何物。下面我们就来揭开显卡神秘的面纱吧～</p>\n<p>&emsp; 显卡(Graphics card) 准确来说应该是 图形显示卡，是一直安装在计算机主板（稍后会提到）上的一种显示信息转换从而驱动显示器显示信息的设备。这也是显卡最开始被发明的目的：在终端命令行界面发展到一定程度之后，出现了图形化的界面，然而CPU的处理能力不足以支持可视化界面的渲染，所以科学家发明了最早的显卡–“图形加速卡”，后来随着芯片的制作工艺的发展，显卡的发展空间也越来越大，由此出现了“3D加速卡” 等更大处理能力的显卡。</p>\n<p>&emsp; 所以，你可能要问：显卡是不是可以取代CPU？目前来讲不太可能（只是目前来讲，谁知道未来会发展成什么鬼样子）这就得说说GPU了，就是显卡的“CPU”（当然这种说法不正确，只是一种比喻），GPU （graphics processing unit） 图形处理器，GPU使显卡减少了对CPU的依赖，并分担了部分原本是由CPU所担当的工作，尤其是在进行3D图形运算的时候。GPU就是显卡的运算核心，至少从1999年8月NVIDIA公司发布Geforce 256之后到今天已经一段时间之内是这样，简单来说目前的显卡就是GPU和显存（显卡专用的内存，性能往往比同时期的内存高很多）还有风扇之类的散热器还有一些负责图像输出之类的芯片和电路组成的。</p>\n<p>&emsp; 正因如此，显卡不仅仅以“卡”的形式存在，比如现在的超级本或者手机平板，都有很强的图像处理能力，然而这些设备的尺寸都不足以容纳一张显卡。因为这些设备的“显卡”或者说图形运算设备，都是集成的，或者常说的板载的，也有说是集显（实际上这只是针对超级本或者一些笔记本，平板和手机并不是这样的），这些设备的GPU被集成到了主板上，集成<br>的好处就是，可以大幅度的减小设备的尺寸，但是目前，因为我们还没能实现让某一事物尽善尽美，所以这样做也是有很大代价的，就是GPU的性能被缩水，而且由于没有足够的空间放置显存（当然我这是比较委婉的说法，大多数的真实情况是为了节约成本），通常GPU的显存由系统的内存共享，就是分出一部分的内存给显卡当作显存，这样不仅仅制约了GPU性能的发挥（实际上这个制约不是很大，因为集成的GPU本身的性能就不是很强），同时由于需要共享内存，使得系统实际的内存被减少，同时集成以为着永久固定在电路板上，除非更换整块主板，不然没有办法升级显示核心。</p>\n<p>&emsp; 当然还有一种新的GPU存在形式，就是把GPU和CPU做在一起，现在很多的低端电脑都是采用这种方案。手机平板几乎都是采用这种方案，这种封装方式的显卡被称为“核显”。</p>\n<p>&emsp;  回到刚才的问题：为什么目前GPU没办法替代CPU，因为GPU也是一种RISC，并不是为通用计算设计的。所以目前GPU，并不能完全做CPU的工作，但是GPU不同于CPU，具有数百或者数千个处理单元（内核），可以并行运算大量计算。</p>\n<p>&emsp; GPU因为在游戏中的3D渲染而出名，这里就简单说一下游戏的渲染，其实，显卡的3D渲染就是在快速的生成大量的三角形，密密麻麻的三角形，组成了我们看到的各种各样的具有立体感的画面，同时GPU在数据分析，深度学习，机器学习也有得天独厚的优势，GPU允许某些计算比传统CPU上运行相同的计算速度快10倍至100倍.</p>\n<h2 id=\"声卡：电子“金嗓子”\"><a href=\"#声卡：电子“金嗓子”\" class=\"headerlink\" title=\"声卡：电子“金嗓子”\"></a>声卡：电子“金嗓子”</h2><p>&emsp; 啊！我知道，我的小标题起的越来越老土了，甚至还有打广告的嫌疑（竟然被发现了，咳咳….）不过我的确暂时想不到更好的简述了。</p>\n<p>&emsp; 言归正传，声卡，一个经常被人们忽视的设备，我，作为一个HiFi发烧友，对声卡的依赖性就像猫奴吸猫一样，一日不吸，整天都没有好状态。除了睡觉之外的任何工作我都离不开音乐，虽然在焊接这类危险工作的时候要尽量保证安静，但我还是在动次打次…..</p>\n<p>&emsp; 声卡之所以被人忽视是因为，就像耳机一样，声卡的价格可以从十几元的白菜价到几百，几千，几万甚至几十万的天价。如果只是听个响，大部分设备，诸如电脑，手机，平板都有板载的集成声卡，大部分计算机主板都集成了AC97兼容声卡，所以，很多人似乎认为拥有音频的输入输出是计算机本来就有的功能。</p>\n<p>&emsp; 然而事实并非如此，就和显卡一样，标准的声卡也是一种插在主板上的板卡，声卡主要负责对音频的处理，简单来说，声卡是一种封装了ADC和DAC的板卡，当然了这个ADC和联盟这些类Dota游戏里面的ADC可不是一个东西，这里的ADC是analog digital convert 模拟-数字 转换也就是传说中的模数转换，模拟信号就是生活中的信号，比如声音，声音的变化可以连续的被记录在电流中，也就是用电流模拟声音的变化。但是数字信号是非线性的，只有1和0两个状态，所以，需要进行转换，这就是ADC，通常ADC负责录音。至于DAC，就是数模转换了，简单来说就是把音频文件中的数字信号转换<br>成驱动音响的模拟信号（电信号），通过音响内部的信号放大电路处理之后，你就可以听到声音了。</p>\n<p>&emsp; 实际上，早期的声卡集成了游戏控制器的接口，也就是接驳手柄一类设备的接口。综上，就是声卡的全部了，当然这也是一个抽象的声卡。（笑）</p>\n<h2 id=\"网卡-和声卡一样的幕后英雄\"><a href=\"#网卡-和声卡一样的幕后英雄\" class=\"headerlink\" title=\"网卡:和声卡一样的幕后英雄\"></a>网卡:和声卡一样的幕后英雄</h2><p>&emsp; 网卡，就和声卡一样，很多人都觉得是计算机本来就提供的功能，因为它和声卡一样，早就被板载了，很少有人再去购买独立网卡了，网卡，很容易猜到它的意思，就是提供计算机联网功能的设备，网卡其实也是有很大学问的，网卡的接口决定了网速，或者无线网卡的一些协议都会影响网络速度。因为目前广泛被集成的有线网卡都是千兆速率的（也是小b），所以就不细说了~</p>\n<h2 id=\"主板-热情的东北人\"><a href=\"#主板-热情的东北人\" class=\"headerlink\" title=\"主板:热情的东北人\"></a>主板:热情的东北人</h2><p>&emsp; 啊！我感觉很多人觉得我在开地图炮了，当然，如果你这么觉得，请在当前浏览器按下ctrl + w 然后别再来这个网站了。如果你觉得我是在引用一个巧妙的比喻（可能并不巧妙），那么让我们继续聊天吧～</p>\n<p>&emsp; 终于到了我们晦涩难懂又枯燥无味的抽象介绍的最后一位了，当然，我说的是这些设备，并不是我，哈哈。</p>\n<p>&emsp; 那么，主板到底是什么呢？根据我上面的描述，似乎所有东西都插或者接驳在主板上。事实正是如此，差不多所有的计算机硬件设备都要与主板连接，主板在英文中写作MotherBoard，所以你也可以叫它母版，不过无所谓了，主板在计算机中责任重大，不仅板载集成了好多设备，还包含 南桥 和 北桥芯片 来沟通处理器和内存以及各种板卡设备，同时拥有很多的接口，各种电源接口（用来给主板供电，同时也提供了为各种设备，如硬盘，显卡这类设备供电的接口），各种按键接口（比如开机键，重启键），各种设备接口，比如硬盘接口（IDE SATA SCSI等）或者各种板卡接口（显卡接口PCI-E,声卡接口PCI 都是常用接口，并不是绝对的）。总得来说，计算机的设备通过与主板连接，主板提供了不同设备数据交换的通道，同时给大部分设备供能，也可以通过主板的一些设置调节系统的一些参数。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj9wsjoiu00024xlmxrv127uh","category_id":"cj9wsjoiz00054xlm0xh0zuhq","_id":"cj9wsjoj4000e4xlmdxfud5ld"},{"post_id":"cj9wsjoix00044xlmmioch4l6","category_id":"cj9wsjoj3000c4xlmdwmkp0kg","_id":"cj9wsjoj6000i4xlm5qhd5o9c"},{"post_id":"cj9wsjoj000084xlmkceud0m2","category_id":"cj9wsjoj3000c4xlmdwmkp0kg","_id":"cj9wsjoj8000m4xlmdz2266r4"},{"post_id":"cj9wsjoj2000a4xlmh53sb6tp","category_id":"cj9wsjoj3000c4xlmdwmkp0kg","_id":"cj9wsjoj9000p4xlmjpoa987d"}],"PostTag":[{"post_id":"cj9wsjoiu00024xlmxrv127uh","tag_id":"cj9wsjoj000064xlmn233oodo","_id":"cj9wsjoj6000h4xlmg52fv3fw"},{"post_id":"cj9wsjoiu00024xlmxrv127uh","tag_id":"cj9wsjoj3000d4xlmh8cgrtmm","_id":"cj9wsjoj6000j4xlmpe8v6w10"},{"post_id":"cj9wsjoix00044xlmmioch4l6","tag_id":"cj9wsjoj4000g4xlmh8y82xf5","_id":"cj9wsjoj9000o4xlm69mpo0ti"},{"post_id":"cj9wsjoix00044xlmmioch4l6","tag_id":"cj9wsjoj7000l4xlmrjo7pg3e","_id":"cj9wsjoj9000q4xlmken6b1zd"},{"post_id":"cj9wsjoj000084xlmkceud0m2","tag_id":"cj9wsjoj9000n4xlm8x4qaadv","_id":"cj9wsjojc000x4xlmhe5wayd7"},{"post_id":"cj9wsjoj000084xlmkceud0m2","tag_id":"cj9wsjoj9000r4xlmr4tcrcd8","_id":"cj9wsjojc000y4xlm2dhca2rp"},{"post_id":"cj9wsjoj000084xlmkceud0m2","tag_id":"cj9wsjoja000s4xlmu0wwpqbf","_id":"cj9wsjojd00104xlmdivmztni"},{"post_id":"cj9wsjoj000084xlmkceud0m2","tag_id":"cj9wsjoja000t4xlmg1zlrqv2","_id":"cj9wsjojd00114xlm8qp3887j"},{"post_id":"cj9wsjoj000084xlmkceud0m2","tag_id":"cj9wsjojb000u4xlmcfadis33","_id":"cj9wsjojd00134xlm45vr2s1n"},{"post_id":"cj9wsjoj000084xlmkceud0m2","tag_id":"cj9wsjojb000v4xlmgcn6s0gl","_id":"cj9wsjojd00144xlm6lusmwty"},{"post_id":"cj9wsjoj2000a4xlmh53sb6tp","tag_id":"cj9wsjoj9000r4xlmr4tcrcd8","_id":"cj9wsjoje00194xlm9kqzgmi6"},{"post_id":"cj9wsjoj2000a4xlmh53sb6tp","tag_id":"cj9wsjojc000z4xlmmlp01m1d","_id":"cj9wsjoje001a4xlmdf8cjps1"},{"post_id":"cj9wsjoj2000a4xlmh53sb6tp","tag_id":"cj9wsjojd00124xlmnvxk8ju9","_id":"cj9wsjojf001b4xlmpvdvl88s"},{"post_id":"cj9wsjoj2000a4xlmh53sb6tp","tag_id":"cj9wsjoje00154xlmoopklzg8","_id":"cj9wsjojf001c4xlm1loiorjb"},{"post_id":"cj9wsjoj2000a4xlmh53sb6tp","tag_id":"cj9wsjoje00164xlmh9uzcaht","_id":"cj9wsjojf001d4xlmerwv9in5"},{"post_id":"cj9wsjoj2000a4xlmh53sb6tp","tag_id":"cj9wsjoje00174xlmtbrakcaz","_id":"cj9wsjojf001e4xlmkhbrx4j5"},{"post_id":"cj9wsjoj2000a4xlmh53sb6tp","tag_id":"cj9wsjoje00184xlmovhwz2jz","_id":"cj9wsjojf001f4xlmoept26cs"}],"Tag":[{"name":"Hello","_id":"cj9wsjoj000064xlmn233oodo"},{"name":"Hello-World","_id":"cj9wsjoj3000d4xlmh8cgrtmm"},{"name":"前言","_id":"cj9wsjoj4000g4xlmh8y82xf5"},{"name":"常见问题","_id":"cj9wsjoj7000l4xlmrjo7pg3e"},{"name":"计算机","_id":"cj9wsjoj9000n4xlm8x4qaadv"},{"name":"计算机基础","_id":"cj9wsjoj9000r4xlmr4tcrcd8"},{"name":"二进制","_id":"cj9wsjoja000s4xlmu0wwpqbf"},{"name":"计算机原理","_id":"cj9wsjoja000t4xlmg1zlrqv2"},{"name":"程序","_id":"cj9wsjojb000u4xlmcfadis33"},{"name":"指令","_id":"cj9wsjojb000v4xlmgcn6s0gl"},{"name":"硬件","_id":"cj9wsjojc000z4xlmmlp01m1d"},{"name":"CPU","_id":"cj9wsjojd00124xlmnvxk8ju9"},{"name":"处理器","_id":"cj9wsjoje00154xlmoopklzg8"},{"name":"GPU","_id":"cj9wsjoje00164xlmh9uzcaht"},{"name":"显卡","_id":"cj9wsjoje00174xlmtbrakcaz"},{"name":"内存","_id":"cj9wsjoje00184xlmovhwz2jz"}]}}